[
  {
    "objectID": "syllabus/syllabus_24.html",
    "href": "syllabus/syllabus_24.html",
    "title": "Instructor:",
    "section": "",
    "text": "Instructor:\nTaro Mieno:\n\nEmail: tmieno2@unl.edu\nOffice: 209 Filley Hall\n\n\n\nSchedule\n\nLectures: MW 1:00 - 2:30 PM\nOffice Hours: by appointment\n\n\n\nCourse Description:\nThe goal of this course is to prepare students for jobs that require quantitative skills beyond Microsoft Excel and graduate programs. The R software is used throughout the course. In order to achieve the goal, students will be introduced to the basics of programming and how to apply it to real world issues in the field of agricultural (agricultural economics, agronomy, etc) and environmental sciences. By completing the course, students will know data wrangling (e.g., merging, transforming datasets), data visualization, and exploratory data analysis, spatial data management.\n\n\nReading Materials\n\nRecommended:\n\nGrolemund, Garrett. and Wickham, Hadley. 2019 \nLovelace, Robin., Nowosad, Jakub., and Muenchow, Jannes. 2019 \n\nPrerequisites:\n\nIntroductory statistics (STAT 218) or equivalent\n\n\n\n\nGrading\n\n\ntitlescoreAssignments (3 assignments)60%Final Paper40%Total100%\n\n\n\nAssignments: There will be 3 assignments. Late submissions will have 1/3 of a letter grade deducted from the grade for that submission, increasing by an additional 1/3 grade for each 24 hours beyond the deadline.\nFinal Paper: In this assignment, you write a paper with a particular emphasis on programming using real-world data sets. You must identify a topic that would involve collecting datasets from multiple different data sources. The topic has to be approved by me to avoid a final project without significant programming tasks by . The proposal of your final project detailing what datasets to use, where you collect them, and how you use them have to be submitted by .\n\n\n\nImportant Deadlines:\n\nFinal project topic approved by the instructor: October 30\nFinal project proposal: November 13\nFinal project submission: December 20\n\n\n\nTopics Covered\n\nIntroduction to R\nQuarto\nData Wrangling\nMerge and reshape datasets\nData visualization\nMiscellaneous data manipulations\nHow to write and organize codes\nResearch flow illustration\nWriting your own function\nLooping\nParallel computing\nCreate tables\nSpatial data\nWriting reproducible articles\n\n\n\nAcademic Honesty:\nStudents are expected to adhere to guidelines concerning academic dishonesty outlined in Section 4.2 of University’s Student Code of Conduct. Students are encouraged to contact the instructor for clarification of these guidelines if they have questions or concerns. The Department of Agricultural Economics has a written policy defining academic dishonesty, the potential sanctions for incidents of academic dishonesty, and the appeal process for students facing potential sanctions. The Department also has a policy regarding potential appeals of final course grades. These policies are available for review on the department’s website\n\n\nStudents with disabilities:\nStudents with disabilities are encouraged to contact the instructor for a confidential discussion of their individual needs for academic accommodation. It is the policy of the University of Nebraska-Lincoln to provide flexible and individualized accommodation to students with documented disabilities that may affect their ability to fully participate in course activities or to meet course requirements. To receive accommodation services, students must be registered with the Services for Students with Disabilities (SSD) office, 132 Canfield Administration, 472-3787 voice or TTY."
  },
  {
    "objectID": "lectures/Chapter-9-Spatial-Data/L06_get_spatial_data.html#before-you-start",
    "href": "lectures/Chapter-9-Spatial-Data/L06_get_spatial_data.html#before-you-start",
    "title": "09-6: R as GIS: Download Spatial Datasets using R",
    "section": "Before you start",
    "text": "Before you start\n\nLearning objectives\nLearn how to download publicly available agriculture-related data from within R.\n\n\n\nTable of contents\n\ntigris\nUSDA-NASS\nPRISM\nCrop Data Layer (CDL)\n\n\nPre-requisite (Links)\n\nggplot2 primer\ndplyr primer\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-9-Spatial-Data/L06_get_spatial_data.html#tips-to-make-the-most-of-the-lecture-notes",
    "href": "lectures/Chapter-9-Spatial-Data/L06_get_spatial_data.html#tips-to-make-the-most-of-the-lecture-notes",
    "title": "09-6: R as GIS: Download Spatial Datasets using R",
    "section": "Tips to make the most of the lecture notes",
    "text": "Tips to make the most of the lecture notes\n\n\n\nInteractive navigation tools\n\nClick on the three horizontally stacked lines at the bottom left corner of the slide, then you will see table of contents, and you can jump to the section you want\nHit letter “o” on your keyboard and you will have a panel view of all the slides\n\n\nRunning and writing codes\n\nThe box area with a hint of blue as the background color is where you can write code (hereafter referred to as the “code area”).\nHit the “Run Code” button to execute all the code inside the code area.\nYou can evaluate (run) code selectively by highlighting the parts you want to run and hitting Command + Enter for Mac (Ctrl + Enter for Windows).\nIf you want to run the codes on your computer, you can first click on the icon with two sheets of paper stacked on top of each other (top right corner of the code chunk), which copies the code in the code area. You can then paste it onto your computer.\nYou can click on the reload button (top right corner of the code chunk, left to the copy button) to revert back to the original code."
  },
  {
    "objectID": "lectures/Chapter-9-Spatial-Data/L06_get_spatial_data.html#sec-tigris",
    "href": "lectures/Chapter-9-Spatial-Data/L06_get_spatial_data.html#sec-tigris",
    "title": "09-6: R as GIS: Download Spatial Datasets using R",
    "section": "U.S. county and state boundary",
    "text": "U.S. county and state boundary\n\nIntroductionHow (state)How (county)\n\n\n\nU.S. county and state boundary data are commonly used in many scientific studies.\nThe tigris package is one of the packages that let you download them from within R.\nIt lets you download much more than just county and state boundaries. See other type of data here\n\n\n\n\nYou can use tigris::states() to download the state boundary data as an sf object.\nBy default, the most detailed boundary data is downloaded, which can be quite large\n\ncreating map using ggplot() can take significantly more time\nthe map can be quite large in size\n\nBy adding cb = TRUE, you will get generalized (less detailed) boundary data, which is usually sufficient.\n\n\nstates_sf &lt;- tigris::states(cb = TRUE, progress_bar = FALSE)\n\n\n\nggplot(states_sf) +\n  geom_sf() +\n  theme_void()\n\n\n\n\n\n\n\n\n\n\n\nYou can use tigris::counties() to download the county boundary data as an sf object.\nYou can specify states by the state option.\n\n\nIL_IN_county &lt;- \n  tigris::counties(\n    state = c(\"IL\", \"IN\"), \n    cb = TRUE, \n    progress_bar = FALSE\n  )\n\n\n\nggplot() +\n  geom_sf(data = IL_IN_county) +\n  geom_sf(\n    data = dplyr::filter(states_sf, NAME %in% c(\"Illinois\", \"Indiana\")),\n    fill = NA,\n    color = \"blue\",\n    linewidth = 1\n  ) +\n  theme_void()"
  },
  {
    "objectID": "lectures/Chapter-9-Spatial-Data/L06_get_spatial_data.html#sec-usda-nass",
    "href": "lectures/Chapter-9-Spatial-Data/L06_get_spatial_data.html#sec-usda-nass",
    "title": "09-6: R as GIS: Download Spatial Datasets using R",
    "section": "USDA-NASS",
    "text": "USDA-NASS\n\nIntroductionHowDemonstrationCaveatLoopExercise\n\n\n\n\n\nUSDA NASS Quick Stats provides wealth of agriculture-related datasets such as harvested acres or irrigated acres by crop at different spatial resolutions (e.g., state, county) from both survey and census.\nWe use the tidyUSDA package to download dat from USDA NASS Quick Stat.\nA nice thing about tidyUSDA is that it gives you an option to download data as an sf object, which means you can immediately visualize the data or spatially interact it with other spatial objects.\n\n\n\n\n\n\n\n\n\nAPI keyDownload dataIdentify data item (variable) name\n\n\n\nFirst thing you want to do is to get an API key from this website.\n\nclick on obtain an API key\nsave the API key somewhere\n\nYou use this API key every time you download data from R using tidyUSDA.\n\n\n\nYou can download data using tidyUSDA::getQuickstat().\n\nSyntax\n\ngetQuickstat(\n    key,\n    program,\n    data_item,\n    geographic_level,\n    state,\n    year,\n    geometry\n  )\n\n\n\nkey: API key\nprogram: either “Survey” or “Census”\ndata_item: name of the variable to download\ngeographic_level: set the level of geographical unit (“County”, “State”)\nstate: vector of states\nyear: vector of years in character\ngeometry: if TRUE, then the downloaded data will be sf with geometry included. If false, a data.frame without geometry is returned.\n\n\n\n\n\nNote\n\n\n\nThere are many other options. Run ?getQuickstat to see all the options.\nThe above options should cover most of your use cases.\n\n\n\n\n\n\nSometimes, you know what you would like to download, but do not the name of the variable for it. In such a case, you can first get a list of all the data item names with this:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nYou can then narrow down the list using keywords. Suppose you are interested in getting irrigated grain corn yield measured in bu/acre.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nYou can now copy the first entry of the results and paste it for data_item option.\n\n\n\n\n\n\n\nDownloadSelect variables\n\n\nThe code below download county-level irrigated grain corn yield (bu/acre) in Illinois and Nebraska from 2000 through 2005.\n\n(\nIL_NE_ir_corn_yield &lt;-\n  tidyUSDA::getQuickstat(\n    key = nass_api_key, # you need to replace it with your API key\n    program = \"SURVEY\",\n    data_item = \"CORN, GRAIN, IRRIGATED - YIELD, MEASURED IN BU / ACRE\",\n    geographic_level = \"COUNTY\",\n    state = c(\"ILLINOIS\", \"NEBRASKA\"),\n    year = as.character(2000:2005),\n    geometry = TRUE\n  )\n)\n\n\n\nSimple feature collection with 546 features and 57 fields (with 6 geometries empty)\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -104.0535 ymin: 39.99993 xmax: -95.30829 ymax: 43.00171\nGeodetic CRS:  NAD83\nFirst 10 features:\n   GEOID year      ALAND unit_desc\n1  31007 2005 1932231568 BU / ACRE\n2  31007 2004 1932231568 BU / ACRE\n3  31007 2003 1932231568 BU / ACRE\n4  31007 2002 1932231568 BU / ACRE\n5  31007 2001 1932231568 BU / ACRE\n6  31007 2000 1932231568 BU / ACRE\n7  31013 2005 2784618473 BU / ACRE\n8  31013 2004 2784618473 BU / ACRE\n9  31013 2003 2784618473 BU / ACRE\n10 31013 2002 2784618473 BU / ACRE\n                                              short_desc Value region_desc\n1  CORN, GRAIN, IRRIGATED - YIELD, MEASURED IN BU / ACRE   165            \n2  CORN, GRAIN, IRRIGATED - YIELD, MEASURED IN BU / ACRE   160            \n3  CORN, GRAIN, IRRIGATED - YIELD, MEASURED IN BU / ACRE   142            \n4  CORN, GRAIN, IRRIGATED - YIELD, MEASURED IN BU / ACRE   127            \n5  CORN, GRAIN, IRRIGATED - YIELD, MEASURED IN BU / ACRE   143            \n6  CORN, GRAIN, IRRIGATED - YIELD, MEASURED IN BU / ACRE   125            \n7  CORN, GRAIN, IRRIGATED - YIELD, MEASURED IN BU / ACRE   177            \n8  CORN, GRAIN, IRRIGATED - YIELD, MEASURED IN BU / ACRE   151            \n9  CORN, GRAIN, IRRIGATED - YIELD, MEASURED IN BU / ACRE   168            \n10 CORN, GRAIN, IRRIGATED - YIELD, MEASURED IN BU / ACRE   147            \n   prodn_practice_desc county_code statisticcat_desc state_alpha asd_code\n1            IRRIGATED         007             YIELD          NE       10\n2            IRRIGATED         007             YIELD          NE       10\n3            IRRIGATED         007             YIELD          NE       10\n4            IRRIGATED         007             YIELD          NE       10\n5            IRRIGATED         007             YIELD          NE       10\n6            IRRIGATED         007             YIELD          NE       10\n7            IRRIGATED         013             YIELD          NE       10\n8            IRRIGATED         013             YIELD          NE       10\n9            IRRIGATED         013             YIELD          NE       10\n10           IRRIGATED         013             YIELD          NE       10\n    country_name zip_5 agg_level_desc state_ansi CV (%) county_name\n1  UNITED STATES               COUNTY         31             BANNER\n2  UNITED STATES               COUNTY         31             BANNER\n3  UNITED STATES               COUNTY         31             BANNER\n4  UNITED STATES               COUNTY         31             BANNER\n5  UNITED STATES               COUNTY         31             BANNER\n6  UNITED STATES               COUNTY         31             BANNER\n7  UNITED STATES               COUNTY         31          BOX BUTTE\n8  UNITED STATES               COUNTY         31          BOX BUTTE\n9  UNITED STATES               COUNTY         31          BOX BUTTE\n10 UNITED STATES               COUNTY         31          BOX BUTTE\n   watershed_code reference_period_desc domaincat_desc country_code week_ending\n1        00000000                  YEAR  NOT SPECIFIED         9000            \n2        00000000                  YEAR  NOT SPECIFIED         9000            \n3        00000000                  YEAR  NOT SPECIFIED         9000            \n4        00000000                  YEAR  NOT SPECIFIED         9000            \n5        00000000                  YEAR  NOT SPECIFIED         9000            \n6        00000000                  YEAR  NOT SPECIFIED         9000            \n7        00000000                  YEAR  NOT SPECIFIED         9000            \n8        00000000                  YEAR  NOT SPECIFIED         9000            \n9        00000000                  YEAR  NOT SPECIFIED         9000            \n10       00000000                  YEAR  NOT SPECIFIED         9000            \n    class_desc state_name state_fips_code watershed_desc congr_district_code\n1  ALL CLASSES   NEBRASKA              31                                   \n2  ALL CLASSES   NEBRASKA              31                                   \n3  ALL CLASSES   NEBRASKA              31                                   \n4  ALL CLASSES   NEBRASKA              31                                   \n5  ALL CLASSES   NEBRASKA              31                                   \n6  ALL CLASSES   NEBRASKA              31                                   \n7  ALL CLASSES   NEBRASKA              31                                   \n8  ALL CLASSES   NEBRASKA              31                                   \n9  ALL CLASSES   NEBRASKA              31                                   \n10 ALL CLASSES   NEBRASKA              31                                   \n                    location_desc               load_time end_code source_desc\n1     NEBRASKA, NORTHWEST, BANNER 2012-01-01 00:00:00.000       00      SURVEY\n2     NEBRASKA, NORTHWEST, BANNER 2012-01-01 00:00:00.000       00      SURVEY\n3     NEBRASKA, NORTHWEST, BANNER 2012-01-01 00:00:00.000       00      SURVEY\n4     NEBRASKA, NORTHWEST, BANNER 2012-01-01 00:00:00.000       00      SURVEY\n5     NEBRASKA, NORTHWEST, BANNER 2012-01-01 00:00:00.000       00      SURVEY\n6     NEBRASKA, NORTHWEST, BANNER 2012-01-01 00:00:00.000       00      SURVEY\n7  NEBRASKA, NORTHWEST, BOX BUTTE 2012-01-01 00:00:00.000       00      SURVEY\n8  NEBRASKA, NORTHWEST, BOX BUTTE 2012-01-01 00:00:00.000       00      SURVEY\n9  NEBRASKA, NORTHWEST, BOX BUTTE 2012-01-01 00:00:00.000       00      SURVEY\n10 NEBRASKA, NORTHWEST, BOX BUTTE 2012-01-01 00:00:00.000       00      SURVEY\n   county_ansi freq_desc sector_desc  group_desc util_practice_desc begin_code\n1          007    ANNUAL       CROPS FIELD CROPS              GRAIN         00\n2          007    ANNUAL       CROPS FIELD CROPS              GRAIN         00\n3          007    ANNUAL       CROPS FIELD CROPS              GRAIN         00\n4          007    ANNUAL       CROPS FIELD CROPS              GRAIN         00\n5          007    ANNUAL       CROPS FIELD CROPS              GRAIN         00\n6          007    ANNUAL       CROPS FIELD CROPS              GRAIN         00\n7          013    ANNUAL       CROPS FIELD CROPS              GRAIN         00\n8          013    ANNUAL       CROPS FIELD CROPS              GRAIN         00\n9          013    ANNUAL       CROPS FIELD CROPS              GRAIN         00\n10         013    ANNUAL       CROPS FIELD CROPS              GRAIN         00\n    asd_desc domain_desc commodity_desc COUNTYKEY STATEFP COUNTYFP COUNTYNS\n1  NORTHWEST       TOTAL           CORN     31007      31      007 00835826\n2  NORTHWEST       TOTAL           CORN     31007      31      007 00835826\n3  NORTHWEST       TOTAL           CORN     31007      31      007 00835826\n4  NORTHWEST       TOTAL           CORN     31007      31      007 00835826\n5  NORTHWEST       TOTAL           CORN     31007      31      007 00835826\n6  NORTHWEST       TOTAL           CORN     31007      31      007 00835826\n7  NORTHWEST       TOTAL           CORN     31013      31      013 00835991\n8  NORTHWEST       TOTAL           CORN     31013      31      013 00835991\n9  NORTHWEST       TOTAL           CORN     31013      31      013 00835991\n10 NORTHWEST       TOTAL           CORN     31013      31      013 00835991\n        NAME         NAMELSAD LSAD CLASSFP MTFCC CSAFP CBSAFP METDIVFP FUNCSTAT\n1     Banner    Banner County   06      H1 G4020  &lt;NA&gt;   &lt;NA&gt;     &lt;NA&gt;        A\n2     Banner    Banner County   06      H1 G4020  &lt;NA&gt;   &lt;NA&gt;     &lt;NA&gt;        A\n3     Banner    Banner County   06      H1 G4020  &lt;NA&gt;   &lt;NA&gt;     &lt;NA&gt;        A\n4     Banner    Banner County   06      H1 G4020  &lt;NA&gt;   &lt;NA&gt;     &lt;NA&gt;        A\n5     Banner    Banner County   06      H1 G4020  &lt;NA&gt;   &lt;NA&gt;     &lt;NA&gt;        A\n6     Banner    Banner County   06      H1 G4020  &lt;NA&gt;   &lt;NA&gt;     &lt;NA&gt;        A\n7  Box Butte Box Butte County   06      H1 G4020  &lt;NA&gt;   &lt;NA&gt;     &lt;NA&gt;        A\n8  Box Butte Box Butte County   06      H1 G4020  &lt;NA&gt;   &lt;NA&gt;     &lt;NA&gt;        A\n9  Box Butte Box Butte County   06      H1 G4020  &lt;NA&gt;   &lt;NA&gt;     &lt;NA&gt;        A\n10 Box Butte Box Butte County   06      H1 G4020  &lt;NA&gt;   &lt;NA&gt;     &lt;NA&gt;        A\n    AWATER    INTPTLAT     INTPTLON                       geometry\n1   392073 +41.5397495 -103.7262626 MULTIPOLYGON (((-104.0529 4...\n2   392073 +41.5397495 -103.7262626 MULTIPOLYGON (((-104.0529 4...\n3   392073 +41.5397495 -103.7262626 MULTIPOLYGON (((-104.0529 4...\n4   392073 +41.5397495 -103.7262626 MULTIPOLYGON (((-104.0529 4...\n5   392073 +41.5397495 -103.7262626 MULTIPOLYGON (((-104.0529 4...\n6   392073 +41.5397495 -103.7262626 MULTIPOLYGON (((-104.0529 4...\n7  7150304 +42.2103804 -103.0817795 MULTIPOLYGON (((-103.4444 4...\n8  7150304 +42.2103804 -103.0817795 MULTIPOLYGON (((-103.4444 4...\n9  7150304 +42.2103804 -103.0817795 MULTIPOLYGON (((-103.4444 4...\n10 7150304 +42.2103804 -103.0817795 MULTIPOLYGON (((-103.4444 4...\n\n\n\n\nAs you saw earlier, it has 58 columns, most of which are not necessary.\nHere is the list of only variables you will probably need:\n\nIL_NE_ir_corn_yield %&gt;%\n  dplyr::select(\n    year, county_name, county_code, state_name,\n    state_fips_code, short_desc, Value\n  )\n\nSimple feature collection with 546 features and 7 fields (with 6 geometries empty)\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -104.0535 ymin: 39.99993 xmax: -95.30829 ymax: 43.00171\nGeodetic CRS:  NAD83\nFirst 10 features:\n   year county_name county_code state_name state_fips_code\n1  2005      BANNER         007   NEBRASKA              31\n2  2004      BANNER         007   NEBRASKA              31\n3  2003      BANNER         007   NEBRASKA              31\n4  2002      BANNER         007   NEBRASKA              31\n5  2001      BANNER         007   NEBRASKA              31\n6  2000      BANNER         007   NEBRASKA              31\n7  2005   BOX BUTTE         013   NEBRASKA              31\n8  2004   BOX BUTTE         013   NEBRASKA              31\n9  2003   BOX BUTTE         013   NEBRASKA              31\n10 2002   BOX BUTTE         013   NEBRASKA              31\n                                              short_desc Value\n1  CORN, GRAIN, IRRIGATED - YIELD, MEASURED IN BU / ACRE   165\n2  CORN, GRAIN, IRRIGATED - YIELD, MEASURED IN BU / ACRE   160\n3  CORN, GRAIN, IRRIGATED - YIELD, MEASURED IN BU / ACRE   142\n4  CORN, GRAIN, IRRIGATED - YIELD, MEASURED IN BU / ACRE   127\n5  CORN, GRAIN, IRRIGATED - YIELD, MEASURED IN BU / ACRE   143\n6  CORN, GRAIN, IRRIGATED - YIELD, MEASURED IN BU / ACRE   125\n7  CORN, GRAIN, IRRIGATED - YIELD, MEASURED IN BU / ACRE   177\n8  CORN, GRAIN, IRRIGATED - YIELD, MEASURED IN BU / ACRE   151\n9  CORN, GRAIN, IRRIGATED - YIELD, MEASURED IN BU / ACRE   168\n10 CORN, GRAIN, IRRIGATED - YIELD, MEASURED IN BU / ACRE   147\n                         geometry\n1  MULTIPOLYGON (((-104.0529 4...\n2  MULTIPOLYGON (((-104.0529 4...\n3  MULTIPOLYGON (((-104.0529 4...\n4  MULTIPOLYGON (((-104.0529 4...\n5  MULTIPOLYGON (((-104.0529 4...\n6  MULTIPOLYGON (((-104.0529 4...\n7  MULTIPOLYGON (((-103.4444 4...\n8  MULTIPOLYGON (((-103.4444 4...\n9  MULTIPOLYGON (((-103.4444 4...\n10 MULTIPOLYGON (((-103.4444 4...\n\n\n\n\n\n\nNote\n\n\n\nThe value of the variable of your interest is stored in Value column.\n\n\n\n\n\n\n\n\n\n\n\nCaveat 1Caveat 2\n\n\n\n\nYou cannot retrieve more than 50,000 (the limit is set by QuickStat) rows of data. The query below requests much more than 50,000 observations, and fail. In this case, you need to narrow the search and chop the task into smaller tasks.\nReplace nass_api_key with your own API key and run the ode on your computer.\n\n\n\n\n\n\nmany_states_corn &lt;-\n  getQuickstat(\n    key = nass_api_key,\n    program = \"SURVEY\",\n    commodity = \"CORN\",\n    geographic_level = \"COUNTY\",\n    state = c(\"ILLINOIS\", \"COLORADO\", \"NEBRASKA\", \"IOWA\", \"KANSAS\"),\n    year = as.character(1995:2018),\n    geometry = TRUE\n  ) \n\n\n\n\n\nA query returns an error when there is no observation that satisfy your query criteria. For example, even though “CORN, GRAIN, IRRIGATED - YIELD, MEASURED IN BU / ACRE” does exists as a data_item, there is no entry for the statistic in Illinois in 2018. Therefore, the following query fails.\n\n\n\n\n\n\nmany_states_corn &lt;-\n  getQuickstat(\n    key = key_get(\"usda_nass_qs_api\"),\n    program = \"SURVEY\",\n    data_item = \"CORN, GRAIN, IRRIGATED - YIELD, MEASURED IN BU / ACRE\",\n    geographic_level = \"COUNTY\",\n    state = \"ILLINOIS\",\n    year = \"2018\",\n    geometry = TRUE\n  ) \n\n\n\n\n\n\n\n\nMotivationHow\n\n\n\nAs mentioned here, there is a limit to how much data you can download with one query.\nWhen your target dataset exceeds the limit, you can break it up into pieces and download them repeatedly using loop.\n\n\n\nThere are two dimensions that seems easy to loop over: state and year. Here, let’s loop over year.\nWe first create a sequence of years to loop over one by one:\n\n#--- for the sake of shorter run time, we use 2015:2018 here ---#\nyear_list &lt;- as.character(2015:2018)\n\n\nWe now download data year by year using for loop:\n\nlapply(\n  year_list, # list of objects to loop over\n  \\(x) {\n    getQuickstat(\n      key = nass_api_key,\n      program = \"SURVEY\",\n      commodity = \"CORN\",\n      geographic_level = \"COUNTY\",\n      state = c(\"ILLINOIS\", \"COLORADO\", \"NEBRASKA\", \"IOWA\", \"KANSAS\"),\n      year = x, # use the year \n      geometry = TRUE\n    )\n  }\n) %&gt;%\n# combine a list of sf into a single sf\ndplyr::bind_rows() \n\n\n\n\n\n\n\n\nIdentify data_item nameDownload dataCreate a map\n\n\nYou are interested in getting soybean harvested acres data. Search for the data_item name for this variable from tidyUSDA::allDataItem\n\nAnswer\n\n\nCode\ntidyUSDA::allDataItem %&gt;%\n  #--- find data items that include SOY ---#\n  grep(pattern = \"SOY\", ., value = TRUE) %&gt;%\n  grep(pattern = \"HARVESTED\", ., value = TRUE) \n\n\n\n\nNow, using the data_item name you got earlier, download the county-level data for Colorado and Kansas from 1990 through 1994 as an sf obejct.\n\nAnswer\n\n\nCode\nKS_CO_soy_hacres &lt;-\n  getQuickstat(\n    key = nass_api_key,\n    program = \"SURVEY\",\n    data_item = \"SOYBEANS - ACRES HARVESTED\",\n    geographic_level = \"COUNTY\",\n    state = c(\"KANSAS\", \"COLORADO\"),\n    year = as.character(1990:1994),\n    geometry = TRUE\n  ) %&gt;%\n  dplyr::select(\n    year, county_name, county_code, state_name,\n    state_fips_code, short_desc, Value\n  )\n\n\n\n\nCreate a map of soybean harvested acres faceted by year.\n\nAnswer\n\n\nCode\nggplot() +\n  geom_sf(data = KS_CO_soy_hacres, aes(fill = Value)) +\n  facet_wrap(. ~ year) +\n  theme_void()"
  },
  {
    "objectID": "lectures/Chapter-9-Spatial-Data/L06_get_spatial_data.html#sec-prism",
    "href": "lectures/Chapter-9-Spatial-Data/L06_get_spatial_data.html#sec-prism",
    "title": "09-6: R as GIS: Download Spatial Datasets using R",
    "section": "PRISM",
    "text": "PRISM\n\nIntroductionHowTry yourself on your computerRead PRISM filesExercise\n\n\n\n\nPRISM dataset provide model-based estimates of daily precipitation, maximum temperature, and minimum temperature for the U.S. at the 4km by 4km spatial resolution.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou can use get_prism_dailys() from the prism package to download PRISM data.\n\nSyntax\n\nprism::get_prism_dailys(\n  type = variable type,\n  minDate = starting date as character,\n  maxDate = ending date as character,\n  keepZip = TRUE or FALSE\n) \n\n\ntype: you can select from “ppt” (precipitation), “tmean” (mean temperature), “tmin” (minimum temperature), and “tmax” (maximum temperature).\nminDate: starting date specified in format YYYY-MM-DD\nmaxDate: end date specified in format YYYY-MM-DD\nkeepZip: if FALSE, the zipped folders of the downloaded files will not be kept; otherwise, they will be kept.\n\n\nBefore you download PRISM data using the function, it is recommended that you set the path to folder in which the downloaded PRISM files will be stored using.\n\noptions(prism.path = \"path\")\n\n\n\n\n\nFirst set the path:\n\nlibrary(prism)\noptions(prism.path = \"lectures/Data/PRISM\")\n\n\nNow, download:\n\nprism::get_prism_dailys(\n  type = \"ppt\",\n  minDate = \"2024-01-01\",\n  maxDate = \"2024-01-05\",\n  keepZip = FALSE\n)\n\nThis will create a single folder for each day of the specified date range. Inside of the folders, you will see bunch of files with the same name except extensions.\n\n\n\n\n\n\n\n\n\nAs you have seen, we would have many files to open unless the specified date range is very short. In such case, you should take advantage of a simple for loop.\nFirst, the following code gives you the name of all the PRISM files with .bill extension.\n\n\n\n\n\n\n(\nprism_files_list &lt;- \n  list.files(\"Data/PRISM\", recursive = TRUE, full.names = TRUE) %&gt;%\n  .[grep(\"\\\\.bil\", .)] %&gt;%\n  .[!grepl(\"aux\", .)]\n)\n\n[1] \"Data/PRISM/PRISM_ppt_provisional_4kmD2_20240101_bil/PRISM_ppt_provisional_4kmD2_20240101_bil.bil\"\n[2] \"Data/PRISM/PRISM_ppt_provisional_4kmD2_20240102_bil/PRISM_ppt_provisional_4kmD2_20240102_bil.bil\"\n[3] \"Data/PRISM/PRISM_ppt_provisional_4kmD2_20240103_bil/PRISM_ppt_provisional_4kmD2_20240103_bil.bil\"\n[4] \"Data/PRISM/PRISM_ppt_provisional_4kmD2_20240104_bil/PRISM_ppt_provisional_4kmD2_20240104_bil.bil\"\n[5] \"Data/PRISM/PRISM_ppt_provisional_4kmD2_20240105_bil/PRISM_ppt_provisional_4kmD2_20240105_bil.bil\"\n[6] \"Data/PRISM/PRISM_tmax_stable_4kmD2_20120801_bil/PRISM_tmax_stable_4kmD2_20120801_bil.bil\"        \n[7] \"Data/PRISM/tmax/PRISM_tmax_stable_4kmD2_20230601_bil/PRISM_tmax_stable_4kmD2_20230601_bil.bil\"   \n[8] \"Data/PRISM/tmax/PRISM_tmax_stable_4kmD2_20230602_bil/PRISM_tmax_stable_4kmD2_20230602_bil.bil\"   \n[9] \"Data/PRISM/tmax/PRISM_tmax_stable_4kmD2_20230603_bil/PRISM_tmax_stable_4kmD2_20230603_bil.bil\"   \n\n\nJust replace \"Data/PRISM\" with your folder path to the PRISM files.\nWe can now read them using terra::rast() like below:\n\nterra::rast(prism_files_list) \n\nclass       : SpatRaster \nsize        : 621, 1405, 9  (nrow, ncol, nlyr)\nresolution  : 0.04166667, 0.04166667  (x, y)\nextent      : -125.0208, -66.47917, 24.0625, 49.9375  (xmin, xmax, ymin, ymax)\ncoord. ref. : lon/lat NAD83 \nsources     : PRISM_ppt_provisional_4kmD2_20240101_bil.bil  \n              PRISM_ppt_provisional_4kmD2_20240102_bil.bil  \n              PRISM_ppt_provisional_4kmD2_20240103_bil.bil  \n              ... and 6 more sources\nnames       : PRISM~1_bil, PRISM~2_bil, PRISM~3_bil, PRISM~4_bil, PRISM~5_bil, PRISM~1_bil, ... \nmin values  :       0.000,      0.0000,      0.0000,      0.0000,      0.0000,       7.408, ... \nmax values  :      42.917,     10.2093,     87.7497,     37.0813,     90.0984,      46.303, ... \n\n\n\n\n\nDownload PRISM dataRead the downloaded filesCreate a map\n\n\nDownload PRISM maximum temperature data from “06-01-2023” to “06-03-2023”.\n\nAnswer\n\n\n\nCode\n#--- set the path (you need to change the path) ---# \noptions(prism.path = \"Data/PRISM/tmax\")\n\n#--- download ---#\nprism::get_prism_dailys(\n  type = \"tmax\",\n  minDate = \"2023-06-01\",\n  maxDate = \"2023-06-03\",\n  keepZip = FALSE\n)\n\n\n\n\nRead all the maximum temperature data files you just downloaded using terra::rast().\n\nAnswer\n\n\nCode\nprism_files_list &lt;-\n  list.files(\"Data/PRISM/tmax\", recursive = TRUE, full.names = TRUE) %&gt;%\n  .[grep(\"\\\\.bil\", .)] %&gt;%\n  .[!grepl(\"aux\", .)]\n\nprism_max_temp &lt;- terra::rast(prism_files_list)\n\n\n\n\nUsing the SpatRaster object, create a faceted map of maximum temperature.\n\nAnswer\n\n\nCode\nggplot() +\n  geom_spatraster(data = prism_max_temp) +\n  facet_wrap(~lyr)"
  },
  {
    "objectID": "lectures/Chapter-9-Spatial-Data/L06_get_spatial_data.html#crop-data-layer",
    "href": "lectures/Chapter-9-Spatial-Data/L06_get_spatial_data.html#crop-data-layer",
    "title": "09-6: R as GIS: Download Spatial Datasets using R",
    "section": "Crop Data Layer",
    "text": "Crop Data Layer\n\nIntroductionCropScapeR packageHowExample 1Example 2Exercise\n\n\n\n\n\nThe Cropland Data Layer (CDL) is a data product produced by the National Agricultural Statistics Service of U.S. Department of Agriculture.\nCDL provides geo-referenced, high accuracy, 30 (after 2007) or 56 (in 2006 and 2007) meter resolution, crop-specific cropland land cover information for up to 48 contiguous states in the U.S. from 1997 to the present.\nThis data product has been extensively used in agricultural research. CropScape is an interactive Web CDL exploring system, and it was developed to query, visualize, disseminate, and analyze CDL data geospatially through standard geospatial web services in a publicly accessible on-line environment (Han et al., 2012).\nThis section shows how to use the CropScapeR package (Chen 2020) to download and explore the CDL data.\n\n\n\n\n\n\n\n\n\n\n\nThe package implements some of the most useful geospatial processing services provided by the CropScape, and it allows users to efficiently process the CDL data within the R environment.\nSpecifically, the CropScapeR package provides four functions that implement different kinds of geospatial processing services provided by the CropScape.\nGetCDLData() in particular is the most important function as it lets you download the raw CDL data.\nThe other functions provide the users with the CDL data summarized or transformed in particular manners that may suit the need of some users.\n\n\n\n\n\n\n\n\n\nGetCDLData() allows us to obtain CDL data for any Area of Interest (AOI) in a given year. It requires three parameters to make a valid data request:\n\naoi: Area of Interest (AOI).\nyear: Year of the data to request.\ntype: Type of AOI.\n\nThe following AOI-type combinations are accepted:\n\nany spatial object as an sf or sfc object - type = \"b\"\ncounty (defined by a 5-digit county FIPS code) - type = \"f\"\nstate (defined by a 2-digit state FIPS code) - type = \"f\"\nbounding box (defined by four corner points) - type = \"b\"\npolygon area (defined by at least three coordinates) - type = \"ps\"\nsingle point (defined by a coordinate) - type = \"p\"\n\n\n\n\nImportant\n\n\nThe downloaded raster data is RasterLayer defined by the raster package, not SpatRaster by the terra package.\n\n\n\n\n\n\nSuppose you are interested in getting CDL data for the entire Nebraska.\nIn this case we can use the state FIP code for NE (31) for aoi and specify type to be \"f\" (Note that this would take some time if you run it.).\nThis can take a while. Since the spatial resolution is 30m, the CDL data covering the entire IL would have lots of cells and thus memory-intensive.\n\n\ncdl_NE &lt;-\n  CropScapeR::GetCDLData(\n    aoi = 31,\n    year = \"2018\",\n    type = \"f\"\n  )\n\n\n\n\nArea of interestDownload\n\n\nIn this example, we are interested in obtaining CDL data for the following four counties in Illinois: Champaign, Vermilion, Ford, and Iroquois.\nLet’s first get the county boundary data for them:\n\nIL_county &lt;- tigris::counties(state = \"IL\", cb = TRUE, progress_bar = FALSE)\n\nIL_4_county &lt;- dplyr::filter(IL_county, NAME %in% c(\"Champaign\", \"Vermilion\", \"Ford\", \"Iroquois\"))\n\n\nHere is where they are:\n\n\n\n\n\n\n\n\n\n\n\nWhen you provide aoi using an sf object, CDL data for the bounding box of the sf will be downloaded. So, you should pick \"b\" as the type.\n\nGetCDLData(\n  aoi = IL_4_county,\n  year = \"2018\",\n  type = \"b\"\n)\n\n\n\n\n\n\n\n\nAOIDownloadMaskAggregateMap\n\n\nUsing the tigris package, download the county boundary for Iowa, and then filter it to keep only the Sioux county. Name the sf file sioux_county.\n\nAnswer\n\n\nCode\nsioux_county &lt;-\n  tigris::counties(state = \"IA\", cb = TRUE) %&gt;%\n  dplyr::filter(NAME == \"Sioux\")\n\n\n\n\nUsing the CropScapeR::GetCDLData(), download the 2022 CDL data covering the Sioux County. Then, convert it to a SpatRaster object. Name the final product sioux_cdl_2022.\n\nAnswer\n\n\nCode\nsioux_cdl_2022 &lt;-\n  GetCDLData(\n    aoi = sioux_county,\n    year = \"2022\",\n    type = \"b\"\n  ) %&gt;%\n  terra::rast()\n\n\n\n\nMask the CDL data you just downloaded using sioux_county using terra::mask().\n\nAnswer\n\n\nCode\nsioux_masked &lt;- terra::mask(sioux_cdl_2022, st_transform(sioux_county, crs(sioux_cdl_2022)))\n\n\n\n\nBefore creating a map from the downloaded CDL layer data, let’s aggregate the data by factor of 10 using terra::aggregate(). Call it sioux_aggregated.\n\nAnswer\n\n\nCode\nsioux_aggregated &lt;- terra::aggregate(sioux_masked, fact = 10)\n\n\n\n\nCreate a map of land use type using the aggregate Sioux county CDL data using tidyterra::geom_spatraster().\n\nAnswer\n\n\nCode\nggplot() +\n  geom_spatraster(data = sioux_aggregated)"
  },
  {
    "objectID": "lectures/Chapter-9-Spatial-Data/L04_2_vector_spatial_join.html#before-you-start",
    "href": "lectures/Chapter-9-Spatial-Data/L04_2_vector_spatial_join.html#before-you-start",
    "title": "09-4-2: R as GIS: Interaction of Vector Datasets II",
    "section": "Before you start",
    "text": "Before you start\n\nLearning objectives\nThe objectives of this chapter is to learn spatial interactive operations that involves two sf objects. Specifically,\n\noverlay an sf object on another sf object to extract (or join) values from the sf object\n\n\n\n\nTable of contents\n\nTopological Relations\nSpatial Sub-setting\nSpatial Value Extraction\n\n\nPre-requisite (Links)\n\nggplot2 primer\ndplyr primer\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-9-Spatial-Data/L04_2_vector_spatial_join.html#tips-to-make-the-most-of-the-lecture-notes",
    "href": "lectures/Chapter-9-Spatial-Data/L04_2_vector_spatial_join.html#tips-to-make-the-most-of-the-lecture-notes",
    "title": "09-4-2: R as GIS: Interaction of Vector Datasets II",
    "section": "Tips to make the most of the lecture notes",
    "text": "Tips to make the most of the lecture notes\n\n\n\nInteractive navigation tools\n\nClick on the three horizontally stacked lines at the bottom left corner of the slide, then you will see table of contents, and you can jump to the section you want\nHit letter “o” on your keyboard and you will have a panel view of all the slides\n\n\nRunning and writing codes\n\nThe box area with a hint of blue as the background color is where you can write code (hereafter referred to as the “code area”).\nHit the “Run Code” button to execute all the code inside the code area.\nYou can evaluate (run) code selectively by highlighting the parts you want to run and hitting Command + Enter for Mac (Ctrl + Enter for Windows).\nIf you want to run the codes on your computer, you can first click on the icon with two sheets of paper stacked on top of each other (top right corner of the code chunk), which copies the code in the code area. You can then paste it onto your computer.\nYou can click on the reload button (top right corner of the code chunk, left to the copy button) to revert back to the original code."
  },
  {
    "objectID": "lectures/Chapter-9-Spatial-Data/L04_2_vector_spatial_join.html#spatial-join",
    "href": "lectures/Chapter-9-Spatial-Data/L04_2_vector_spatial_join.html#spatial-join",
    "title": "09-4-2: R as GIS: Interaction of Vector Datasets II",
    "section": "Spatial join",
    "text": "Spatial join\n\nWhat is it?ClassificationSub-classification\n\n\nSpatial join involves all of the following:\n\noverlay one spatial layer (target layer) onto another spatial layer (source layer)\nfor each of the observation in the target layer\n\nidentify which objects in the source layer it geographically intersects (or a different topological relation) with\n\nextract values associated with the intersecting objects in the source layer (and summarize if necessary),\nassign the extracted value to the object in the target layer\n\n\n\n\n\n\nDefinitions: target layer\n\n\nThe sf layer that has sfgs  to  which you would like to assign the values of attributes from the source layer.\n\n\n\n\n\n\n\n\nDefinitions: source layer\n\n\nThe sf layer that has sfgs  from  which you would like to assign the values of its attributes to the target layer.\n\n\n\n\n\n\nWe can classify spatial join into four categories by the type of the underlying spatial objects:\n\n vector-vector: vector data (target) against vector data (source) \nvector-raster: vector data (target) against raster data (source)\n\nraster-vector: raster data (target) against vector data (source)\n\nraster-raster: raster data (target) against raster data (source)\n\nAmong the four, our focus here is the first case (the second case will be discussed later).\nWe will not cover the third and fourth cases in this course because it is almost always the case that our target data is a vector data (e.g., city or farm fields as points, political boundaries as polygons, etc).\n\n\nAs noted earlier, we will look at vector-vector interactions in this lecture.\nThis category can be further broken down into different sub categories depending on the type of spatial object (point, line, and polygon).\nHere, we will ignore any spatial joins that involve lines. This is because objects represented by lines are rarely observation units in our analysis nor the source data from which we will extract values.\nHere is the list of the types of spatial joins we will learn.\n\npoints (target) against polygons (source)\npolygons (target) against points (source)\npolygons (target) against polygons (source)"
  },
  {
    "objectID": "lectures/Chapter-9-Spatial-Data/L04_2_vector_spatial_join.html#spatial-join-points-target-vs-polygons-source",
    "href": "lectures/Chapter-9-Spatial-Data/L04_2_vector_spatial_join.html#spatial-join-points-target-vs-polygons-source",
    "title": "09-4-2: R as GIS: Interaction of Vector Datasets II",
    "section": "Spatial join: points (target) vs polygons (source)",
    "text": "Spatial join: points (target) vs polygons (source)\n\nIntroductionDataCodeInspect the results\n\n\nWhat?\nFor each of the observations (points) in the target points data,\n\nfinds which polygon in the source polygons data it intersects with\nassigns the value associated with the intersected polygon to the point\n\nHow?\nIn order to achieve this, we can use the st_join() function, whose syntax is as follows:\n\nst_join(points_sf, polygons_sf)\n\n\nNote\nSimilar to spatial sub-setting, the default topological relation is st_intersects()\n\n\nWe use wells_ne (points) and ne_counties (polygons) data for illustration. Here is the map:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nFor each of the points (wells) in wells_ne, the code below will find the polygon (county) in which the point (well) is located, and attach the value of the variables of the polygon (county) to the point (well).\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEvaluate wells_joined_with_county and you will see that statefp, countyfp, and name variables are appended.\nLet’s check if the two datasets are indeed joined based on their spatial locations.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-9-Spatial-Data/L04_2_vector_spatial_join.html#sec-polygon-point",
    "href": "lectures/Chapter-9-Spatial-Data/L04_2_vector_spatial_join.html#sec-polygon-point",
    "title": "09-4-2: R as GIS: Interaction of Vector Datasets II",
    "section": "Spatial join: polygons (target) vs points (source)",
    "text": "Spatial join: polygons (target) vs points (source)\n\nIntroductionDataCodeInspect the resultsPost-join processing\n\n\nWhat?\nFor each of the observations (polygons) in the target data,\n\nfind which points in the source file it intersects\nassign the values associated with the points to the polygon.\n\nHow?\nIn order to achieve this, we can use the st_join() function, whose syntax is as follows:\n\nst_join(polygons_sf, points_sf)\n\n\nNote\nSimilar to spatial sub-setting, the default topological relation is st_intersects()\n\n\nWe use ne_counties (polygons) and wells_ne (points) data for illustration. Here is the map:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWe create a fake variable that represents groundwater extraction (acre-feet) from the aquifer.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nOur goal is to find average groundwater extraction by county.\n\n\nFor each of the polygons (counties) in ne_counties, the code below will find all the points (wells) that are located inside the county, and attach the value of the variables of the points (wells) to the polygon (county).\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nEvaluate county_joined_with_wells and you will see that wellid and gw_extraction variables are appended.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nOne thing that is different from the previous case is that\n\nFor each of the polygons (counties), the resulting dataset has as many observations as the number of wells that intersect with the polygon (county).\nIf a polygon has no wells inside, then you will simply have a single row of data for that polygon.\n\nFor example, countyfp of 039 and 109 (first two rows), there are no wells inside them. So, we only have a single row with wellid and gw_extraction missing. But, for countyfp of 129, we have many wells inside it.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAll the rows there have exactly the same geometry, which is the MULTIPOLYGON that represents the boundary of the Adams county.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nSince we joined the two layers, we can now do calculations that were not possible before. Here, we will calculate the average groundwater extraction by county.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\ndplyr::summarize() takes a long time if it is applied to an sf object (this was not the case before).\nas.data.frame() converts county_joined_with_wells into a data.frame and that saves lots of time in doing dplyr::summarize().\n\nOf course, it is just as easy to get other types of statistics by simply modifying the summarize() part."
  },
  {
    "objectID": "lectures/Chapter-9-Spatial-Data/L04_2_vector_spatial_join.html#spatial-join-polygons-target-vs-polygons-source",
    "href": "lectures/Chapter-9-Spatial-Data/L04_2_vector_spatial_join.html#spatial-join-polygons-target-vs-polygons-source",
    "title": "09-4-2: R as GIS: Interaction of Vector Datasets II",
    "section": "Spatial join: polygons (target) vs polygons (source)",
    "text": "Spatial join: polygons (target) vs polygons (source)\n\nIntroductionDataStoryDemonstrationBut,\n\n\nFor each of the observations (polygons) in the target data,\n\nfind which observations (polygons) in the source data it intersects\nthen, assign the values associated with the intersecting polygons from the source data to the polygon\n\n\n\nNitrogen use (lb/acre) by county in Iowa (Note: this is a fake dataset that is generated using R):\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nHydrologic units that cover Iowa:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nYou are interested in understanding the impact of nitrogen use for agricultural production on water quality.\n\nYou observe water quality for each of the hydrologic units (huc_ia)\nYou observe nitrogen use (lb/acre) at the county level (ia_nitrogen)\n\nYou would like to associate nitrogen use values with water quality values so that you can run statistical analysis on the impact of corn production on water quality.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nLet’s join the two:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nHere, for each of the HUC units from huc_ia, all the intersecting counties from ia_nitrogen are matched.\nFor example, for HUC_CODE == \"07060004\", seven counties intersect with it.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nThe geometry column of the four rows has exactly the same geometry, which represents the HUC unit with HUC_CODE == 07060004.\nWe can now find average nitrogen use (lb/acre) by HUC unit:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\nImportant\n\n\nNote that the resulting dataset does not tell you the nature of intersections. The only thing we know from huc_joined_with_acres is which counties the HUC units are intersecting with no matter how small or large the overlapping area are.\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWe simply take the average of the value of nitrogen_rate of the intersecting counties. But, this does not take into account the degree of the overlaps between the intersecting counties and the HUC unit. Later, we will talk about how to find area-weighted average of nitrogen_rate this section."
  },
  {
    "objectID": "lectures/Chapter-9-Spatial-Data/L04_2_vector_spatial_join.html#sec-point-point-distance",
    "href": "lectures/Chapter-9-Spatial-Data/L04_2_vector_spatial_join.html#sec-point-point-distance",
    "title": "09-4-2: R as GIS: Interaction of Vector Datasets II",
    "section": "Spatial Join: other topological relations",
    "text": "Spatial Join: other topological relations\n\nIntroductionDataStory and ObjectiveDemonstrationInspect and verify\n\n\nSpatial join with spatial_join() uses st_intersects() as the default topological relationship for joining.\nSyntax\n\nst_join(sf_1, sf_2, join = \\(x, y) st_*(x, y), dist = 5)\n\nwhere st_* is the function that determines the topological relationships between sf_1 and sf_2.\n\n\nWe use soy bean yield (points) data and as-applied seed rate (points) data.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nYou have run on-farm field experiment to understand the impact of seed rate on soybean yield. They are available as points data.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nYou want to merge them together based on their proximity so that you can run statistical analysis. Specifically, for each of the yield points, we would like to link the seed rate points that are within 10-meter from the yield point.\n\n\nLet’s join using st_join():\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWe can now summarize the joined data like below:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nAccording to the join, the 1st yield point from soy_yield did not have any seed rate data points from as_applied_s_rate within its 10 meter radius, so NA in seed_rate.n\nThe second yield point from soy_yield are matched with two seed rate points from as_applied_s_rate: seed_id = 1 and seed_id = 558. Are they indeed less than 10 meter away from the second yield point?\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-9-Spatial-Data/L04_2_vector_spatial_join.html#spatial-join-and-summary-in-one-step-with-aggregate",
    "href": "lectures/Chapter-9-Spatial-Data/L04_2_vector_spatial_join.html#spatial-join-and-summary-in-one-step-with-aggregate",
    "title": "09-4-2: R as GIS: Interaction of Vector Datasets II",
    "section": "Spatial join and summary in one step with aggregate()",
    "text": "Spatial join and summary in one step with aggregate()\n\nWhat is it?DemonstrationAnother demonstration\n\n\nIn the example of finding average groundwater use by county (go here to remind yourself of this example), we took a two-step procedure to do so.\n\nspatial-join two layers with st_join()\napply dplyr::summarize() to the joined object\n\nHowever, this can actually be done in one step using aggregate(), in which you specify how you want to aggregate with the FUN option:\n\nSyntax\n\naggregate(points_sf, polygons_sf, FUN = function)\n\n\nHere, for each of the rows of the second sf (here, polygons_sf), all the intersecting points in points_sf are found and then the average of  all  the columns of points_sf are calculated. Yes, st_intersects() is the default topological relationship just like spatial sub-setting with sf1[sf2, ] and st_join().\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nNote that wellid was also averaged by county. We could just do this:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\naggregate() is a fairly general procedure of spatial joining and summarization, and you can use it for many other cases including our example of soybean yield and seed rate (go here for the example).\nHere is the code:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nThis looks almost identical with the code to spatial join the two sf layers. However, the order of the sf objects is flipped.\nYou are aggregating the columns of first sf for each of the geometry in the second sf (here yield point)."
  },
  {
    "objectID": "lectures/Chapter-9-Spatial-Data/L04_2_vector_spatial_join.html#sec-cropping-join",
    "href": "lectures/Chapter-9-Spatial-Data/L04_2_vector_spatial_join.html#sec-cropping-join",
    "title": "09-4-2: R as GIS: Interaction of Vector Datasets II",
    "section": "Cropping Join",
    "text": "Cropping Join\n\nMotivationHowlines vs polygonspolygons vs polygonsarea-weighted averageExercise\n\n\n\n\n\nIn the example of finding total corn production acreage by HUC unit using st_join(), we had a problem of not knowing how much of each of the intersecting counties shares the same area with the HUC unit.\nIf we can get the geometry of the intersecting part of the HUC unit and the county, then we can calculate its area, which in turn allows us to find area-weighted averages of joined attributes.\n\n\n\n\n\n\n\n\n\n\nFor these purposes, we can use sf::st_intersection().\n\nWhile st_intersects() returns the indices of intersecting objects, st_intersection() returns intersecting spatial objects with the non-intersecting parts of the sf objects cut out.\nMoreover, attribute values of the source sf will be merged to its intersecting sfg in the target sf.\n\n\n\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nThe following code gets the intersection of the lines and the polygons.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nHere is how the lines and polygons look like:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nHere is how the intersections and polygons look like.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nThe following code gets the intersection of polygon 1 and polygon 3 with polygon 2. Each instance of the intersections of polygons 1 and 3 against polygon 2 becomes an observation (polygon 1-polygon 2 and polygon 3-polygon 2).\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nJust like the lines-polygons case, the non-intersecting part of polygons 1 and 3 are cut out and do not remain in the returned sf.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nLet’s now get back to the example of HUC units and county-level nitrogen use data. We would like to find  area-weighted  average of nitrogen use instead of the simple average.\nUsing st_intersection(), for each of the HUC polygons, we can find the intersecting counties, and then divide it into parts based on the boundary of the intersecting polygons.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nThe key difference from the st_join() example is that each observation of the returned data is a unique HUC-county intersection.\nThe figure below is a map of all the intersections of the HUC unit with HUC_CODE == 07060004 and the seven intersecting counties.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nData PreparationProblem 1Problem 2\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWe use poygon_1 and polygon_2 in this exercise. Inspect them to familiarize yourself with them:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nHere is what they look like:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nFind the intersection of the two polygons using st_intersection().\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAnswer\n\n\nCode\nintersection &lt;- st_intersection(polygon_2, polygon_1)\n\n\n\n\nFind the area-weighted average of value for polygon_2 based on the area of overlaps with the polygons in polygon_1?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAnswer\n\n\nCode\nintersection %&gt;%\n  dplyr::mutate(area = as.numeric(st_area(geometry))) %&gt;%\n  dplyr::summarize(value = sum(value * area) / sum(area))"
  },
  {
    "objectID": "lectures/Chapter-9-Spatial-Data/L03_create_map.html#before-you-start",
    "href": "lectures/Chapter-9-Spatial-Data/L03_create_map.html#before-you-start",
    "title": "09-3: R as GIS: Creating maps from vector data",
    "section": "Before you start",
    "text": "Before you start\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nLearning objectives\nLearn how to create maps using the ggplot2 package.\n\nTable of contents\n\nCreating maps from sf objects\nTips to make maps look professional\n\n\nPre-requisite\nBasic understanding of ggplot2 is necessary. Here are some resources:\n\nggplot2: Elegant Graphics for Data Analysis (book)\nLecture slides"
  },
  {
    "objectID": "lectures/Chapter-9-Spatial-Data/L03_create_map.html#tips-to-make-the-most-of-the-lecture-notes",
    "href": "lectures/Chapter-9-Spatial-Data/L03_create_map.html#tips-to-make-the-most-of-the-lecture-notes",
    "title": "09-3: R as GIS: Creating maps from vector data",
    "section": "Tips to make the most of the lecture notes",
    "text": "Tips to make the most of the lecture notes\n\n\n\nInteractive navigation tools\n\nClick on the three horizontally stacked lines at the bottom left corner of the slide, then you will see table of contents, and you can jump to the section you want\nHit letter “o” on your keyboard and you will have a panel view of all the slides\n\n\nRunning and writing codes\n\nThe box area with a hint of blue as the background color is where you can write code (hereafter referred to as the “code area”).\nHit the “Run Code” button to execute all the code inside the code area.\nYou can evaluate (run) code selectively by highlighting the parts you want to run and hitting Command + Enter for Mac (Ctrl + Enter for Windows).\nIf you want to run the codes on your computer, you can first click on the icon with two sheets of paper stacked on top of each other (top right corner of the code chunk), which copies the code in the code area. You can then paste it onto your computer.\nYou can click on the reload button (top right corner of the code chunk, left to the copy button) to revert back to the original code."
  },
  {
    "objectID": "lectures/Chapter-9-Spatial-Data/L03_create_map.html#create-maps-from-sf-using-the-ggplot2-package",
    "href": "lectures/Chapter-9-Spatial-Data/L03_create_map.html#create-maps-from-sf-using-the-ggplot2-package",
    "title": "09-3: R as GIS: Creating maps from vector data",
    "section": "Create maps from sf using the ggplot2 package",
    "text": "Create maps from sf using the ggplot2 package\n\nIntroductionCreate a mapLabels on a mapFaceting\n\n\n\nCreating maps differs from creating non-spatial figures in some ways. However, the underlying principle and syntax under ggplot2 to create maps and non-spatial figures are very similar.\nIndeed, you will find map making very intuitive and rather easy if you already have some knowledge of how ggplot2 works even if you have not created maps using ggplot2. The only major difference between them is the choice of geom_*() types.\n\nTo create a map from sfs, we use geom_sf().\n\n\n\nData preparationHowTry yourself\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nCheck how each of them looks like using plot():\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nInstruction\n\nWe can use geom_sf() to create maps from sf objects\ngeom_sf()  automatically detects the geometry type  of spatial objects stored in an sf object and draw maps accordingly\n\n\nSyntax\n\nggplot() +\n  geom_sf(data = sf)\n\n\n\nTry to create a map using one of wells_ne_sf, ne_counties, and railroads_ne.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\nMotivationHow\n\n\n\nSometime, you would like to print texts on a map like below\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nWhen you want to print labels on a map, you can use geom_sf_text(). geom_sf() cannot do it.\n\nSyntax\n\ngeom_sf_text(aes(label = var_name)) \n\n\nvar_name: name of the label variable\n\n\nExample\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\nWe can do faceting just like we do with other types of figures you can create with ggplot2.\nRemember, map is just a special case of ggplot2 figures.\n\n\nUnderstand the datafaceted map\n\n\n\nWe use corn_acres_ne for demonstration. This is a county-level corn harvested acres data observed annually from 2020 through 2023.\nNotice that a single county has multiple rows (one row for one year) with the identical geometry\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-9-Spatial-Data/L03_create_map.html#specifying-aesthetics",
    "href": "lectures/Chapter-9-Spatial-Data/L03_create_map.html#specifying-aesthetics",
    "title": "09-3: R as GIS: Creating maps from vector data",
    "section": "Specifying aesthetics",
    "text": "Specifying aesthetics\n\nPointsPolygonsLines\n\n\nHere are some of the aesthetic variables for points:\n\ncolor: color of the points\nfill: available for some shapes (but likely useless)\nshape: shape of the points\nsize: size of the points (rarely useful)\n\n\nExample 1Example 2Example 3\n\n\n\ncolor: dependent on gw_extracted (the amount of groundwater extraction)\nsize: constant across the points (bigger than the default)\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\ncolor: constant across the points (blue)\nsize: dependent on gw_extracted\nshape: constant at 2 across the points (square)\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\ncolor: constant across the points (blue)\nfill: constant across the points (red)\nsize: constant at 1.5 across the points\nshape: constant at 22 across the points (square)\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\nHere are some of the aesthetic variables for polygons:\n\ncolor: color of the  borders  of the polygons\nlinewidth: width of the  borders  of the polygons\nfill: color of the  inside  of the polygons\nshape: not available\nsize: not available\n\n\nExample 1Example 2Example 3\n\n\n\ncolor: constant at “red” across the polygons\nfill: constant at “darkgreen” across the polygons\nlinewidth: constant at 0.4 across the polygons\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\ncolor: depends on name\nfill: constant at “darkgreen” across the polygons\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\ncolor: constant at “red” across the polygons\nfill: depends on “countyfp”\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\nHere are some of the aesthetic variables for lines:\n\ncolor: color of the lines\nlinewidth: width of the lines\n\n\nExample 1\n\n\n\ncolor: constant at “blue” across the lines\nlinewidth: constant at 0.5 across the lines\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-9-Spatial-Data/L03_create_map.html#plotting-multiple-spatial-objects-in-one-figure",
    "href": "lectures/Chapter-9-Spatial-Data/L03_create_map.html#plotting-multiple-spatial-objects-in-one-figure",
    "title": "09-3: R as GIS: Creating maps from vector data",
    "section": "Plotting multiple spatial objects in one figure",
    "text": "Plotting multiple spatial objects in one figure\n\nMotivationHowExampleOrder mattersCRS ICRS II\n\n\n\n\n\nIt is often the case that you want to create a map using more than one spatial objects.\nFor example, you want to have county boundary (ne_counties), railroads (railroads_ne), and wells (wells_ne_sf) all in one map.\n\n\n\n\n\n\n\nYou can create layers with geom_sf() by setting different sf objects as the datasets individually, and then simply add them so they appear in a single map.\nRemember that when you specify data in ggplot(), all subsequent geom_*() functions will use this data unless otherwise specified.\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nInstruction\n\n\n\nUncomment line 3 and add + add the end of line 2, run, and see what happens\nConfirm the first one works fine because data is set globally to ne_couties in line 1.\nConfirm the second one does not because global dataset is not set.\n\n\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\ngeom_sf()s that are added later are  superimposed  on top of the existing layers\n\nExampleTry yourself\n\n\nWells are hidden beneath the county layer:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nInstruction\n\n\nHide the railroads beneath the county layer.\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\nggplot() uses the CRS of the sf to draw a map by default.\n\nExample (unprojected)Example (projected)\n\n\nCurrently, ne_counties is unprojected:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nLet’s project it to WGS 84, UTM zone 14.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nNow, the map is drawn based on the new CRS of 32614\nNotice that the major grid lines are no longer straight in figure at the bottom unlike the one at the top\nX-Y labels are still in longitude and latitude (we will see how we change this)\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\ncoord_sf()Change X, Y labels on the mapMultiple layerscoord_sf() with multiple layers\n\n\nYou can use coord_sf() to alter the CRS on the map on the go, but not the CRS of the sf object itself.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\npros: you do not have to change the CRS of the sf\ncons: it takes time to change the CRS behind the scene every time you do this\n\n\n\nIn order to have X and Y values in the same units as that of the CRS in use on the map, you need to add datum = in coord_sf().\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nWhen there are multiple geom_sf() layers, the CRS of the first layers is automatically applied for all the layers , reconciling the difference in CRS automatically.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\ncoord_sf() applies to all the layers.\ntry the codes with and without coord_sf(32614) at the end\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-9-Spatial-Data/L03_create_map.html#making-maps-look-professional",
    "href": "lectures/Chapter-9-Spatial-Data/L03_create_map.html#making-maps-look-professional",
    "title": "09-3: R as GIS: Creating maps from vector data",
    "section": "Making maps look professional",
    "text": "Making maps look professional\n\nThemeNorth arrow and scale bar\n\n\ntheme_void() is a veery suitable pre-made theme for map that can get rid of many unnecessary components from default maps.\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nThe ggspatial package lets you put a north arrow and scale bar on a map using annotation_scale() and annotation_north_arrow()\n\n\nPreparationScale barFine-tuning the locationNorth arrow\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nlocation: determines where the scale bar is\n\nfirst letter is either t (top) or b (bottom)\nsecond letter is either l (left) or r (right).\n\nwidth_hint: determines the length of the scale bar relative to the plot\n\n\n\n\n\nTry yourself\n\n\nPlay with location and width_hint and see what happens.\n\n\n\n\n\n\nUse pad_x and pad_y options to fine-tune the location of the scale bar.\nA positive number means that the scale bar will be placed further away from closest border of the plot.\n\npad_x: since the second letter of location is l, the scale bar move an inch from the left border of the map\npad_y: since the first letter of location is b, the scale bar move 0.3 inches from the bottom border of the map\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nTry yourself\n\n\nPlay with pad_x and pad_y and see what happens.\n\n\n\n\n\n\n\nUse annotation_north_arrow() to add north arrow\nIt works just like annotation_scale()\nuse style option to pick a different type of north arrow symbol\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-9-Spatial-Data/L03_create_map.html#inset-map",
    "href": "lectures/Chapter-9-Spatial-Data/L03_create_map.html#inset-map",
    "title": "09-3: R as GIS: Creating maps from vector data",
    "section": "Inset map",
    "text": "Inset map\n\nMotivationObjectiveCreate the base layerConfigure the insetAdd an insetmap_base\n\n\nInset map (like one below) provides a better sense of the geographic extent and the location of the area of interest relative to the larger geographic extent that the readers are more familiar with.\n\n\n\n\n\n\n\n\n\n\n\nCreate a map like this using ne_counties with the ggmapinset package.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nNote\n\n\nVisit the ggmapinset website for more examples and other functionalities beyond what is presented here, including multiple insets.\n\n\n\n\n\nThe first step of making an inset map is to create the base map layer, a part of which is going to be expanded as an inset.\nWe want to create a map of all the counties in Nebraska with only the three counties (Perkins, Chase, and Dundy) colored red.\nLet’s first create an sf consisting of the three counties first:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWe now create the base map. You use geom_sf() to create base map layers.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nWe now configure (specify) the inset using configure_inset(). Here is the list of parameters you want to provide:\n\ncentre: the geographic coordinates of the small circle from which you expand\ntranslation: how much you shift in x and y from the center to display the enlarged circle\nradius: radius of the small circle at the origin\nscale: how much to enlarge\nunits: length unit\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nUse geom_sf_inset() and/or geom_sf_text_inset() to create layers to present as an inset.\nUse geom_inset_frame() to add the inset frame (small circle, big circle, and the lines connecting them)\nUse coord_sf_inset(inset = inset_config) to reflect the configuration you set up earlier.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\nTry yourself\n\n\n\nComment out a line of codes above, run the code, and see what each of them do.\nGo back to the previous slide and change the value of the parameters to see what happens.\n\n\n\n\n\n\n\n\nBy default, geom_sf_inset() creates two copies of the map layer: one for the base map and the other for the inset map.\nmap_base option in geom_sf_inset() determines whether you create the copy for the base map or not.\n\nIn the code below, map_base is not specified, meaning that geom_sf_inset(data = three_counties, fill = \"black\") will be applied for both the base and inset maps.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\nTry yourself\n\n\nComment out line 2 and comment in line 3 to see what happens."
  },
  {
    "objectID": "lectures/Chapter-9-Spatial-Data/L03_create_map.html#create-maps-using-raster-data",
    "href": "lectures/Chapter-9-Spatial-Data/L03_create_map.html#create-maps-using-raster-data",
    "title": "09-3: R as GIS: Creating maps from vector data",
    "section": "Create maps using raster data",
    "text": "Create maps using raster data\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nIntroductionHowNA valuesMulti-layer rasterFaceting\n\n\n\nWe will use the gpplot2 and tidyterra package to create maps using raster data.\nThe tidyterra package provides geom_spatraster() that works specifically for SpatRaster object from the terra package.\nThere are other options like the tmap package. But, we do not talk about it in this course.\n\n\n\nIt works very much like map creation with sf. We just use SpatRaster object and use geom_spatraster() in place of geom_sf.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nNote\n\n\nNotice that geom_spatraster() automatically based the fill color of the cells on the attribute values without you specifying so.\n\n\n\n\n\nBy default, the cells with NA values are colored grey. You can set the color for such cells using the na.value option inside scale_*() function. For example, the following code makes the cells with NA values transparent (invisible).\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nHow does geom_spatraster() behave with a multi-layer SpatRaster?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAs the warning message suggests, both layers are plotted by default. You can specify which layer to use with aes(fill = layer_name) like below.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nNote\n\n\n\nBut, remember faceting is often not appropriate when you are plotting multiple variable of different scales (e.g., temperature and precipitation) as they share the same legend.\nA good use case of faceting is displaying the same variable observed at different times (e.g., temperature on different days).\n\n\n\n\n\n\nWhen you want to create maps for individual attributes at the same time, you can add facet_wrap(~lyr).\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-9-Spatial-Data/L03_create_map.html#create-a-map-with-both-sf-and-spatraster",
    "href": "lectures/Chapter-9-Spatial-Data/L03_create_map.html#create-a-map-with-both-sf-and-spatraster",
    "title": "09-3: R as GIS: Creating maps from vector data",
    "section": "Create a map with both sf and SpatRaster",
    "text": "Create a map with both sf and SpatRaster\nIt is very easy to achieve this. You just use geom_sf() for sf and geom_spatraster() for SpatRaster. You just add them as layers just like any figures you create with ggplot2.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-9-Spatial-Data/L01_vector_basics.html#before-you-start",
    "href": "lectures/Chapter-9-Spatial-Data/L01_vector_basics.html#before-you-start",
    "title": "09-1: R as GIS: Vector Data Basics with the sf package",
    "section": "Before you start",
    "text": "Before you start\n\nLearning objectives\nThe objectives of this chapter is to learn how to use R as GIS, specifically how to handle vector spatial data.\n\n\n\nTable of contents\n\nUnderstanding the data structure of sf\nSimple Feature Geometry(sfg)\nConstructing simple feature column (sfc) and simple feature (sf)\nReading and writing vector data\nProjection\nQuick Visualization\nTurning a data.frame of points into an sf\nConversion to and from sp objects\nNon-spatial Transformation of sf\nNon-interactive geometrical operations\n\n\nPre-requisite (Links)\n\nggplot2 primer\ndplyr primer\n\n\nRelated contents (Links)\n\nCreate maps from vector data using ggplot2\nSpatial interaction of vector data\n\nTopological relations and subset\nSpatial join\n\nVector and raster data interactions\n\ncropping\nmasking\nvalue extraction\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-9-Spatial-Data/L01_vector_basics.html#tips-to-make-the-most-of-the-lecture-notes",
    "href": "lectures/Chapter-9-Spatial-Data/L01_vector_basics.html#tips-to-make-the-most-of-the-lecture-notes",
    "title": "09-1: R as GIS: Vector Data Basics with the sf package",
    "section": "Tips to make the most of the lecture notes",
    "text": "Tips to make the most of the lecture notes\n\n\n\nInteractive navigation tools\n\nClick on the three horizontally stacked lines at the bottom left corner of the slide, then you will see table of contents, and you can jump to the section you want\nHit letter “o” on your keyboard and you will have a panel view of all the slides\n\n\nRunning and writing codes\n\nThe box area with a hint of blue as the background color is where you can write code (hereafter referred to as the “code area”).\nHit the “Run Code” button to execute all the code inside the code area.\nYou can evaluate (run) code selectively by highlighting the parts you want to run and hitting Command + Enter for Mac (Ctrl + Enter for Windows).\nIf you want to run the codes on your computer, you can first click on the icon with two sheets of paper stacked on top of each other (top right corner of the code chunk), which copies the code in the code area. You can then paste it onto your computer.\nYou can click on the reload button (top right corner of the code chunk, left to the copy button) to revert back to the original code."
  },
  {
    "objectID": "lectures/Chapter-9-Spatial-Data/L01_vector_basics.html#getting-started",
    "href": "lectures/Chapter-9-Spatial-Data/L01_vector_basics.html#getting-started",
    "title": "09-1: R as GIS: Vector Data Basics with the sf package",
    "section": "Getting started",
    "text": "Getting started\n\nPrerequisitesIntroduction of the sf packageData preparation\n\n\n\n\n\n\n\nPrerequisites\n\n\nYou understand\n\nWhat Geographic Coordinate System (GCS), Coordinate Reference System (CRS), and projection are (this is a good resource)\nDistinctions between vector and raster data (this is a simple summary of the difference)\n\n\n\n\n\n\n\n\n\n\nThe sf package provides a simply way of storing geographic information and the attributes of the geographic units in a single dataset called simple feature (sf).\nThe sf package allows you to do almost all the spatial operations you would need for your research\n\nProjection\nRead/write to spatial datasets in various formats (including shape files)\nNon-interactive geometrical operations\n\ncreate buffers\ncalculate area\ncalculate distance\n\nInteractive geometrical operations\n\nspatially subset datasets\nextracting values from the intersecting spatial objects\n\n\n\n\n\n\n\n\n`\n\n\nRead the North Carolina county boundary data:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nCheck the class:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-9-Spatial-Data/L01_vector_basics.html#sec-data-structure",
    "href": "lectures/Chapter-9-Spatial-Data/L01_vector_basics.html#sec-data-structure",
    "title": "09-1: R as GIS: Vector Data Basics with the sf package",
    "section": "Understanding the data structure of sf",
    "text": "Understanding the data structure of sf\n\nInside an sf objectThe geometry columnSimple Feature Geometry (sfg)\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nThe first line tells you this is an simple feature (sf) object with 100 features and 3 attributes (fields)\nSo, an sf object looks just like a data.frame where rows representing observation units, columns representing attributes, except for a special column named geometry\nThe geometry column stores the geographic information of the observation units (here, county)\n\n\n\n\n\nExample\n\n\nAshe County (1st row) has area of 0.114, FIPS code of 37009, and so on. And the entry in geometry column at the first row represents the geographic information of Ashe County.\n\n\n\n\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nAn element of the geometry columns is a simple feature geometry (sfg).\nIn general, sfg represents the geographic information of a single geometric feature (here, county).\nThere are different types of sfgs (POINT, LINESTRING, POLYGON, MULTIPOLYGON, etc)\nIn this example, all the sfgs are of type MULTIPOLYGON\nA collection of multiple sfgs as a column is called simple feature geometry column (sfc), which can make a geometry column in an sf object\n\n\n\n\n\n\nLet’s see what an sfg is made of.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nEach row represents a point\n\n1st column: longitude\n2nd column: latitude\n\nPoints are stored in a matrix format\nConnecting all the points forms a polygon"
  },
  {
    "objectID": "lectures/Chapter-9-Spatial-Data/L01_vector_basics.html#sec-sfg",
    "href": "lectures/Chapter-9-Spatial-Data/L01_vector_basics.html#sec-sfg",
    "title": "09-1: R as GIS: Vector Data Basics with the sf package",
    "section": "Simple Feature Geometry (sfg)",
    "text": "Simple Feature Geometry (sfg)\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nDifferent typesPOINTLINESTRINGPOLYGONPOLYGON with holesMULTIPOLYGONExercises\n\n\nSome of the moist common types of spatial objects represented by sfg are the following:\n\nPOINT: area-less feature that represents a point (e.g., well, city, farmland)\nLINESTRING: (e.g., a tributary of a river)\nMULTILINESTRING: (e.g., river with more than one tributary)\nPOLYGON: geometry with a positive area (e.g., county, state, country)\nMULTIPOLYGON: collection of polygons to represent a single object (e.g., countries with islands: U.S., Japan, etc)\n\n\n\n\n\nPOINT is the simplest geometry type and is represented by a vector of two numeric values. An example below shows how a POINT feature can be made from scratch:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nThe st_point() function creates a POINT object when supplied with a vector of two numeric values. If you check the class of the newly created object,\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nyou can see that it’s indeed a POINT object. But, it’s also an sfg object. So, a_point is an sfg object of type POINT.\n\n\n\n\n\n\n\n\n\nA LINESTRING object is represented by a sequence of points in a matrix:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nYou can turn the matrix into a LINESTRING using sf::st_linestring():\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nLet’s plot it.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nAs you can see, each pair of consecutive points in the matrix are connected by a straight line to form a line.\n\n\n\n\n\n\n\n\n\nJust like the LINESTRING object we created earlier, a POLYGON is represented by a collection of points.\nHowever, the first and last points in the matrix have to be the same to form a polygon\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nYou can turn the matrix into a POLYGON using st_polygon(), which takes a matrix in a list() :\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nLet’s plot it.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\n\n\nA POLYGON can have holes in it. The first matrix of a list becomes the exterior ring, and all the subsequent matrices will be holes within the exterior ring.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nLet’s plot it.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\n\n\nTo create a MULTIPOLYGON object you create a list of lists of matrices, with each inner list representing a polygon.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nYou supply a list of lists of matrices to the st_multipolygon() function to make a MULTIPOLYGON object.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nEach of list(p1,p2) and list(p3) represents a polygon.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\n\n\nCreate a POINT\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nCreate a LINESTRING\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nCreate a POLYGON\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-9-Spatial-Data/L01_vector_basics.html#sec-construct-sfc-sf",
    "href": "lectures/Chapter-9-Spatial-Data/L01_vector_basics.html#sec-construct-sfc-sf",
    "title": "09-1: R as GIS: Vector Data Basics with the sf package",
    "section": "Constructing simple feature column (sfc) and simple feature (sf)",
    "text": "Constructing simple feature column (sfc) and simple feature (sf)\n\nConstructing sfc from sfgsConstructing an sf using an sfcExercises\n\n\n\nsfg is an object class that represents a single spatial object.\nWe can combine multiple sfgs as a list to create a simple feature geometry list-column (sfc).\n\n\n\nTo make a simple feature geometry list-column (sfc), you can simply supply a list of sfg to the st_sfc() function as follows:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nCheck its class:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nCrate a data.frame with geometryRegister as sf\n\n\nTo create an sf object, you first add an sfc as a column to a data.frame.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAt this point, it is not yet recognized as an sf by R yet.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nYou can register it as an sf object using st_as_sf().\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAs you can see sf_ex is now recognized also as an sf object.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\nExercises 2.1Exercises 2.2\n\n\nCreate an sfc using the POINT and POLYGON you made earlier.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\nCreate an sf object using the sfc object you created in the previous exercise, where the additional variable in the sf object is id with the POINT and POLYGON assigned id = 1 and id = 2, respectively.\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-9-Spatial-Data/L01_vector_basics.html#sec-input-output",
    "href": "lectures/Chapter-9-Spatial-Data/L01_vector_basics.html#sec-input-output",
    "title": "09-1: R as GIS: Vector Data Basics with the sf package",
    "section": "Reading and writing vector data",
    "text": "Reading and writing vector data\n\nBasicsImporting a shapefileExporting to a shapefileAlternative formats\n\n\n\n\n\nThe vast majority of people still use ArcGIS software to handle spatial data, which has its own system of storing spatial data called shapefile system.\nshapefile is a collection of files including\n\n.shp: stores geometry information (like sfg)\n.prj: projection information\n\n\n\nChances are that your collaborators use shapefiles.\nThere are many GIS data online that are available only as shapefiles.\nSo, it is important to learn how to read and write shapefiles\n\n\n\n\n\n\n\n\nYou can use sf::st_read() to read a shapefile. It reads in a shapefile and then turn the data into an sf object.\nSyntax\n\nst_read(file_path)\n\n\nfile_path: the path to the shapefile.\n\n\nExample\n\nnc_imported &lt;- st_read(\"Data/nc_practice.shp\") \n\nHere, it is reading a file named nc_practice.shp (along with other related files) is read from the Data folder.\n\n\n\n\n\nTry yourself\n\n\n\ndownload nc_practice.shp from here and other supporting files to where you would like on your computer\nfind and copy the path to the file\nimport the data using sf::st_read()\n\n\n\n\n\n\n\nYou can use the sf::st_write() function to write an sf object to shape files.\n\nSyntax\n\nst_write(sf object, file path, append = FALSE)\n\n\nappend = FALSE forces writing the data when the shape files with the same name already exists\n\n\nExample\n\nst_write(nc_imported, \"Data/nc_exported.shp\")\n\nThis code will export an sf object called nc_imported as nc_exported.shp (along with other supporting files) in the “Data” folder relative to the working directory.\n\n\n\n\n\nTry yourself\n\n\n\nexport the sf object you read earlier using sf::st_write() using whatever name you like\n\n\n\n\n\n\n\n\nMotivationGeoJSONGeopackageR data set (rds)\n\n\n\n\n\nIf your collaborators are using ArcGIS and demanding that they need a shapefile for their work, sure you can write to a shapefile.\nBut, there is really no need to work with the shapefile system if you are not using ArcGIS.\nBasically, we are using the file system just because ArcGIS is the pioneer of GIS software and many people are still using it, but not because it is the best format available to store spatial objects.\nIndeed, there are some limitations to shape files (see here).\nBut, first and foremost, it is annoying to have many files for a single spatial object.\n\n\n\n\n\n\n\n\n\n\nA format that is increasingly popular is GeoJSON.\n\nUnlike the shapefile system, it produces only a single file with .geojson extension.\nGeoJSON files can also be read into ArcGIS.\n\n\nWrite\nTo write an sf object to a GeoJSON file, you simply give the file path to the dsn option (note that you do not use the layer option unlike the shape files case).\n\n#--- write as a gpkg file ---#\nst_write(nc, dsn = \"Data/nc_exported.geojson\")\n\n\nRead\nYou can use the sf::st_read() function to read a GeoJSON file like below:\n\nnc &lt;- st_read(\"Data/nc_exported.geojson\")\n\n\n\n\n\n\n\n\n\n\nOne of the alternative data formats that is considered superior to the shapefile system is GeoPackage, which overcomes various limitations associated with shapefile.\n\nUnlike the shapefile system, it produces only a single file with .gpkg extension.\nGeoPackage files can also be read into ArcGIS.\n\n\nWrite\nTo write an sf object to a GeoPackage file, you simply give the file path to the dsn option (note that you do not use the layer option unlike the shape files case).\n\n#--- write as a gpkg file ---#\nst_write(nc_imported, dsn = \"Data/nc_exported.gpkg\")\n\n\nRead\nYou can use the sf::st_read() function to read a GeoPackage file like below:\n\nnc &lt;- st_read(\"Data/nc_exported.gpkg\")\n\n\n\n\n\n\n\n\n\n\nOr better yet, if your collaborator uses R (or if it is only you who is going to use the data), then just save the sf object as an .rds file using saveRDS(), which can be of course read using readRDS().\n\nSave\n\n#--- save as an rds ---#\nsaveRDS(nc_imported, \"Data/nc_exported.rds\")\n\n\nRead\n\n#--- read an rds ---#\nnc &lt;- readRDS(\"Data/nc_exported.rds\")\n\n\n\n\n\n\nNote\n\n\nThe use of rds files can be particularly attractive when the dataset is large because rds files are typically more memory efficient than shape files."
  },
  {
    "objectID": "lectures/Chapter-9-Spatial-Data/L01_vector_basics.html#sec-projection",
    "href": "lectures/Chapter-9-Spatial-Data/L01_vector_basics.html#sec-projection",
    "title": "09-1: R as GIS: Vector Data Basics with the sf package",
    "section": "Projection",
    "text": "Projection\n\nMotivationCheck the current CRSProject or re-project sf objectsUsing the CRS of another sfExercises\n\n\n\n\nYou often need to project or re-project an sf using a different coordinate reference system (CRS) because you need it to have the same CRS as an sf object that you are interacting it with (spatial join) or mapping it with.\n\n\n\n\n\n\n\n\n\nIn order to check the current CRS for an sf object, you can use the sf::st_crs() function.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nsf uses the Well Known Text format to store the coordinate reference system (CRS), which is one of many many formats to store CRS information (See here)\nID[\"EPSG\", 4267] means that the EPSG code for this CRS is 4267\n\nEPSG code is a CRS reference system developed by by European Petroleum Survey Group (EPSG)\nYou can find the CRS-EPSG number correspondence here.\n\nWhen you transform an sf using a different CRS, you can use its EPSG number if the CRS has an EPSG number\n\nPotential pool of CRS is infinite.\nOnly the commonly-used CRS have been assigned EPSG SRID.\n\n\n\n\n\n\n\n\n\n\nHowExampleCaveat\n\n\nYou can use sf::st_transform() to apply a different projection method to an sf object.\n\nSyntax\n\nst_transform(sf, EPSG number or CRS in WTK)\n\n\n\n\nLet’s transform (reproject) the data using NAD83 / UTM zone 14N CRS. Its EPSG number is 26914.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nLet’s confirm the change in CRS:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nLet’s compare the geometry column before and after the transformation (projection):\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\nThere is a function that  sets  CRS, namely sf::st_set_crs().\nThis function literally  sets  the CRS, but does not transform geometry accordingly unlike sf::st_transform().\nSo, doing this is a terrible mistake and the resulting sf object is no longer where it should be.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou often need to change the CRS of an sf object when you interact (e.g., spatial subsetting, joining, etc) it with another sf object.\nIn such a case, you can extract the CRS of the other sf object using st_crs() and use it for transformation.\nSo, you do not need to find the EPSG of the CRS of the sf object you are interacting it with.\n\n\n\nExample\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nLet’s confirm the transformation:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\n\nCheck the CRSTransform\n\n\nCheck the CRS of Fairway_Five.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nFind the EPSG code for WGS 84, and change the CRS of Fairway_Five to WGS 84 using the EPSG code.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-9-Spatial-Data/L01_vector_basics.html#sec-quick-viz",
    "href": "lectures/Chapter-9-Spatial-Data/L01_vector_basics.html#sec-quick-viz",
    "title": "09-1: R as GIS: Vector Data Basics with the sf package",
    "section": "Quick Visualization",
    "text": "Quick Visualization\n\nQuick view using plot()Interactive view using mapView()\n\n\nThe easiest way to visualize an sf object is to use plot():\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nplot() create a map for each variable where the spatial units are color-differentiated based on the values of the variable\nWe will learn how to create more elaborate maps that are of publication-quality using the ggplot2 package later\n\n\n\n\n\nSometimes it is useful to be able to tell where certain spatial objects are and what values are associated with them on a map.\nThe mapView() function from the mapview package can create an interactive map where you can point to a spatial object and the associated information is revealed on the map.\n\n\n\n\n\nRun the following codes on your computer.\n\nnc &lt;- sf::st_read(system.file(\"shape/nc.shp\", package = \"sf\"), quiet = TRUE)\nmapview::mapView(nc)"
  },
  {
    "objectID": "lectures/Chapter-9-Spatial-Data/L01_vector_basics.html#sec-dataframe-sf",
    "href": "lectures/Chapter-9-Spatial-Data/L01_vector_basics.html#sec-dataframe-sf",
    "title": "09-1: R as GIS: Vector Data Basics with the sf package",
    "section": "Turning a data.frame of points into an sf",
    "text": "Turning a data.frame of points into an sf\n\nMotivationPreparationMaking an sfExercise\n\n\n\nOften times, you have a dataset with geographic coordinates as variables in a csv or other formats\nIt would not be recognized immediately as a spatial dataset by R when it is read into R.\nIn this case, you need to identify which variables represent the geographic coordinates from the data set, and create an sf yourself.\nFortunately, it is easy to do so using the sf::st_as_sf() function.\n\n\n\nLet’s get a dataset (irrigation wells in Nebraska) to work with:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nwells_ne is a data.frame and has longdd and latdd representing longitude and latitude, respectively. Note that it is NOT an sf object.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\nImportant\n\n\n\nYOU need to know the GRS/CRS of your data because you need to provide R with that information!\nThe geographic coordinates system of this data is NAD 83 (epsg=4269) for this dataset.\n\n\n\n\n\n\n\nWe can turn a dataset (e.g., data.frame, tibble, data.table) into an sf object using sf::st_as_sf().\nSyntax\n\nsf::st_as_sf(\n  data.frame, \n  coords = c(\n    longitude var name, \n    latitude var name\n  ),\n  crs = crs\n)\n\n\nExample\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nUsing the LAT (latitude) and LNG (longitude) columns, turn the tibble into an sf, and then assign the CRS of WGS 84 using its EPSG code.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-9-Spatial-Data/L01_vector_basics.html#sec-sf-to-sp",
    "href": "lectures/Chapter-9-Spatial-Data/L01_vector_basics.html#sec-sf-to-sp",
    "title": "09-1: R as GIS: Vector Data Basics with the sf package",
    "section": "Conversion to and from sp objects",
    "text": "Conversion to and from sp objects\n\nMotivationsf to spsp to sf\n\n\n\nThe sp package is the predecessor of the sf package (developed by the same person)\nThere are many (older) packages that only accept spatial objects defined by the sp package\n\nspdep: spatial econometrics\nGWmodel: runs geographically-weighted regression\n\nIn that case, it is good to know how to convert an sf object to an sp object, vice versa.\n\n\n\nYou can convert an sf object to its sp counterpart by as(sf_object, \"Spatial\")\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nYou can convert an sp object to its sf counterpart by sf::st_as_sf(sp_object).\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-9-Spatial-Data/L01_vector_basics.html#sec-non-trans",
    "href": "lectures/Chapter-9-Spatial-Data/L01_vector_basics.html#sec-non-trans",
    "title": "09-1: R as GIS: Vector Data Basics with the sf package",
    "section": "Non-spatial Transformation of sf",
    "text": "Non-spatial Transformation of sf\n\nNotedplyr verbs\n\n\n\nAn important feature of an sf object is that it is basically a data.frame with geometric information stored as a variable (column).\nThis means that transforming an sf object works just like transforming a data.frame.\nBasically, everything you can do to a data.frame, you can do to an sf as well.\ndplyr verbs work well with sf\n\n\n\nThe following code selects wellid variable using dplyr::select():\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNotice that geometry column will be retained after dplyr::select() even if you did not tell R to keep it above.\n\nOf course, you can apply other dplyr verbs just like you do with a data.frame. Here, let’s apply dplyr::select(), dplyr::filter(), and dplyr::mutate() in sequence using a piping operator.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\nNote\n\n\nYou cannot do this with the spatial objects defined by the sp package"
  },
  {
    "objectID": "lectures/Chapter-9-Spatial-Data/L01_vector_basics.html#sec-non-int-spatial-operations",
    "href": "lectures/Chapter-9-Spatial-Data/L01_vector_basics.html#sec-non-int-spatial-operations",
    "title": "09-1: R as GIS: Vector Data Basics with the sf package",
    "section": "Non-interactive geometrical operations",
    "text": "Non-interactive geometrical operations\n\nCreate buffersFind areaFind centroidCalculate distanceCombine (union)\n\n\n\nHowExample (non-projected)Example (projected)\n\n\nYou can use sf::st_buffer() to create buffers of the specified length around points, lines, and polygons.\n\nSyntax\n\nst_buffer(sf, dist = distance)\n\n\ndist: provide the distance in the unit of the CRS (run st_crs(sf)$units to get the unit)\n\n\n\nLet’s create a buffer of 2000 meter.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nHere is what it looks like:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nYes, you see zig-zag. You can read up on this here. For now, I would recommend that you project first and then create a buffer.\n\n\nLet’s first project and then create a buffer:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nHere is what it looks like:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\nExampleCaveat\n\n\nYou can use st_area() to calculate the area of all the polygons in an sf object.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nBy default, area calculated by st_area() is units.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nSo, you want to convert it to a numeric variable like this if you want to subject it to numeric operations later:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\nExampleMatrix of coordinates\n\n\nYou can use st_centroid() to find the centroid of each of all the polygons in an sf object.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nAs you can see, st_centroid() returns an sf of centroids as points. The centroids look like this:\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nIf you want longitude (X) and latitude (Y) of the centroids, you can further apply st_coordinates().\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nOf course, you can easily add the XY matrix to the original sf file using cbind():\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\nHowExample\n\n\nSyntax\n\nst_distance(sf_1, sf_2)\n\nThis finds the distance between each of the points in sf_1 and each of the points in sf_2.\n\n\n\n\nGet a matrix of distances whose \\([i,j]\\) element is the distance between the \\(i\\)th sfg of st_centroid(nc[1:5, ]) and \\(j\\)th sfg of st_centroid(nc[6:15, ]):\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nNote\n\n\nNotice that, even though nc is unprojected, distances returned are in meter.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSometimes you want to combine all the geometries in a single sf. For example, you may want to get the centroid of North Carolina using nc (of course, you can alternatively get sf of NC state boundary, instead of counties in this case).\nYou can use sf::st_union() to achieve this. Note that the returned object is sfc, not sf.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nHere is what it looks like.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-9-Spatial-Data/L01_vector_basics.html#exercise-1",
    "href": "lectures/Chapter-9-Spatial-Data/L01_vector_basics.html#exercise-1",
    "title": "09-1: R as GIS: Vector Data Basics with the sf package",
    "section": "Exercise",
    "text": "Exercise\n\nData preparationExercise 1Exercise 2Exercise 3Exercise 4\n\n\nRun the following code to get fairway_grid data. Then, inspect the data (e.g., by plotting) to get a good sense of what the data looks like.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nFirst, plot fairway_grid to get a sense of what the dataset looks like:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nTransform fairway_grid so that its CRS is NAD 83/UTM zone 14N (its EPSG code is 26914) and name it fairway_grid_utm.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAnswer codes\n\n\nCode\nplot(fairway_grid) \n\nfairway_grid_utm &lt;- st_transform(fairway_grid, 26914)\n\n\n\n\nCreate buffers around the grid polygons in fairway_grid_utm where the radius of the buffer is 10 meter, and name it fairway_grid_buffers.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAnswer codes\n\n\nCode\nfairway_grid_buffers &lt;- st_buffer(fairway_grid_utm, dist = 10)\n\n\n\n\nFind the centroid of each of the buffer polygons you created in Exercise 2, and then name it buffers_centroids.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAnswer codes\n\n\nCode\nbuffers_centroids &lt;- st_centroid(fairway_grid_buffers)\n\n\n\n\nCalculated the distances between the centroids in buffers_centroids.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAnswer codes\n\n\nCode\nst_distance(buffers_centroids)"
  },
  {
    "objectID": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#tips-to-make-the-most-of-the-lecture-notes",
    "href": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#tips-to-make-the-most-of-the-lecture-notes",
    "title": "08-1: Making Tables with flextable",
    "section": "Tips to make the most of the lecture notes",
    "text": "Tips to make the most of the lecture notes\n\nInteractive navigation toolsRunning and writing codes\n\n\n\nClick on the three horizontally stacked lines at the bottom left corner of the slide, then you will see table of contents, and you can jump to the section you want\nHit letter “o” on your keyboard and you will have a panel view of all the slides\n\n\n\n\nThe box area with a hint of blue as the background color is where you can write code (hereafter referred to as the “code area”).\nHit the “Run Code” button to execute all the code inside the code area.\nYou can evaluate (run) code selectively by highlighting the parts you want to run and hitting Command + Enter for Mac (Ctrl + Enter for Windows).\nIf you want to run the codes on your computer, you can first click on the icon with two sheets of paper stacked on top of each other (top right corner of the code chunk), which copies the code in the code area. You can then paste it onto your computer.\nYou can click on the reload button (top right corner of the code chunk, left to the copy button) to revert back to the original code."
  },
  {
    "objectID": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#create-table-and-modify-parts",
    "href": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#create-table-and-modify-parts",
    "title": "08-1: Making Tables with flextable",
    "section": "Create table and modify Parts",
    "text": "Create table and modify Parts\n\nInstructionData PreparationInitiate a table\n\n\nInstall the following packages and library them.\n\n#--- install if you have not ---#\ninstall.packages(\"flextable\")\ninstall.packages(\"officer\")\n\n#--- library ---#\nlibrary(flextable)\nlibrary(officer)\n\n\n\n\n#--- Define regions ---#\nAustralasia &lt;- c(\"AU\", \"NZ\")\nMelanesia &lt;- c(\"NC\", \"PG\", \"SB\", \"VU\")\nPolynesia &lt;- c(\"PF\", \"WS\", \"TO\", \"TV\")\n\nlibrary(gt)\n\n#--- create a dataset ---#\n(\ntab_data &lt;- \n  countrypops %&gt;%\n  dplyr::filter(country_code_2 %in% c(\n    Australasia, Melanesia, Polynesia\n  )) %&gt;%\n  dplyr::filter(year %in% c(1995, 2005, 2015)) %&gt;%\n  mutate(region = case_when(\n    country_code_2 %in% Australasia ~ \"Australasia\",\n    country_code_2 %in% Melanesia ~ \"Melanesia\",\n    country_code_2 %in% Polynesia ~ \"Polynesia\",\n  )) %&gt;%\n  pivot_wider(\n    values_from = population,\n    names_from = year,\n    names_prefix = \"y_\"\n  ) %&gt;%\n  dplyr::arrange(region, desc(y_2015)) %&gt;%\n  dplyr::select(-starts_with(\"country_code\")) %&gt;%\n  mutate(\n    pop_ratio_10_15 = y_2015 / y_2005,\n    date = \"2013-11-14\"\n  )\n)\n\n# A tibble: 10 × 7\n   country_name     region        y_1995   y_2005   y_2015 pop_ratio_10_15 date \n   &lt;chr&gt;            &lt;chr&gt;          &lt;int&gt;    &lt;int&gt;    &lt;int&gt;           &lt;dbl&gt; &lt;chr&gt;\n 1 Australia        Australasia 18004882 20176844 23815995            1.18 2013…\n 2 New Zealand      Australasia  3673400  4133900  4609400            1.12 2013…\n 3 Papua New Guinea Melanesia    4616439  6498818  8682174            1.34 2013…\n 4 Solomon Islands  Melanesia     375189   482486   612660            1.27 2013…\n 5 Vanuatu          Melanesia     170612   217632   276438            1.27 2013…\n 6 New Caledonia    Melanesia     193816   232250   269460            1.16 2013…\n 7 French Polynesia Polynesia     231446   271060   291787            1.08 2013…\n 8 Samoa            Polynesia     174902   188626   203571            1.08 2013…\n 9 Tonga            Polynesia      99977   105633   106122            1.00 2013…\n10 Tuvalu           Polynesia       9585     9912    10877            1.10 2013…\n\n\n\n\n\nHowExample\n\n\nWe can apply flextable() to a data.frame to initiate a table:\n\nflextable(\n  tab_data, \n  col_keys = \n    c(\n      \"country_name\",\n      \"lufhierh\",\n      \"region\",\n      \"y_1995\",\n      \"y_2005\"\n    )\n )\n\nwhere col_keys are the list of the name of the variables from the data.frame (providing variable names that do no exist in the dataset creates blank columns)\n\n\n\n\n\nflextable(\n  tab_data,\n  col_keys = \n    c(\n      \"country_name\", \n      \"lufhierh\", \n      \"region\", \n      \"y_1995\", \n      \"y_2005\"\n    )\n)\n\n\n\n\ncountry_nameregiony_1995y_2005AustraliaAustralasia18,004,88220,176,844New ZealandAustralasia3,673,4004,133,900Papua New GuineaMelanesia4,616,4396,498,818Solomon IslandsMelanesia375,189482,486VanuatuMelanesia170,612217,632New CaledoniaMelanesia193,816232,250French PolynesiaPolynesia231,446271,060SamoaPolynesia174,902188,626TongaPolynesia99,977105,633TuvaluPolynesia9,5859,912"
  },
  {
    "objectID": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#selector",
    "href": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#selector",
    "title": "08-1: Making Tables with flextable",
    "section": "Selector",
    "text": "Selector\n\nInstructionPreparationi, j: formulai, j: integer, characteri, j: logical, integerby parts\n\n\nMany functions let you choose specifically where you apply changes. Those functions have\n\ni for selecting rows\n\nformula\ninteger vector\nlogical vector\n\nj for selecting columns\n\nformula\ncharacter vector\ninteger vector\n\n\nYou can use any combinations of the reference methods for i and j.\n\n\nWe will be building on ft created below:\n\n\n\nft &lt;-\n  tab_data %&gt;% \n  flextable(\n    col_keys = \n      c(\n        \"country_name\",\n        \"region\",\n        \"y_1995\",\n        \"y_2005\"\n      )\n  ) \n\n\n\n\ncountry_nameregiony_1995y_2005AustraliaAustralasia18,004,88220,176,844New ZealandAustralasia3,673,4004,133,900Papua New GuineaMelanesia4,616,4396,498,818Solomon IslandsMelanesia375,189482,486VanuatuMelanesia170,612217,632New CaledoniaMelanesia193,816232,250French PolynesiaPolynesia231,446271,060SamoaPolynesia174,902188,626TongaPolynesia99,977105,633TuvaluPolynesia9,5859,912\n\n\n\n\n\n\n\nSyntax\n\nfunction(\n  i = ~ condition based on variables,\n  j = ~ vairable 1 + variable 2 + ...,\n  .\n)\n\n\nExample\n\n\n\nft %&gt;%\n  color(\n    i = ~ y_2005 &gt; 2e5,\n    j = ~ country_name + region,\n    color = \"red\"\n  )\n\n\n\n\ncountry_nameregiony_1995y_2005AustraliaAustralasia18,004,88220,176,844New ZealandAustralasia3,673,4004,133,900Papua New GuineaMelanesia4,616,4396,498,818Solomon IslandsMelanesia375,189482,486VanuatuMelanesia170,612217,632New CaledoniaMelanesia193,816232,250French PolynesiaPolynesia231,446271,060SamoaPolynesia174,902188,626TongaPolynesia99,977105,633TuvaluPolynesia9,5859,912\n\n\n\n\n\n\n\nUsing a character vector for j is not recommended because using a formula involves less typing.\n\n\n\nft %&gt;%\n  color(\n    i = c(2, 4:9),\n    j = c(\"country_name\", \"y_1995\"),\n    color = \"red\"\n  )\n\n\n\n\ncountry_nameregiony_1995y_2005AustraliaAustralasia18,004,88220,176,844New ZealandAustralasia3,673,4004,133,900Papua New GuineaMelanesia4,616,4396,498,818Solomon IslandsMelanesia375,189482,486VanuatuMelanesia170,612217,632New CaledoniaMelanesia193,816232,250French PolynesiaPolynesia231,446271,060SamoaPolynesia174,902188,626TongaPolynesia99,977105,633TuvaluPolynesia9,5859,912\n\n\n\n\n\n\n\n\n\n\nft %&gt;% \n  color(\n    i = rep(c(TRUE, FALSE), each = 5),\n    j = c(1, 3),\n    color = \"red\"\n  )\n\n\n\n\ncountry_nameregiony_1995y_2005AustraliaAustralasia18,004,88220,176,844New ZealandAustralasia3,673,4004,133,900Papua New GuineaMelanesia4,616,4396,498,818Solomon IslandsMelanesia375,189482,486VanuatuMelanesia170,612217,632New CaledoniaMelanesia193,816232,250French PolynesiaPolynesia231,446271,060SamoaPolynesia174,902188,626TongaPolynesia99,977105,633TuvaluPolynesia9,5859,912\n\n\n\n\n\n\n\nYou can refer to parts of the table using part = option. The available options are\n\nheader: the header part of the table\nfooter: the footer part of the table\nbody: the body part of the table\nall: the body and the header parts of the table\n\n\n\n\n\ntab_data %&gt;% \n  flextable(\n    col_keys = c(\"country_name\", \"region\", \"y_1995\", \"y_2005\")\n  ) %&gt;% \n  color(\n    part = \"header\",\n    color = \"red\"\n  )\n\n\n\n\ncountry_nameregiony_1995y_2005AustraliaAustralasia18,004,88220,176,844New ZealandAustralasia3,673,4004,133,900Papua New GuineaMelanesia4,616,4396,498,818Solomon IslandsMelanesia375,189482,486VanuatuMelanesia170,612217,632New CaledoniaMelanesia193,816232,250French PolynesiaPolynesia231,446271,060SamoaPolynesia174,902188,626TongaPolynesia99,977105,633TuvaluPolynesia9,5859,912\n\n\n\n\n\nDifferent functions have different default values for part."
  },
  {
    "objectID": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#style",
    "href": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#style",
    "title": "08-1: Making Tables with flextable",
    "section": "Style",
    "text": "Style\n\nIntroductionfp_text()paragraph vs cellfp_par()fp_cell()\n\n\nYou can use the style() function to change the style and format of a table.\nSyntax\n\nstyle(\n  x,\n  i = NULL,\n  j = NULL,\n  pr_t = NULL,\n  pr_p = NULL,\n  pr_c = NULL,\n  part = \"body\"\n)\n\nWe can use fp_*() functions from the officer package to specify the style of texts, paragraphs, and cells.\n\npr_t = fp_text(): format texts\npr_p = fp_par(): format paragraphs\npr_c = fp_celll(): format cells\n\n(pr in pr_* = stands for property.)\n\n\n\nIntroductionExample\n\n\nfp_text() lets you update the appearance of texts, including color, font size, bold or not, etc (see the help page below for the complete list of options).\n\nSyntax\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\nft %&gt;% \n  style(\n    i = 4:6,\n    j = ~ country_name,\n    pr_t = \n      fp_text(\n        color = \"red\",\n        bold = TRUE,\n        underlined = TRUE\n      )\n  )\n\n\n\n\ncountry_nameregiony_1995y_2005AustraliaAustralasia18,004,88220,176,844New ZealandAustralasia3,673,4004,133,900Papua New GuineaMelanesia4,616,4396,498,818Solomon IslandsMelanesia375,189482,486VanuatuMelanesia170,612217,632New CaledoniaMelanesia193,816232,250French PolynesiaPolynesia231,446271,060SamoaPolynesia174,902188,626TongaPolynesia99,977105,633TuvaluPolynesia9,5859,912\n\n\n\n\n\n\n\n\n\n\n\n\nparagraphs: rectangular boxes around the texts inside the cells\ncells: rectangular boxes that contain paragraphs and texts inside\n\n\n\n\nft %&gt;% \n  style(\n    pr_p = fp_par(\n      border.bottom = fp_border(width = 2, color = \"blue\")\n    ),\n    pr_c = fp_cell(\n      border.bottom = fp_border(width = 2, color = \"red\")\n    )\n  )\n\n\n\n\ncountry_nameregiony_1995y_2005AustraliaAustralasia18,004,88220,176,844New ZealandAustralasia3,673,4004,133,900Papua New GuineaMelanesia4,616,4396,498,818Solomon IslandsMelanesia375,189482,486VanuatuMelanesia170,612217,632New CaledoniaMelanesia193,816232,250French PolynesiaPolynesia231,446271,060SamoaPolynesia174,902188,626TongaPolynesia99,977105,633TuvaluPolynesia9,5859,912\n\n\n\n\n\n\n\n\nIntroductionExample\n\n\nfp_paragraph() lets you update the appearance of paragraphs (see the help page below for the complete list of options).\n\nSyntax\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\nft %&gt;% \n  style(\n    i = 4:6,\n    j = ~ country_name,\n    pr_p = fp_par(\n      text.align = \"left\",\n      shading.color = \"grey\"\n    )\n  )\n\n\n\n\ncountry_nameregiony_1995y_2005AustraliaAustralasia18,004,88220,176,844New ZealandAustralasia3,673,4004,133,900Papua New GuineaMelanesia4,616,4396,498,818Solomon IslandsMelanesia375,189482,486VanuatuMelanesia170,612217,632New CaledoniaMelanesia193,816232,250French PolynesiaPolynesia231,446271,060SamoaPolynesia174,902188,626TongaPolynesia99,977105,633TuvaluPolynesia9,5859,912\n\n\n\n\n\n\n\n\n\n\n\n\nIntroductionExample\n\n\nfp_cell() lets you update the appearance of cells (see the help page below for the complete list of options).\n\nSyntax\n\n?fp_cell\n\n\n\n\n\n\nft %&gt;% \n  style(\n    i = 4:6,\n    j = ~ country_name,\n    pr_c = fp_cell(\n      margin = 2,\n      vertical.align = \"top\",\n      background.color = \"red\"\n    )\n  )\n\n\n\n\ncountry_nameregiony_1995y_2005AustraliaAustralasia18,004,88220,176,844New ZealandAustralasia3,673,4004,133,900Papua New GuineaMelanesia4,616,4396,498,818Solomon IslandsMelanesia375,189482,486VanuatuMelanesia170,612217,632New CaledoniaMelanesia193,816232,250French PolynesiaPolynesia231,446271,060SamoaPolynesia174,902188,626TongaPolynesia99,977105,633TuvaluPolynesia9,5859,912"
  },
  {
    "objectID": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#formatting-convenience-functions",
    "href": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#formatting-convenience-functions",
    "title": "08-1: Making Tables with flextable",
    "section": "Formatting: convenience functions",
    "text": "Formatting: convenience functions\n\nInstructionExample\n\n\n\nInstead of using the style() function in combination with fp_*() functions, you can easily work on a specific aesthetic feature using convenience functions like below:\n\nalign(), align_text_col(), align_nottext_col(): Set text alignment\nbg(): Set background color\nfont(): Set font\nfontsize(): Set font size\nitalic(): Set italic font\nbold(): Set bold font\ncolor(): Set font color\npadding(): Set paragraph paddings\nvalign(): Set vertical alignment\nrotate(): rotate cell text\nempty_blanks(): make blank columns as transparent\n\nYou can use the selector syntax to specify where the specified effects take place\n\n\n\n\n\n\nft %&gt;%\n  color(\n    i = 1,\n    j = 2,\n    \"#fcba03\"\n  ) %&gt;%\n  bg(\n    i = ~ y_2005 &lt; 2e5,\n    j = c(\"region\"),\n    bg = \"grey\"\n  ) %&gt;%\n  fontsize(\n    i = 7,\n    size = 16\n  )\n\n\n\n\ncountry_nameregiony_1995y_2005AustraliaAustralasia18,004,88220,176,844New ZealandAustralasia3,673,4004,133,900Papua New GuineaMelanesia4,616,4396,498,818Solomon IslandsMelanesia375,189482,486VanuatuMelanesia170,612217,632New CaledoniaMelanesia193,816232,250French PolynesiaPolynesia231,446271,060SamoaPolynesia174,902188,626TongaPolynesia99,977105,633TuvaluPolynesia9,5859,912"
  },
  {
    "objectID": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#borders-convenience-functions",
    "href": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#borders-convenience-functions",
    "title": "08-1: Making Tables with flextable",
    "section": "Borders: convenience functions",
    "text": "Borders: convenience functions\n\nList of functionsInstructionfp_border()\n\n\nHere is a list of convenience functions that you can use to draw border lines on a table:\n\nhline(): set horizontal borders\nhline_bottom(): set bottom horizontal border\nhline_top(): set top horizontal border\nvline(): set vertical borders\nvline_left(): set flextable left vertical borders\nvline_right(): set flextable right vertical borders\nborder(): Set cell borders\nborder_inner(): set vertical & horizontal inner borders\nborder_inner_h(): set inner borders\nborder_inner_v(): set vertical inner borders\nborder_outer(): set outer borders\nborder_remove(): remove borders\nfix_border_issues(): fix border issues when cell are merged\n\n\n\n\nUse the selector syntax to specify where\nUse the border = option along with fp_border() from the officer package to specify what kind of borders you would like to draw\n\nExample\n\nhline(\n    i = 3, \n    j = 1:3, \n    border = fp_border( \n      color = \"red\", \n      style = \"dotted\", \n      width = 4 \n    ) \n  ) \n\n\n\n\nIntroductionExample\n\n\nfp_border() lets you specify the aesthetics of the borders you are drawing.\n\nSyntax\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\nft %&gt;%\n  hline(\n    i = 3, \n    j = 1:3, \n    border = fp_border(\n      color = \"red\",\n      style = \"dotted\",\n      width = 4\n    )\n  ) \n\n\n\n\ncountry_nameregiony_1995y_2005AustraliaAustralasia18,004,88220,176,844New ZealandAustralasia3,673,4004,133,900Papua New GuineaMelanesia4,616,4396,498,818Solomon IslandsMelanesia375,189482,486VanuatuMelanesia170,612217,632New CaledoniaMelanesia193,816232,250French PolynesiaPolynesia231,446271,060SamoaPolynesia174,902188,626TongaPolynesia99,977105,633TuvaluPolynesia9,5859,912"
  },
  {
    "objectID": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#headers-and-footers",
    "href": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#headers-and-footers",
    "title": "08-1: Making Tables with flextable",
    "section": "Headers and footers",
    "text": "Headers and footers\n\nadd_*_row()footnote()set_header_labels()delete_part()\n\n\n\nInstructionExample\n\n\nYou can use these functions to add a row to the top or the bottom of a table:\n\nadd_header_row()\nadd_footer_row()\n\n\nSyntax\n\nadd_*_row(flextable, \n  values = vector of characters, \n  colwidths = vector of integers \n)\n\n\nExample\n\nadd_header_row(\n  values = c(\"3-column label\", \"1-column label\"),\n  colwidths = c(3, 1)\n)\n\nThis code would insert a row where “3-column label” spans for three columns and “1-column label” spans for one column.\n\n\n\n\nNote\n\n\nYou might want to use footnote() to create footnotes instead of add_footer_rows, as it allows you to generate reference symbols at the same time.\n\n\n\n\n\n\nft %&gt;% \n  add_header_row(\n    values = c(\"3-column label\", \"1-column label\"),\n    colwidths = c(3, 1)\n  ) %&gt;% \n  align(align = \"center\", part = \"header\") %&gt;% \n  autofit() %&gt;% \n  add_footer_row(\n    values = \"4-column footnote, which is made longer to show it spans across the entire columns.\",\n    colwidths = 4\n  )\n\n3-column label1-column labelcountry_nameregiony_1995y_2005AustraliaAustralasia18,004,88220,176,844New ZealandAustralasia3,673,4004,133,900Papua New GuineaMelanesia4,616,4396,498,818Solomon IslandsMelanesia375,189482,486VanuatuMelanesia170,612217,632New CaledoniaMelanesia193,816232,250French PolynesiaPolynesia231,446271,060SamoaPolynesia174,902188,626TongaPolynesia99,977105,633TuvaluPolynesia9,5859,9124-column footnote, which is made longer to show it spans across the entire columns.\n\n\n\n\n\n\n\n\n\nIntroductionExample\n\n\nExplanation\nfootnote() lets you add footnotes with reference symbols for each of them.\n\nSyntax\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\nft %&gt;%\n  footnote(\n    i = 1, j = 1:2, part = \"header\",\n    value = as_paragraph(\n      c(\n        \"This is footnote 1\",\n        \"This is footnote 2\"\n      )\n    ),\n    ref_symbols = c(\"++\", \"**\")\n  )\n\n\n\n\ncountry_name++region**y_1995y_2005AustraliaAustralasia18,004,88220,176,844New ZealandAustralasia3,673,4004,133,900Papua New GuineaMelanesia4,616,4396,498,818Solomon IslandsMelanesia375,189482,486VanuatuMelanesia170,612217,632New CaledoniaMelanesia193,816232,250French PolynesiaPolynesia231,446271,060SamoaPolynesia174,902188,626TongaPolynesia99,977105,633TuvaluPolynesia9,5859,912++This is footnote 1**This is footnote 2\n\n\n\n\n\n\nnth element in value is associated with nth value in ref_symbols\nuse as_paragraph(c()) for value\n\n\n\n\n\n\n\nset_header_labels() lets you re-label existing header labels using a named list.\n\nSyntax\n\nset_header_labels(\n  values = list( \n    existing name 1 = \"new name 1\", \n    existing name 2 = \"new name 2\" \n  )\n)\n\n\nExample\n\n\n\nft %&gt;%\n  set_header_labels(\n    values = list(\n      country_name = \"Country Name\",\n      region = \"Region\"\n    )\n  ) %&gt;% \n  autofit() \n\n\n\n\nCountry NameRegiony_1995y_2005AustraliaAustralasia18,004,88220,176,844New ZealandAustralasia3,673,4004,133,900Papua New GuineaMelanesia4,616,4396,498,818Solomon IslandsMelanesia375,189482,486VanuatuMelanesia170,612217,632New CaledoniaMelanesia193,816232,250French PolynesiaPolynesia231,446271,060SamoaPolynesia174,902188,626TongaPolynesia99,977105,633TuvaluPolynesia9,5859,912\n\n\n\n\n\n\n\n\nHowNote\n\n\nSyntax\n\ndelete_part(flextable, part = \"header\")\n\n\nThe default is to delete the header.\nExample\n\n\n\nft %&gt;% \n  delete_part()\n\n\n\n\nAustraliaAustralasia18,004,88220,176,844New ZealandAustralasia3,673,4004,133,900Papua New GuineaMelanesia4,616,4396,498,818Solomon IslandsMelanesia375,189482,486VanuatuMelanesia170,612217,632New CaledoniaMelanesia193,816232,250French PolynesiaPolynesia231,446271,060SamoaPolynesia174,902188,626TongaPolynesia99,977105,633TuvaluPolynesia9,5859,912\n\n\n\n\n\n\n\nYou can still (or have to) use the original variable names from the dataset for selectors even after you deleter the header:\n\ntab_data %&gt;%  \n  flextable(\n    col_keys = c(\"country_name\", \"region\", \"y_1995\", \"y_2005\")\n  ) %&gt;% \n  delete_part() %&gt;% \n  hline(\n    i = 3, \n    j = ~ country_name + region, \n    border = fp_border(color = \"red\", style = \"dotted\", width = 4 \n    ) \n  )  \n\nAustraliaAustralasia18,004,88220,176,844New ZealandAustralasia3,673,4004,133,900Papua New GuineaMelanesia4,616,4396,498,818Solomon IslandsMelanesia375,189482,486VanuatuMelanesia170,612217,632New CaledoniaMelanesia193,816232,250French PolynesiaPolynesia231,446271,060SamoaPolynesia174,902188,626TongaPolynesia99,977105,633TuvaluPolynesia9,5859,912"
  },
  {
    "objectID": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#layout",
    "href": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#layout",
    "title": "08-1: Making Tables with flextable",
    "section": "Layout",
    "text": "Layout\n\nInstructionmerge_v()autofit()width()\n\n\nList of functions\nHere is a list of functions you can use to change the layout of a table:\n\nmerge_at(): Merge flextable cells into a single one\nmerge_h(): Merge flextable cells horizontally\nmerge_h_range(): rowwise merge of a range of columns\nmerge_v(): Merge flextable cells vertically\nheight(), height_all(): Set flextable rows height\nwidth(): Set flextable columns width\nhrule(): Set flextable rule for rows heights\nautofit(): Adjusts cell widths and heights\nfit_to_width(): fit a flextable to a maximum width\nas_grouped_data(): grouped data transformation\n\nUse the selector syntax to specify where just like the other functions we have seen. We will look at merge_v(), autofit(), and width().\n\n\n\n\nNote\n\n\nI have not encountered cases where I need to merge cells horizontally. It works in a similar manner to the way merge_v() works except that it works on rows instead of columns.\n\n\n\n\n\nmerge_v() merges vertically the adjacent cells with the same values. It does not accept i (rows) argument.\n\n\nBefore\n\nft \n\ncountry_nameregiony_1995y_2005AustraliaAustralasia18,004,88220,176,844New ZealandAustralasia3,673,4004,133,900Papua New GuineaMelanesia4,616,4396,498,818Solomon IslandsMelanesia375,189482,486VanuatuMelanesia170,612217,632New CaledoniaMelanesia193,816232,250French PolynesiaPolynesia231,446271,060SamoaPolynesia174,902188,626TongaPolynesia99,977105,633TuvaluPolynesia9,5859,912\n\n\n\nAfter\n\nft %&gt;%  merge_v(j = ~ region)\n\ncountry_nameregiony_1995y_2005AustraliaAustralasia18,004,88220,176,844New Zealand3,673,4004,133,900Papua New GuineaMelanesia4,616,4396,498,818Solomon Islands375,189482,486Vanuatu170,612217,632New Caledonia193,816232,250French PolynesiaPolynesia231,446271,060Samoa174,902188,626Tonga99,977105,633Tuvalu9,5859,912\n\n\n\n\n\n\n\nautofit() adjust the height and width of cells .\n\n\nBefore\n\ntab_data %&gt;%\n  mutate(country_name = ifelse(country_name == \"Australia\", \"super long country name .......... bluh bluh bluh bluh bluh bluh bluh bluh bluh bluh bluh bluh\", country_name)) %&gt;% \n  flextable(\n    col_keys = c(\"country_name\", \"region\", \"y_1995\", \"y_2005\")\n  ) %&gt;% \n  merge_v(j = ~ region)\n\ncountry_nameregiony_1995y_2005super long country name .......... bluh bluh bluh bluh bluh bluh bluh bluh bluh bluh bluh bluhAustralasia18,004,88220,176,844New Zealand3,673,4004,133,900Papua New GuineaMelanesia4,616,4396,498,818Solomon Islands375,189482,486Vanuatu170,612217,632New Caledonia193,816232,250French PolynesiaPolynesia231,446271,060Samoa174,902188,626Tonga99,977105,633Tuvalu9,5859,912\n\n\n\nAfter\n\ntab_data %&gt;%\n  mutate(country_name = ifelse(country_name == \"Australia\", \"super long country name .......... bluh bluh bluh bluh bluh bluh bluh bluh bluh bluh bluh bluh\", country_name)) %&gt;% \n  flextable(\n    col_keys = c(\"country_name\", \"region\", \"y_1995\", \"y_2005\")\n  ) %&gt;% \n  merge_v(j = ~ region) %&gt;% autofit()\n\ncountry_nameregiony_1995y_2005super long country name .......... bluh bluh bluh bluh bluh bluh bluh bluh bluh bluh bluh bluhAustralasia18,004,88220,176,844New Zealand3,673,4004,133,900Papua New GuineaMelanesia4,616,4396,498,818Solomon Islands375,189482,486Vanuatu170,612217,632New Caledonia193,816232,250French PolynesiaPolynesia231,446271,060Samoa174,902188,626Tonga99,977105,633Tuvalu9,5859,912\n\n\nIt adjusted the width of the 1st column so that more texts are displayed in a single row. But, the width of the entire table does not go over the limit of the paper.\n\n\n\n\n\nwidth() set the width of columns to the length you specify.\n\n\nBefore\n\nft %&gt;%\n  autofit()\n\ncountry_nameregiony_1995y_2005AustraliaAustralasia18,004,88220,176,844New ZealandAustralasia3,673,4004,133,900Papua New GuineaMelanesia4,616,4396,498,818Solomon IslandsMelanesia375,189482,486VanuatuMelanesia170,612217,632New CaledoniaMelanesia193,816232,250French PolynesiaPolynesia231,446271,060SamoaPolynesia174,902188,626TongaPolynesia99,977105,633TuvaluPolynesia9,5859,912\n\n\n\nAfter\n\nft %&gt;% \n  autofit() %&gt;% \n  width(j = ~ country_name, width = 1)\n\ncountry_nameregiony_1995y_2005AustraliaAustralasia18,004,88220,176,844New ZealandAustralasia3,673,4004,133,900Papua New GuineaMelanesia4,616,4396,498,818Solomon IslandsMelanesia375,189482,486VanuatuMelanesia170,612217,632New CaledoniaMelanesia193,816232,250French PolynesiaPolynesia231,446271,060SamoaPolynesia174,902188,626TongaPolynesia99,977105,633TuvaluPolynesia9,5859,912"
  },
  {
    "objectID": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#output",
    "href": "lectures/Chapter-8-Table/08-1-make_table_flextable.html#output",
    "title": "08-1: Making Tables with flextable",
    "section": "Output",
    "text": "Output\n\nIntroductionWord or Power PointImage\n\n\nWe can save the table in various formats.\n\nsave_as_docx(): docx (WORD)\nsave_as_pptx(): pptx (Power Point)\nsave_as_image(): image (png, pdf, jpeg) with help from the webshot2 package\n\nLet’s create a table for demonstration:\n\ntable_tmep &lt;- \n  tab_data %&gt;%  \n  flextable(col_keys = c(\"country_name\", \"region\", \"y_1995\", \"y_2005\")) \n\n\n\nWORD\n\nsave_as_docx(table_tmep, path = \"temp_table.docx\")\n\n\nPower Point\n\nsave_as_pptx(table_tmep, path = \"temp_table.pptx\")\n\n\n\nI do not really recommend this option. It is hard to configure the output.\nFirst install the webshot2 package.\n\n#--- install ---#\nremotes::install_github(\"rstudio/webshot2\") \n\n#--- library ---#\nlibrary(webshot2)\n\n\npng\n\nsave_as_image(table_tmep, path = \"temp_table.png\") \n\n\npdf\n\nsave_as_image(table_tmep, path = \"temp_table.pdf\", zoom = 10, webshot = \"webshot2\")"
  },
  {
    "objectID": "lectures/Chapter-6-HowCodeProject/06-1-code_project_RStudio.html#tips-to-make-the-most-of-the-lecture-notes",
    "href": "lectures/Chapter-6-HowCodeProject/06-1-code_project_RStudio.html#tips-to-make-the-most-of-the-lecture-notes",
    "title": "06-1: How to write R codes, manage Projects, work with RStudio",
    "section": "Tips to make the most of the lecture notes",
    "text": "Tips to make the most of the lecture notes\n\nInteractive navigation toolsRunning and writing codes\n\n\n\nClick on the three horizontally stacked lines at the bottom left corner of the slide, then you will see table of contents, and you can jump to the section you want\nHit letter “o” on your keyboard and you will have a panel view of all the slides\n\n\n\n\nThe box area with a hint of blue as the background color is where you can write code (hereafter referred to as the “code area”).\nHit the “Run Code” button to execute all the code inside the code area.\nYou can evaluate (run) code selectively by highlighting the parts you want to run and hitting Command + Enter for Mac (Ctrl + Enter for Windows).\nIf you want to run the codes on your computer, you can first click on the icon with two sheets of paper stacked on top of each other (top right corner of the code chunk), which copies the code in the code area. You can then paste it onto your computer.\nYou can click on the reload button (top right corner of the code chunk, left to the copy button) to revert back to the original code."
  },
  {
    "objectID": "lectures/Chapter-6-HowCodeProject/06-1-code_project_RStudio.html#learning-objectives",
    "href": "lectures/Chapter-6-HowCodeProject/06-1-code_project_RStudio.html#learning-objectives",
    "title": "06-1: How to write R codes, manage Projects, work with RStudio",
    "section": "Learning objectives",
    "text": "Learning objectives\n\nLearn how to organize your project: folder, codes, data files, etc\nLearn how to organize R codes\nLearn how to use various RStudio tips for efficient programming"
  },
  {
    "objectID": "lectures/Chapter-6-HowCodeProject/06-1-code_project_RStudio.html#reproducibility-1",
    "href": "lectures/Chapter-6-HowCodeProject/06-1-code_project_RStudio.html#reproducibility-1",
    "title": "06-1: How to write R codes, manage Projects, work with RStudio",
    "section": "Reproducibility",
    "text": "Reproducibility\n\nWhat is it?HowHigh v.s. low qualityWhy high-quality reproducible researchCheck list\n\n\nFirst of all, you may have heard of “reproducibility” and “replicability.” While they sometimes are used interchangeably, they mean different things. Here are commonly used definitions of the two terms (Cacioppo et al. 2015).\n\n\n\n\n\nDefinition: Reproducibility\n\n\nA research study is reproducible if anybody (including the author of the study) can generate exactly the same results by using the same materials (e.g., data) and procedures used in the study.\n\n\n\n\n\n\n\n\n\nDefinition: Replicability\n\n\nA research study is replicable if other teams reach the same conclusion by applying the same procedure to the different materials (e.g., data).\n\n\n\n\nThis lecture focuses only on reproducibility and do not deal with replicability.\n\n\n\n\n\n\nMinimum Requirement\n\n\nEvery single action taken during the entire research process is documented in a way that anybody can follow to implement the same actions (no hidden actions) to produce exactly the same results.\n\n\n\n\n\nNote that this does not necessarily mean every single action needs to be computer-programmed and automated. Even if you manually delete rows of data on Excel (highly discouraged), this does not make your research non-reproducible as long as this action is recorded and the original data (before deletion of the rows) are provided because anybody can implement this action.\n\n\nYour project is reproducible if the minimum requirement is satisfied, but is of low-quality if it is too costly/time-consuming to reproduce. A high-quality reproducible project exhibits the following characteristics:\n\nOrganized Project Folder:\nIt maintains a well-structured and organized project folder, making it easy to locate files your are looking for.\n\nStreamlined Automation:\nWorkflows are automated with well-annotated computer programs, simplifying the replication process and providing clarity in the workflow.\n\nComprehensive Documentation:\nRobust documentation, encompassing data and reproduction guidance, ensures transparency, saving time on data interpretation and replication instructions.\n\n\nThe main beneficiaries of reproducible research include:\n\nYou (Y)\nMembers of your team (M)\nThe scientific community (S)\n\n\nHere are the benefits of high-quality reproducible research with their beneficiaries:\n\nScientific Integrity and Error Prevention (S)\nEducational Value (MS)\nRepeatability (YM)\nTransferability (YM)\nReducing Errors (YM)\n\n\n\n\nThe project has organized folder system and all the files (code, manuscript, journal articles in pdf) are placed where they should be\nData is clearly documented\nAll the actions (data processing, analysis, figure and table creation) are computer-programmed without any manual procedures (e.g., deleting rows of a CSV file on Microsoft Excel)\nThe computer programs are well annotated and organized\nAn instruction to reproduce (what computer programs to run in what order) is provided\nThere are no unnecessary files in the project folder"
  },
  {
    "objectID": "lectures/Chapter-6-HowCodeProject/06-1-code_project_RStudio.html#how-to-organize-your-project-1",
    "href": "lectures/Chapter-6-HowCodeProject/06-1-code_project_RStudio.html#how-to-organize-your-project-1",
    "title": "06-1: How to write R codes, manage Projects, work with RStudio",
    "section": "How to organize your project",
    "text": "How to organize your project\n\nMotivationRStudio projectFolder organization\n\n\nYou should have a single dedicated folder for a research project. This will avoid\n\nconfusions between objects of the same or similar name (accidentally using the one you do not intend to use)\nwasting memory by holding objects on the global environment that are completely irrelevant to your working project\n\n\n\nWe can initiate an RStudio project with a dedicated folder from within RStudio.\n\nStep 1Step 2Step 3\n\n\n\n\nAt the top right corner of RStudio, navigate through:\n\nProject (None)\n-&gt; New Project…\n-&gt; New Directory\n-&gt; New Project\n\n\n\n\n\n\n\n\n\n\ntype in a directory name\nselect the directory in which the project folder (directory) is going to be created\nhit the create folder button\n\n\n\n\n\n\n\n\n\n\nYou will be automatically taken to a new R session inside the newly-created RStudio project.\nIn this folder you just created, you have a single file named .Rproj (here, it is test.Rproj). It holds information about this project, but you do not have to touch it.\n\n\n\n\n\n\n\n\n\n\n\nHere is a recommended folder organization. You should modify/add folders as you see fit.\n\n\n\nCode: all the codes go in here\n\nDataPrep:\nAnalysis:\n\nData\n\nRaw: place the raw datasets here\nProcessed: save the intermediate datasets here\n\nLiterature: journal articles and other relevant documents\nResults: results (regression, figures, tables)\nWriting: qmd, WORD, Latex files"
  },
  {
    "objectID": "lectures/Chapter-6-HowCodeProject/06-1-code_project_RStudio.html#files",
    "href": "lectures/Chapter-6-HowCodeProject/06-1-code_project_RStudio.html#files",
    "title": "06-1: How to write R codes, manage Projects, work with RStudio",
    "section": "Files",
    "text": "Files\n\nQuarto (.qmd) or R (.R)?Inside a qmd fileR code styleFile placementFile names\n\n\n\n\n\n\nRecommendation\n\n\nUse a qmd file instead of an R file whenever you write codes\n\n\n\n\n\nIt is much easier to make comments in a qmd file than an R file\nYou can better organize your codes with markdown section headers (e.g., #, ##)\nR crashed at a certain chunk and had to restart R and then run all the R codes up to the problematic chunk? Use Run All Chunks Above button (click on the triangle right to the Run button and select the option, or hit option + command + P).\nEasily move between sections and subsection using the navigator at the bottom lower corner of the source pane\n\n\n\n\n\n\n\n\n\n\nRecommended Stucture\n\n\n\nObjective statement\n\nstate objectives\ninput: state input files and datasets\noutput: state output files and datasets\n\nSetup\n\nset the working directory (if necessary)\nload packages\nload functions\n\nActions\n\nAction 1\nAction 2\n.\n.\n.\nAction n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nDynamically edit the “Objective statement” as its objectives, input, and output are likely to change.\n\n\n\n\n\n\nR code readabilitystyler package\n\n\nYou can write R codes however you would like. But, your code may get more readable to you and others who might read your codes by following a style guideline that is accepted by many R users. There are several popular styles of formatting R codes:\n\ntidyverse style\nGoogle’s R Style Guide\n\nExamples\nHere are some examples of the tidyverse style:\n\nhow to name objects\nspacing\nlong lines\npiping\n\n\n\nThe styler package can help you follow partially the tidyverse coding style.\nOnce the package is installed, you can highlight the lines of codes and hit cmd + shift + A for Mac (ctrl + shift + A for Windows) to reformat the codes to conform with the tidyverse style.\nAlternatively, you can click on Addins in the middle of the menu at the top, and select style selection.\n\n\n\n\n\n\n\n\n\n\nRules 1\n\n\n\nplace all the raw datasets (nothing else) in a designated folder inside the Data/Raw folder\ndo not ever override them, you only read them and keep them intact\n\n\n\n\n\n\n\n\n\nRules 2\n\n\n\nwrite R codes to process (transform, merge, etc) the raw data and save all the R codes inside the Code/DataPrep folder\nsave intermediate R objects or datasets in the Data/Processed folder\ndo not mix codes and datasets in a single folder\n\n\n\n\n\n\n\n\n\nRules 3\n\n\n\nwrite R codes to do analysis and save them in Code/Analysis\nsave the results/outputs (regression tables, figures, tables) in the Results folder\n\n\n\n\n\n\n\n\n\nRules 4\n\n\n\nif you are using qmd to write a journal article or report, put them in the Writing folder (same goes for WORD)\nrefer to figures and tables in the Results folder to integrate them in the output document\n\n\n\n\n\n\n\n\n\n\n\nRecommendation\n\n\n\nName files so that you know what purposes they serve for you later\nPlace numbers as prefix to indicate the order in which they should be run\n\n\n\n\n\n\n\n\n\nExample\n\n\n\nData Collection and Preparation (in Code/DataPrep)\n\n01-1-download-weather-data.R\n01-2-download-political-boundary-data.R\n01-3-summarize-data.R\n01-4-merge-data.R\n\nData Analysis and Results Preparation (in Code/Analysis)\n\n02-1-regression-analysis.R\n02-2-gen-figures-tables.R"
  },
  {
    "objectID": "lectures/Chapter-6-HowCodeProject/06-1-code_project_RStudio.html#example-project",
    "href": "lectures/Chapter-6-HowCodeProject/06-1-code_project_RStudio.html#example-project",
    "title": "06-1: How to write R codes, manage Projects, work with RStudio",
    "section": "Example project",
    "text": "Example project\nLet’s take a look at an example project that is designed to be reproducible. First, Clone this repository. We will then look at how the project is organized and developed."
  },
  {
    "objectID": "lectures/Chapter-6-HowCodeProject/06-1-code_project_RStudio.html#code-snippets",
    "href": "lectures/Chapter-6-HowCodeProject/06-1-code_project_RStudio.html#code-snippets",
    "title": "06-1: How to write R codes, manage Projects, work with RStudio",
    "section": "Code snippets",
    "text": "Code snippets\n\nWhat is it?ExamplesHow to add snippetsContext-specificityVariablesMore examples\n\n\nCode snippets are functions that maps sequence of letters and symbols (short) to other sequence of letters and symbols (more complicated and long)\n\nSyntax\nsnippet (combination of letters to invoke)\n  (what you want to print) \n\n\n\n\nImportant\n\n\nYou need a tab before (what you want to print)\n\n\n\n\n\n\n\npiping operatorassignment operator\n\n\n\nsnippet pi\n  %&gt;% \n\nOnce you add this, you can type “pi” and hit tab (and hit enter if there are other competing shortcuts) to have %&gt;% printed.\n\n\n\nsnippet as\n  &lt;- \n\nOnce you add this, you can type “as” and hit tab (and hit enter if there are other competing shortcuts) to have &lt;- printed.\n\n\n\n\n\n\nFollow  Tools  \\(\\rightarrow\\) Global Options  \\(\\rightarrow\\)  Code  \\(\\rightarrow\\)  Edit Snippets , select R tab, and add snippets.\n\n\n\n\n\nTry yourself\n\n\n\nPlace the following\n\nsnippet as\n  &lt;-\n\ntype “as” and hit tab inside an R code chunk\n\n\n\n\n\n\n\n\nWhat is it?Example\n\n\nSuppose you are working on an Quarto document.\n\nYou are in the R context if your cursor is in an R code chunk\nYou are in the Markdown context if your cursor is outside of an R code chunk\n\nSnippets defined in the R (Markdown) tab only works in the R (Markdown) context.\n\n\nThis snippet will let you create an R code chunk with typing “rmc”. Place it in the Markdown tab of the snippets list and hit shift+tab to invoke it.\nsnippet rmc\n  `r ''````{r }\n  ```\nConfirm that this snippet does not work in the R environment.\n\n\n\n\n\n\nsnippet rmc\n  `r ''````{r ${1:chunk_title}}\n    ${2:chunk_content}\n  ```\n$ is used as a special character to denote where the cursor should jump (by hitting tab) after completing each section of a snippet.\n\n\nggplot (scatter plot)\nsnippet gl\n  ggplot(data = ${1:dataset}) +\n  geom_line(aes(y = ${2:y}, x = ${3:x}))\n\nggplot (density plot)\nsnippet gd\n  ggplot(data = ${1:dataset}) +\n  geom_density(aes(x = ${2:x}))"
  },
  {
    "objectID": "lectures/Chapter-6-HowCodeProject/06-1-code_project_RStudio.html#resources",
    "href": "lectures/Chapter-6-HowCodeProject/06-1-code_project_RStudio.html#resources",
    "title": "06-1: How to write R codes, manage Projects, work with RStudio",
    "section": "Resources",
    "text": "Resources\n\nEfficient R Programming\ntidyverse style guide\nstyler github page"
  },
  {
    "objectID": "lectures/Chapter-4-Data-Visualization/04-3-fine-tuning.html#tips-to-make-the-most-of-the-lecture-notes",
    "href": "lectures/Chapter-4-Data-Visualization/04-3-fine-tuning.html#tips-to-make-the-most-of-the-lecture-notes",
    "title": "04-3: Data visualization with ggplot2: Fine Tuning",
    "section": "Tips to make the most of the lecture notes",
    "text": "Tips to make the most of the lecture notes\n\nInteractive navigation toolsRunning and writing codes\n\n\n\nClick on the three horizontally stacked lines at the bottom left corner of the slide, then you will see table of contents, and you can jump to the section you want\nHit letter “o” on your keyboard and you will have a panel view of all the slides\n\n\n\n\nThe box area with a hint of blue as the background color is where you can write code (hereafter referred to as the “code area”).\nHit the “Run Code” button to execute all the code inside the code area.\nYou can evaluate (run) code selectively by highlighting the parts you want to run and hitting Command + Enter for Mac (Ctrl + Enter for Windows).\nIf you want to run the codes on your computer, you can first click on the icon with two sheets of paper stacked on top of each other (top right corner of the code chunk), which copies the code in the code area. You can then paste it onto your computer.\nYou can click on the reload button (top right corner of the code chunk, left to the copy button) to revert back to the original code.\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-4-Data-Visualization/04-3-fine-tuning.html#make-your-figures-presentable-to-others-1",
    "href": "lectures/Chapter-4-Data-Visualization/04-3-fine-tuning.html#make-your-figures-presentable-to-others-1",
    "title": "04-3: Data visualization with ggplot2: Fine Tuning",
    "section": "Make your figures presentable to others",
    "text": "Make your figures presentable to others\n\nMotivationtwo types of operationscontent-alteringtheme-alteringNote\n\n\n\nFigures we have created so far cannot be used for formal presentations or publications. They are simply too crude.\nWe need fine-tune raw figures before they are publishable.\nYou can control virtually every element of a figure under the ggplot2 framework.\nTake a look at here for the complete list of options you can use to modify the theme of figures\n\n\n\n\n\nKey\n\n\nThe most important thing is actually to know which part of a figure a theme option refers to (e.g., axis.text)\n\n\n\n\n\n\nTwo types of operations\nOperations to make your figures presentable can be categorized into two types:\n\nContent-altering\nTheme-altering\n\n\nExamples\nFor the y-axis title,\n\nThe axis title text itself (say “Corn Yield (bu/acre)”) falls under the content category.\nThe position of or the font size of the axis-title fall under the theme category\n\nThe content itself does not change when theme is altered.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nOriginal\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAltered\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\nOriginal\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAltered\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nDistinctions between the two types of actions are not always clear\nBut, typically, you use\n\nscale_*() function series to alter contents\ntheme() function to alter the theme\n\nNote that there are shorthand convenience functions to alter figure contents for commonly altered parts of figures"
  },
  {
    "objectID": "lectures/Chapter-4-Data-Visualization/04-3-fine-tuning.html#axes-content",
    "href": "lectures/Chapter-4-Data-Visualization/04-3-fine-tuning.html#axes-content",
    "title": "04-3: Data visualization with ggplot2: Fine Tuning",
    "section": "Axes content",
    "text": "Axes content\n\nPreparationHowaxis titlelimitbreaks and labelsExercise\n\n\nWe are going to build on this figure in this section:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nWe can use\n\nscale_x_discrete()/scale_x_continuous() for x-axis\nscale_y_discrete()/scale_y_continuous() for y-axis\n\nto control the following elements of axes:\n\nname: an axis title\nlimit: the range of an axis\nbreaks: axis ticks positions\nlabel: axis texts at ticks\n\n\n\n\nNote\n\n\n\nWe use scale_x_discrete() if x is a discrete variable (not numeric) and scale_x_continuous() if x is a continuous variable (numeric).\nThe same applies for y.\n\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nOr just this,\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nOr just,\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nOr,\nYou can filter the data first and then use the filtered data.\n\n\n\nbreaks: determines where the ticks are located\nlabels: defines the texts at the ticks\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nInstructionExercise 1Exercise 2\n\n\nRun the following code to create gg_delay, which you will build on.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nChange the axes content to create the figure on the right using scale_x_continuous() and scale_y_continuous().\nHere are the list of changes you need to make:\n\nx-axis\n\nchange the x-axis title to “Month”\nchange the limit of the x-axis title to 4 through 8\nchange the the breaks and their labels of the x-axis ticks (breaks) to 4 through 8\n\ny-axis\n\nchange the y-axis title to “Average Arrival Delay (minutes)”\nchange the limit of the y-axis title to 0 through 25\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nCode\ngg_delay + \n  scale_x_continuous(\n    name = \"Month\",\n    limit = c(4, 8),\n    breaks = 4:8\n  ) +\n  scale_y_continuous(\n    name = \"Average Arrival Delay (minutes)\",\n    limit = c(0, 25)\n  )\n\n\n\n\n\n\n\n\n\nChange the axes content to create the figure on the right. But, use scale_x_continuous() only for changing the x-axis breaks.\nHere are the list of changes you need to make:\n\nx-axis\n\nchange the x-axis title to “Month”\nchange the limit of the x-axis title to 4 through 8\nchange the the breaks and their labels of the x-axis ticks (breaks) to 4 through 8\n\ny-axis\n\nchange the y-axis title to “Average Arrival Delay (minutes)”\nchange the limit of the y-axis title to 0 through 25\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nCode\ngg_delay +\n  scale_x_continuous(\n    name = \"Month\",\n    limit = c(4, 8),\n    breaks = 4:8\n  ) +\n  scale_y_continuous(\n    name = \"Average Arrival Delay (minutes)\",\n    limit = c(0, 25)\n  )"
  },
  {
    "objectID": "lectures/Chapter-4-Data-Visualization/04-3-fine-tuning.html#legends-content",
    "href": "lectures/Chapter-4-Data-Visualization/04-3-fine-tuning.html#legends-content",
    "title": "04-3: Data visualization with ggplot2: Fine Tuning",
    "section": "Legends content",
    "text": "Legends content\n\nPreparationTitleFill colorTitle positionwrappingExercise\n\n\nWe are going to build on this figure in this section:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nInstructionExercise\n\n\nRun the following code to create gg_delay, which you will build on.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nChange the legend contents to create the figure on the right. Using scale_*_brewer(). You need to identify what goes into * in scale_*_brewer().\nHere are the list of changes you need to make:\n\nchange the legend title to “Airports in NY”\nchange the the legend title position to “bottom”\nchange the legend items to be spread in 3 columns\nchange the color palette to Set2\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nCode\ngg_delay + \n  scale_color_brewer(\n    name = \"Airports in NY\",\n    palette = \"Set2\",\n    guide = guide_legend(\n      title.position = \"bottom\",\n      ncol = 3\n    )\n  )"
  },
  {
    "objectID": "lectures/Chapter-4-Data-Visualization/04-3-fine-tuning.html#theme",
    "href": "lectures/Chapter-4-Data-Visualization/04-3-fine-tuning.html#theme",
    "title": "04-3: Data visualization with ggplot2: Fine Tuning",
    "section": "Theme",
    "text": "Theme\n\nNaming rulesCommon functions\n\n\nWhen specifying the theme of figure elements, it is good to know the naming convention of figure elements:\nFor example:\n\naxis.title\n\nThis refers to the title of both x- and y-axis. Any aesthetic theme you apply to this element will be reflected on the title of both x- and y-axis.\n\naxis.title.x\n\nThis refers to the title of only x-axis. Any aesthetic theme you apply to this element will be reflected on the title of only x-axis.\nSo, basically appending .name narrows down the scope of the figure elements the element name refers to.\n\n\nThere are common functions we use to specify the aesthetic nature of figure elements based on the type of the elements:\n\n\nelement_text(): for text elements like axis.text, axis.title, legend.text\n\nInside the function, you specify things like font size, font family, angle, etc.\n\nelement_rect(): for box-like elements like legend.background, plot.background, strip.background\n\nInside the function, you specify things like font background color, border line color, etc.\n\nelement_line(): for line elements like panel.grid.major, axis.line.x\n\nInside the function, you specify things like line thickness, line color, etc.\n\nelement_blank(): any components\n\nIt makes the specified component disappear.\n\nunit(): for attributes of figure elements like legend.key.width, legend.box.spacing"
  },
  {
    "objectID": "lectures/Chapter-4-Data-Visualization/04-3-fine-tuning.html#axis-theme",
    "href": "lectures/Chapter-4-Data-Visualization/04-3-fine-tuning.html#axis-theme",
    "title": "04-3: Data visualization with ggplot2: Fine Tuning",
    "section": "Axis theme",
    "text": "Axis theme\n\nPreparationtitle and textlineticks\n\n\nWe are going to build on this figure in this section:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-4-Data-Visualization/04-3-fine-tuning.html#legends-theme",
    "href": "lectures/Chapter-4-Data-Visualization/04-3-fine-tuning.html#legends-theme",
    "title": "04-3: Data visualization with ggplot2: Fine Tuning",
    "section": "Legends theme",
    "text": "Legends theme\n\nHowPreparationpositionkeyfontbackground\n\n\nWe can use them() to change the aesthetics of legends. Some of the elements include\n\ntitle\nposition\nkey\ntext\ndirection\nbackground\n\nSee here for the full list of options related to legends.\nWe will discuss how to change the color scheme of legends later in much detail.\n\n\nThis is what we will build on:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-4-Data-Visualization/04-3-fine-tuning.html#pre-made-and-customized-themes",
    "href": "lectures/Chapter-4-Data-Visualization/04-3-fine-tuning.html#pre-made-and-customized-themes",
    "title": "04-3: Data visualization with ggplot2: Fine Tuning",
    "section": "Pre-made and customized themes",
    "text": "Pre-made and customized themes\n\nInstructionExamplesBuild on a pre-made themeCustom theme\n\n\nThere are a bunch of pre-made themes from the ggplot2 and ggthemes packages that can quickly change how figures look.\nInstall and library ggthemes package first:\n\n#--- install ---#\ninstall.packages(\"ggthemes\") \n\n#--- library ---#\nlibrary(\"ggthemes\") \n\n\nSee the full list of pre-made themes here.\n\n\n\nbwvoidstatagdocseconomistexcel\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\nHowPreparationminor gridmajor grid\n\n\nYou can simply override parts of the pre-made theme by adding theme options like this (see more on this here):\n\ng_axis +\n  theme_bw() +\n  theme(\n    panel.grid.minor = element_blank()\n  )\n\n\nSo, you can pick the pre-made theme that looks the closest to what you would like, and then add on theme elements to the part you do not like.\n\n\nWe will build from this figure:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nSee here for the line types available.\n\n\n\n\n\n\n\nIntroductionComparetheme_set()\n\n\nYou can create your own theme, save it, and then use it later.\nHere, I am creating my own theme off of theme_economist(), where axis titles and major panel grids are absent.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nYou can add my_theme like below just like a regular pre-made theme:\n\nggplot(data = weather) +\n  geom_boxplot(\n    aes(y = temp, x = factor(month))\n  ) +\n  my_theme\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\nIf you would like to apply your theme to all the figures you generate, then use theme_set() like below:\n\ntheme_set(my_theme)\n\nAfter this, all of your figures will follow my_theme."
  },
  {
    "objectID": "lectures/Chapter-4-Data-Visualization/04-3-fine-tuning.html#faceted-figure-theme",
    "href": "lectures/Chapter-4-Data-Visualization/04-3-fine-tuning.html#faceted-figure-theme",
    "title": "04-3: Data visualization with ggplot2: Fine Tuning",
    "section": "Faceted figure theme",
    "text": "Faceted figure theme\n\nInstructionPreparationtextbackgroundpanel spacing\n\n\nFaceted figures have strip elements that do no exist for non-faceted figures like\n\nstrip.background\nstrip.placement\nstrip.text\npanel.spacing\n\nWe learn how to modify these elements.\n\n\nCreate a dataset for this section:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nCreate a faceted figure we will build on:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-4-Data-Visualization/04-3-fine-tuning.html#more-flexible-color-options-with-hex",
    "href": "lectures/Chapter-4-Data-Visualization/04-3-fine-tuning.html#more-flexible-color-options-with-hex",
    "title": "04-3: Data visualization with ggplot2: Fine Tuning",
    "section": "More flexible color options with HEX",
    "text": "More flexible color options with HEX\n\nInstructionExample\n\n\nInstead of naming the color you want to use, you can use HEX color codes instead.\n\n\n\n\nDirection\n\n\n\nVisit here\nClick on any color you like\nThen you will see two sets of color gradients (thicker and lighter from the color you picked)\nPick the color you like from the color bar and copy the HEX color code beneath the color you picked\n\n\n\n\n\nYou could alternatively use the RGB codes, but I do not see any reasons to do so because the use of HEX codes is sufficient.\n\n\nYou can use HEX color codes for any color-related elements in a figure.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nTry\n\n\nPick a Hex color and try it yourself."
  },
  {
    "objectID": "lectures/Chapter-4-Data-Visualization/04-3-fine-tuning.html#color-scale",
    "href": "lectures/Chapter-4-Data-Visualization/04-3-fine-tuning.html#color-scale",
    "title": "04-3: Data visualization with ggplot2: Fine Tuning",
    "section": "Color scale",
    "text": "Color scale\n\nIntro 1Intro 2\n\n\nThe choice of color schemes for your figures are very important (not so much for academic journals …)\nWe use scale_A_B() functions to for color specification:\n\nA is the name of aesthetic (color or fill)\nB is the type of color specification method\n\n\n\nFor example, consider the following code:\nSince it is the color aesthetic that we want to work on, A = color.\nThere are many options for B. Indeed, there are so many that, it gets confusing!\n\nscale_color_brewer() (discrete)\nscale_color_distiller() (continuous)\nscale_color_viridis_d() (discrete)\nscale_color_viridis_c() (continuous)\nscale_color_continuous() (continuous)\nscale_color_discrete() (discrete)\nscale_color_hue() (discrete)\n\nOne thing to remember is that you need to be aware of whether the aesthetic variable (here, corn_yield) is numeric or not as that determines acceptable type of B."
  },
  {
    "objectID": "lectures/Chapter-4-Data-Visualization/04-3-fine-tuning.html#viridis",
    "href": "lectures/Chapter-4-Data-Visualization/04-3-fine-tuning.html#viridis",
    "title": "04-3: Data visualization with ggplot2: Fine Tuning",
    "section": "Viridis",
    "text": "Viridis\n\nInstructiontypesExample 1Example 2reverse\n\n\nWe have four scale functions for Viridis color map:\n\nscale_color_viridis_c(): for color aesthetic with a continuous variable\nscale_color_viridis_d(): for color aesthetic with a discrete variable\nscale_fill_viridis_c(): for fill aesthetic with a continuous variable\nscale_fill_viridis_d(): for fill aesthetic with a discrete variable\n\nThere are five color scheme types under the Viridis color map:\n\nmagma\ninferno\nplasma\nviridis\nciviris\n\nYou can use option to specify which one of them you want to use inside the scale functions.\nThese color schemes are color-blind sage.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-4-Data-Visualization/04-3-fine-tuning.html#rcolorbrewer",
    "href": "lectures/Chapter-4-Data-Visualization/04-3-fine-tuning.html#rcolorbrewer",
    "title": "04-3: Data visualization with ggplot2: Fine Tuning",
    "section": "RColorBrewer",
    "text": "RColorBrewer\n\nInstructiondifferent types of setsExample 1Example 2\n\n\nRColorBrewer package provides a number of color palettes of three types:\n\nsequential: suitable for a variable that has ordinal meaning (e.g., temperature, precipitation)\ndiverging: suitable for variables that take both negative and positive values (e.g., changes in groundwater level)\nqualitative: suitable for qualitative or categorical variable\n\nWe use two types of scale functions for the palettes:\n\nscale_A_brewer(): for discrete aesthetic variable\nscale_A_distiller(): for continuous aesthetic variable\n\n\n\n\nsequentialdivergingqualitative\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nGenerate a dataset for visualization:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nCreate a figure:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-4-Data-Visualization/04-3-fine-tuning.html#set-color-scale-manually",
    "href": "lectures/Chapter-4-Data-Visualization/04-3-fine-tuning.html#set-color-scale-manually",
    "title": "04-3: Data visualization with ggplot2: Fine Tuning",
    "section": "Set color scale manually",
    "text": "Set color scale manually\n\ndiscretecontinuous\n\n\n\nInstructionExample\n\n\nSometimes, you just want to pick colors yourself. In that case, you can use\n\nscale_color_manual()\nscale_fill_manual()\n\nInside the scale_*_manual() function, you provide a named vector where a sequence of group names and their corresponding colors are specified to the scale function via the values option.\nFor example, consider the box plot of corn yield for four states: Colorado, Kansas, Nebraska, and South Dakota. Then, a sample named vector looks like this:\n\n(\ncols &lt;- c(\"Colorado\" = \"red\", \"Nebraska\" = \"blue\", \"Kansas\" = \"orange\", \"South Dakota\" = \"#ff0080\")\n)\n\n\nNow that a named vector is created, you can do the following to impose the color scheme you just defined.\n\nscale_fill_manual(values = cols)\n\n\n\nDefine a named color vector:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nCreate a figure:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\nInstructionExample\n\n\nHow\nYou can use scale_*_gradientn() to create your own continuous color scale.\n\nSyntax\n\n`scale_*_gradientn(colors, values)`\n\n\ncolors: a vector of colors\nvalues: a vector of numeric numbers ranging from 0 to 1\nlimits: define the lower and upper bounds of the scale bar\n\nnth value of colors is used for the interval defined by nth and n+1th values in values.\n\n\nCreate a figure:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nIn this example, green is dominant in the color bar because the interval [0.2, 0.9] is for \"green\" in colors, where the interval represents [130, 235] ([100 + (250-100), 100 + (250-100)])."
  },
  {
    "objectID": "lectures/Chapter-4-Data-Visualization/04-1-data-visualization-basics.html#tips-to-make-the-most-of-the-lecture-notes",
    "href": "lectures/Chapter-4-Data-Visualization/04-1-data-visualization-basics.html#tips-to-make-the-most-of-the-lecture-notes",
    "title": "04-1: Data Visualization with ggplot2: Basics",
    "section": "Tips to make the most of the lecture notes",
    "text": "Tips to make the most of the lecture notes\n\nInteractive navigation toolsRunning and writing codes\n\n\n\nClick on the three horizontally stacked lines at the bottom left corner of the slide, then you will see table of contents, and you can jump to the section you want\nHit letter “o” on your keyboard and you will have a panel view of all the slides\n\n\n\n\nThe box area with a hint of blue as the background color is where you can write code (hereafter referred to as the “code area”).\nHit the “Run Code” button to execute all the code inside the code area.\nYou can evaluate (run) code selectively by highlighting the parts you want to run and hitting Command + Enter for Mac (Ctrl + Enter for Windows).\nIf you want to run the codes on your computer, you can first click on the icon with two sheets of paper stacked on top of each other (top right corner of the code chunk), which copies the code in the code area. You can then paste it onto your computer.\nYou can click on the reload button (top right corner of the code chunk, left to the copy button) to revert back to the original code."
  },
  {
    "objectID": "lectures/Chapter-4-Data-Visualization/04-1-data-visualization-basics.html#preparation",
    "href": "lectures/Chapter-4-Data-Visualization/04-1-data-visualization-basics.html#preparation",
    "title": "04-1: Data Visualization with ggplot2: Basics",
    "section": "Preparation",
    "text": "Preparation\n\nggplot2 packageDataset\n\n\nInstall the package if you have not.\n\ninstall.packages(\"ggplot2\")\n\n\nOr, when you load the tidyverse package, it automatically loads it.\n\n#--- load ggplot2 along with others in the tidyverse package ---#\nlibrary(tidyverse)\n\n#--- or ---#\nlibrary(ggplot2)\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nDataVariable DefinitionsDerived data\n\n\nWe use county_yield, which records corn and soybean yield data by county over multiple years.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nsoy_yield: soybean yield (bu/acre)\ncorn_yield: corn yield (bu/acre)\nd0_5_9: ratio of weeks under drought severity of 0 from May to September\nd1_5_9: ~ drought severity of 1 from May to September\n\nd2_5_9: ~ drought severity of 2 from May to September\n\nd3_5_9: ~ drought severity of 3 from May to September\n\nd4_5_9: ~ drought severity of 4 from May to September\n\n\n\nWe also use the derivative of county_yield, which records average corn yield by year.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-4-Data-Visualization/04-1-data-visualization-basics.html#ggplot2-basics-1",
    "href": "lectures/Chapter-4-Data-Visualization/04-1-data-visualization-basics.html#ggplot2-basics-1",
    "title": "04-1: Data Visualization with ggplot2: Basics",
    "section": "ggplot2 basics",
    "text": "ggplot2 basics\n\nStep 1Step 2aes()Summary\n\n\nThe very first job you need to do in creating a figure using the ggplot2 package is to let R know the dataset you are trying to visualize, which can be done using ggplot() like below:\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWhen you create a figure using the ggplot2 package, ggplot() is always the function you call first.\nLet’s now see what is inside g_fig:\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWell, it’s blank. Obviously, g_fig still does not have enough information to create any kind of figures. You have not told R anything specific about how you would like to use the information in the dataset.\n\n\nThe next thing you need to do is tell g_fig what type of figure you want by geom_*() functions. For example, we use geom_point() to create a scatter plot. To create a scatter plot, R needs to know which variables should be on the y-axis and x-axis. These information can be passed to g_fig by the following code:\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nHere,\n\ngeom_point() was added to g_fig to declare that you want a scatter plot\naes(x = d3_5_9, y = corn_yield) inside geom_point() tells R that you want to create a scatter plot where you have d3_5_9 on the x-axis and corn_yield on the y-axis\n\nThis is what g_fig_scatter looks:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nWhat does it do?If not in aes()?\n\n\nGoing back to the code,\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nNote that x = d3_5_9, y = corn_yield are inside aes().\n\n\n\n\nImportant\n\n\naes() is used to make the aesthetic of the figure to be a function of variables in the dataset that you told ggplot to use (here, county_yield).\n\n\n\n\naes(x = d3_5_9, y = corn_yield) is telling ggplot to use d3_5_9 and corn_yield variables in the county_yield dataset for the x-axis and y-axis, respectively.\n\n\nIf you do not have x = d3_5_9, y = corn_yield inside aes(), R is going to look for d3_5_9 and corn_yield themselves (but not in county_yield), which you have not defined.\nTry:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\nggplot(data = dataset) to initiate the process of creating a figure\nadd geom_*() to declare what kind of figure you would like to make\nspecify what variables in the dataset to use and how they are used inside aes()\nplace the aes() you defined above in the geom_*() you specified above"
  },
  {
    "objectID": "lectures/Chapter-4-Data-Visualization/04-1-data-visualization-basics.html#different-types-of-figures-1",
    "href": "lectures/Chapter-4-Data-Visualization/04-1-data-visualization-basics.html#different-types-of-figures-1",
    "title": "04-1: Data Visualization with ggplot2: Basics",
    "section": "Different types of figures",
    "text": "Different types of figures\n\nFigure typesHistogramDensity PlotLine plotBoxplotBar plot\n\n\n\nggplot2 lets you create lots of different kinds of figures via various geom_*() functions.\n\ngeom_histogram()/geom_density()\ngeom_line()\ngeom_boxplot()\ngeom_bar()\n\nHow to specify aesthetics vary by geom_*().\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nNote\n\n\ngeom_histogram() only needs x.\n\n\n\n\n\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nNote\n\n\ngeom_density() only needs x.\n\n\n\n\n\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nNote\n\n\ngeom_line() needs x and y.\n\n\n\n\n\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nNote\n\n\n\ngeom_boxplot() needs x and y.\nWhy factor(year)?\n\n\n\n\n\n\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nNote\n\n\ngeom_bar() needs x and y"
  },
  {
    "objectID": "lectures/Chapter-4-Data-Visualization/04-1-data-visualization-basics.html#modifying-how-figures-look",
    "href": "lectures/Chapter-4-Data-Visualization/04-1-data-visualization-basics.html#modifying-how-figures-look",
    "title": "04-1: Data Visualization with ggplot2: Basics",
    "section": "Modifying how figures look",
    "text": "Modifying how figures look\n\nIntroductionscatter plothistogramboxplotline plot\n\n\nAll the elements in the figures we have created so far are in black and white.\nYou can change how figure elements look by providing options inside geom_*().\nHere are the list of options to control the aesthetics of figures:\n\nfill\ncolor\nsize\nshape\nlinetype\n\nElements of figures that you can modify differ by geom types\nThe same element name can mean different things based on geom types\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-4-Data-Visualization/04-1-data-visualization-basics.html#exercises",
    "href": "lectures/Chapter-4-Data-Visualization/04-1-data-visualization-basics.html#exercises",
    "title": "04-1: Data Visualization with ggplot2: Basics",
    "section": "Exercises",
    "text": "Exercises\n\nInstructionExercise 1Exercise 2\n\n\nThis exercise use the diamonds dataset from the ggplot2() package. First, load the dataset and extract observations with Premium cut whose color is one of E, I, and F:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nUsing carat and price variables from premium, generate the figure below:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nCode\nggplot(data = premium) +\n  geom_point(aes(x = carat, y = price), color = \"red\")\n\n\n\n\n\n\n\nUsing price variables from premium, generate a histogram of price shown below:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nCode\nggplot(data = premium) +\n  geom_histogram(aes(x = price), fill = \"white\", color = \"blue\")"
  },
  {
    "objectID": "lectures/Chapter-4-Data-Visualization/04-1-data-visualization-basics.html#other-supplementary-geom_s-1",
    "href": "lectures/Chapter-4-Data-Visualization/04-1-data-visualization-basics.html#other-supplementary-geom_s-1",
    "title": "04-1: Data Visualization with ggplot2: Basics",
    "section": "Other supplementary geom_*()s",
    "text": "Other supplementary geom_*()s\n\ngeom_*()vline and hlineablinesmoothribbontextannotate\n\n\nHere are the list of useful geom_.\n\ngeom_vline(): draw a vertical line\ngeom_hline(): draw a horizontal line\ngeom_abline(): draw a line with the specified intercept and slope\ngeom_smooth(): draw an OLS-estimated regression line (other regression methods available)\ngeom_ribbon(): create a shaded area\ngeom_text() and annotate(): add texts in the figure\n\nWe will use g_fig_scatter to illustrate how these functions work.\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nNote\n\n\n\nxintercept in geom_vline: where the vertical line is placed\nyintercept in geom_hline: where the horizontal line is placed\n\n\n\n\n\n\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nNote\n\n\n\\[y = a + b\\times x\\]\n\nintercept: \\(a\\)\nslope: \\(b\\)\n\n\n\n\n\n\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nNote\n\n\nAlso try adding method = \"lm\".\n\n\n\n\n\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nNote\n\n\n\nymin: lower bound of the ribbon\nymax: upper bound of the ribbon\n\nIt is useful when drawing confidence intervals.\n\n\n\n\n\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nNote\n\n\n\nx, y: position of where texts are placed\nlabel: variable to print\n\n\n\n\n\n\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nNote\n\n\n\nx: where on x-axis\ny: where on y-axis\nlabel: text to print (break the line)\nsize: font size"
  },
  {
    "objectID": "lectures/Chapter-3-DataWrangling/03-2-data-wrangling-dplyr.html#tips-to-make-the-most-of-the-lecture-notes",
    "href": "lectures/Chapter-3-DataWrangling/03-2-data-wrangling-dplyr.html#tips-to-make-the-most-of-the-lecture-notes",
    "title": "03-2: Data wrangling with tidyverse: The Basics",
    "section": "Tips to make the most of the lecture notes",
    "text": "Tips to make the most of the lecture notes\n\nInteractive navigation toolsRunning and writing codes\n\n\n\nClick on the three horizontally stacked lines at the bottom left corner of the slide, then you will see table of contents, and you can jump to the section you want\nHit letter “o” on your keyboard and you will have a panel view of all the slides\n\n\n\n\nThe box area with a hint of blue as the background color is where you can write code (hereafter referred to as the “code area”).\nHit the “Run Code” button to execute all the code inside the code area.\nYou can evaluate (run) code selectively by highlighting the parts you want to run and hitting Command + Enter for Mac (Ctrl + Enter for Windows).\nIf you want to run the codes on your computer, you can first click on the icon with two sheets of paper stacked on top of each other (top right corner of the code chunk), which copies the code in the code area. You can then paste it onto your computer.\nYou can click on the reload button (top right corner of the code chunk, left to the copy button) to revert back to the original code."
  },
  {
    "objectID": "lectures/Chapter-3-DataWrangling/03-2-data-wrangling-dplyr.html#tidyverse-package",
    "href": "lectures/Chapter-3-DataWrangling/03-2-data-wrangling-dplyr.html#tidyverse-package",
    "title": "03-2: Data wrangling with tidyverse: The Basics",
    "section": "tidyverse package",
    "text": "tidyverse package\n\nWhat is it?PreparationConflicts?\n\n\n\nThe tidyverse is a package of a collection of packages. Some of the packages included are\n\nreadr: read datasets in various formats\ndplyr: manipulate and merge datasets\ntidyr: reshape datasets\nggplot2: data visualization\nstringr: character string operations\n\nThese packages are by no means the only ways to do the operations we will learn today. However, we learn these packages because they are easy to use.\nThey are also easy to learn and get help as they are extremely popular and very well-documented. Go to the tidyverse website, and click on the icon of the package you would like to learn, then you will have a nice documentation of the packages.\nYou could also google the package name, and you will see bunch of introductions/tutorials.\n\n\n\nInstall the package if you have not.\n\ninstall.packages(\"tidyverse\")\n\n\nWhen you load the tidyverse package, it automatically loads many of the packages contained in it.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4          ✔ readr     2.1.5     \n✔ forcats   1.0.0          ✔ stringr   1.5.1     \n✔ ggplot2   3.5.2.9002     ✔ tibble    3.3.0     \n✔ lubridate 1.9.4          ✔ tidyr     1.3.1     \n✔ purrr     1.1.0          \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\n\nSometimes packages share the same functions names.\nWhen those packages are loaded, there are function name conflicts where the function from the package loaded later masks the function from the other package."
  },
  {
    "objectID": "lectures/Chapter-3-DataWrangling/03-2-data-wrangling-dplyr.html#data.frame-and-tibble-1",
    "href": "lectures/Chapter-3-DataWrangling/03-2-data-wrangling-dplyr.html#data.frame-and-tibble-1",
    "title": "03-2: Data wrangling with tidyverse: The Basics",
    "section": "data.frame and tibble",
    "text": "data.frame and tibble\n\nWhat are they?ObjectivesPreparation\n\n\ndata.frame\n\nThe traditional (most common) class of two-dimensional data (rows and columns) supported by R.\n\n\ntibble\n\nA relatively newer class of two-dimensional data that brings minor enhancements over data.frame.\ntibble is defined by the tibble package, which is part of the tidyverse package.\n\n\n\n\nLearn basic operations on data.frame and tibble\nHighlight some differences between the two (They are almost interchangeable, and you do no need to pay much attention to which class of data you are dealing with)\n\n\n\nWe use mtcars dataset. It is readily available to you.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nYou can convert a data.frame into a tibble using as_tibble():\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nmtcars is a tibble (and also a data.frame).\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-3-DataWrangling/03-2-data-wrangling-dplyr.html#display-method",
    "href": "lectures/Chapter-3-DataWrangling/03-2-data-wrangling-dplyr.html#display-method",
    "title": "03-2: Data wrangling with tidyverse: The Basics",
    "section": "display method",
    "text": "display method\n\ndata.frametibble\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-3-DataWrangling/03-2-data-wrangling-dplyr.html#accessing-parts-of-the-data",
    "href": "lectures/Chapter-3-DataWrangling/03-2-data-wrangling-dplyr.html#accessing-parts-of-the-data",
    "title": "03-2: Data wrangling with tidyverse: The Basics",
    "section": "Accessing parts of the data",
    "text": "Accessing parts of the data\n\nNumerical indexVariable namesUsing $\n\n\nSubsetting a data.frame works in a very similar manner as a matrix:\n\nmatrix[rows of interest, columns of interest]\n\nExample:\n2nd to 8th rows, the 3rd and 5th columns\n\n\ndata.frame\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\ntibble\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\nBut, subsetting a data.frame using numerical indexes are not recommended because it is not immediately clear to you (or your collaborators who might look at the code) what you intended to do with the code.\nInstead, the following is better:\n\ndata[, c(\"variable 1\", \"variable 2\", ...)]\n\nExamples:\n\n\ndata.frame\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\ntibble\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\nAlternatively, to access a column (variable) from a dataset, you can use $ like below (remember? A data.frame is a special kind of list).\nExamples:\n\n\ndata.frame\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\ntibble\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-3-DataWrangling/03-2-data-wrangling-dplyr.html#data-preparation",
    "href": "lectures/Chapter-3-DataWrangling/03-2-data-wrangling-dplyr.html#data-preparation",
    "title": "03-2: Data wrangling with tidyverse: The Basics",
    "section": "Data Preparation",
    "text": "Data Preparation\n\nflightsflights_mini\n\n\nWe use flights, which is from the nycflights13 package.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nWe also use flights_mini, which is created by running the code below.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nYou do not have to understand the code just yet. You will, once you have completed the lecture. Just inspect the data and familiarize yourself with it."
  },
  {
    "objectID": "lectures/Chapter-3-DataWrangling/03-2-data-wrangling-dplyr.html#sec-piping",
    "href": "lectures/Chapter-3-DataWrangling/03-2-data-wrangling-dplyr.html#sec-piping",
    "title": "03-2: Data wrangling with tidyverse: The Basics",
    "section": "Piping with %>%",
    "text": "Piping with %&gt;%\n\nIntroductionMore generallyRefer to the preceding objectChainingWhy?\n\n\nLet f() be a function and x is an R object that f() accepts. Then,\nx %&gt;% f() is the same as f(x)\nTry the following codes and confirm they return the same results:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nNote\n\n\nThe piping operator %&gt;% is actually from the magrittr package. But, when you load the dplyr package, it is automatically loaded as well.\n\n\n\n\n\nSuppose you have more than one arguments to the function like this:\n\nf(x1, x2, option 1, option 2)\n\n\nThen,\n\nz %&gt;% f(x2, option 1, option 2)\n\n\nis equivalent to\n\nf(z, x2, option 1, option 2) \n\n\n\n\n\n\n\nImportant\n\n\nThat is, in general, an R object that precedes the piping operator (%&gt;%) becomes the  first  argument of the function that comes after the piping operator.\n\n\n\n\n\n\n\n\n\n\nWhat if the object before the piping operator is not the first argument of the subsequent function?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nThis does not work:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nbecause the above is equivalent to\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nYou can refer to the preceding object by . like this:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nYou can keep piping like this:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nImportant\n\n\nThe object created by all the codes preceding the piping operator is passed down to the function after the piping operator.\n\n\n\nFor example, relocate(dep_time) receives as its first argument the outcome of the evaluation of the highlighted parts of the code below.\n\n\n\nSetupAlternative 1Alternative 2 (with piping)\n\n\nConsider the following sequence of actions:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nNotice that you generated two intermediate datasets (a1 and a2) to obtain the dataset you wanted (a3).\nThese intermediate objects are generated only for the purpose of generating the final dataset.\nIt is easy to imagine that you will soon have lots of unnecessary intermediate objects on R.\n\n\n\nAlternatively, you can do the following:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nThis does not create any intermediate objects unlike the first example.\nHowever, it can be difficult to understand the code because the order of execution is the reverse of the order in which the functions are written when you read the code from left to right.\n\n\n\nTaking advantage of the piping operator,\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nThis is much easier to read as the order of execution is the same as the order in which the functions are written."
  },
  {
    "objectID": "lectures/Chapter-3-DataWrangling/03-2-data-wrangling-dplyr.html#sec-dplyr-wrangle",
    "href": "lectures/Chapter-3-DataWrangling/03-2-data-wrangling-dplyr.html#sec-dplyr-wrangle",
    "title": "03-2: Data wrangling with tidyverse: The Basics",
    "section": "Data wrangling with the dplyr package",
    "text": "Data wrangling with the dplyr package\n\nWhat is it?filterselectrelocatemutaterenamearrangeImportant\n\n\nThe dplyr packages provides useful functions to transform data.\n\nfilter(): select rows that satisfy user-specified conditions\nselect(): keep (remove) only the variables the user specified\nmutate(): create (over-write) a variable based on user-specified formula\nrename(): rename variables\narrange(): sort by variables specified by the user\n\n\n\n\nNote\n\n\nThere are other useful functions. But, we limit our attention to only the above as they are sufficient to keep up with the main lectures.\n\n\n\n\n\n\nIntroductionExamplesmultiple conditionsExercises\n\n\ndplyr::filter() subsets data row-wise using logical conditions based on variables.\n\nSyntax\n\n#--- syntax ---# \ndplyr::filter(dataset, condition 1, ..., condition K)\n\n\n\nObservations where month is 4:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nObservations where month is NOT 4:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nObservations where month is less than 4:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nand (&)or (|)in any of (%in%)\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nThis is very useful when you have many values to check.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\nExercise 1Exercise 2Exercise 3\n\n\nFind the observations in June and July.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAnswer\n\n\nCode\ndplyr::filter(flights_mini, month %in% c(6, 7))\n\n\n\n\nFind the observations in January, April, July, September, and December.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAnswer\n\n\nCode\ndplyr::filter(flights_mini, month %in% c(1, 4, 6, 9, 12))\n\n\n\n\nFind the observations by carrier “US”\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAnswer\n\n\nCode\ndplyr::filter(flights_mini, carrier == \"US\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nIntroductionExamplesExercises\n\n\nYou can select a subset of variables using dplyr::select().\n\nSyntax\n\ndplyr::select(dataset, variable 1, variable 2, ...)\n\n\n\n\nIf you want to drop some variables, but want to keep all the other variables, you can take advantage of − operator:\n\nSyntax\n\ndplyr::select(dataset, - variable 1, - variable 2, ...)\n\n\n\nSelect arr_delay:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nSelect month, arr_delay, and dep_delay:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nDeselect (remove) year and month:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nExercise 1Exercise 2\n\n\nSelect all the columns except arr_delay\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAnswer\n\n\nCode\ndplyr::select(flights_mini, - arr_delay)\n\n\n\n\nSelect arr_delay and month\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAnswer\n\n\nCode\ndplyr::select(flights_mini, month, arr_delay)\n\n\n\n\n\n\n\n\n\n\n\n\nYou can use relocate() to change the column order.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nChosen variables come front with the order of the rest of the variable unchanged.\n\n\n\nIntroductionExampleMultiple variablesFunctionSelective mutationExercises\n\n\nYou can use mutate() to create a new variable (or overwrite the existing one) in the dataset:\n\nSyntax\n\ndplyr::mutate(data, new variable name = expression)\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nYou can define multiple variables within a single mutate() function.\nYou can create a new variable based on the variables that have been just created within the same mutate() function.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nYou can apply functions to variables when creating new variables:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nNote\n\n\nThe function you apply has to accept a vector (a variable column).\n\n\n\n\n\nSometimes, you want to to alter the values of a variable for specific rows that satisfy certain conditions.\n\nExampledichotomousmore than two cases\n\n\nSuppose you found out that dep_time for all the flights from JFK was misreported so that dep_time is 10 minutes earlier than the true departure times.\nSo, we would like to add 10 minutes to all the flights by JFK.\nYou can use ifelse() like this:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nSuppose you want to label flights with arr_delay &gt; 0 to be time-loss and time-gain otherwise:\nYou can use ifelse() for defining a dichotomous variable like this:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nThe case_when() function is useful if you have more than two cases.\nSyntax:\n\ncase_when(\n  condition 1 ~ value to assign,\n  condition 2 ~ value to assign,\n  condition 3 ~ value to assign,\n  ...\n)\n\n\nExample:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\nExercise 1Exercise 2\n\n\nFind the mean value of arr_delay in April and May (combined) and define it as a new variable named avg_arr_delay\n\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nCode\nflights_mini %&gt;%\n  filter(month %in% c(4, 5)) %&gt;%\n  mutate(avg_arr_delay = mean(arr_delay, na.rm = TRUE)) %&gt;%\n  relocate(avg_arr_delay)\n\n\n\n\n\n\n\n\nFind the sum of dep_delay in January, February, and December (combined) and define it as a new variable named sum_dep_delay, and then move the variable to the first column of the dataset.\n\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nCode\nflights %&gt;%\n  dplyr::filter(month %in% c(1, 2, 12)) %&gt;%\n  dplyr::mutate(sum_dep_delay = sum(dep_delay, na.rm = TRUE)) %&gt;%\n  dplyr::relocate(sum_dep_delay)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou can rename variables using dplyr::rename().\n\nSyntax\n\nrename(data, new variable name = old variable name, ...)\n\n\nExample\n\n\nRenamed:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nOriginal:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\nYou can use arrange() to reorder rows based on the value of variables.\n\nSyntax\n\n#--- Syntax (NOT RUN) ---#\narrange(flights_mini, variable name)\n\n\n\nExample (ascending)Example (descending)\n\n\nThe default is the ascending order.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nTo arrange in the descending order, you use desc() function:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nNotice that the original data flights_mini was not affected by the dplyr::filter() operations in the previous slides.\nThis is consistent across all the verbs in dplyr. Whatever actions you take, the original data is unaltered.\nTo use the transformed data for later use, you need to assign it to a new object (or overwrite if that is okay):\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-3-DataWrangling/03-2-data-wrangling-dplyr.html#sec-group-operation",
    "href": "lectures/Chapter-3-DataWrangling/03-2-data-wrangling-dplyr.html#sec-group-operation",
    "title": "03-2: Data wrangling with tidyverse: The Basics",
    "section": "Grouped Operations",
    "text": "Grouped Operations\n\nMotivationHowOther summarizing functionsNew variableExercises\n\n\nGroup-wise operations, such as the mean of arrival delay by carrier are very useful to gain an insight into differences across groups.\nThe group_by() function in conjunction with summarize() function does exactly that.\n\nSyntax\n\n#--- group by variables ---#\ngroup_by(dataset, variable to group by, variable to group by, ...)  \n\n#--- summarize ---#\nsummarize(grouped dataset, expression)  \n\n\n\n\nStep 1: groupingStep 2: summarizingPiped\n\n\nYou first use group_by() to set the group for a dataset:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nThere are no apparent differences in flights_carrier from flights_slim. The only thing you did by group_by() was to tell R that whatever we will do to the new dataset is going to be done by group, which is reflected in “Groups” of the printed data.\n\n\nOnce the group is set, we are ready to do some group-wise (by carrier) operations. Let’s now find the means of arr_delay by carrier so we know which carriers perform better than others. We can do so using summarize().\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nUsing the piping operator,\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nYou can apply any functions that work on a vector (a variable)\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nYou can assign the results of the grouped operations to new variables using mutate()\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nExercise 1InstructionExercise 2Exercise 3\n\n\nUsing flights, find the carrier that had the longest average departure delay (dep_delay) during May through August.\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\n\n\nFor the rest of the exercises, we are going to use the weather data for the three airports in NY. First load the weather data and get familiar with the data set.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nFind the daily mean temperature (temp), humidity (humid), wind speed (wind_speed), and precipitation (precip) by the origin of departure. Do not forget to name each daily weather variable.\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nCode\n(\ndaily_weather &lt;- \n  weather %&gt;%\n  dplyr::group_by(origin, month, day) %&gt;%\n  dplyr::summarize(\n    temp = mean(temp),\n    humid = mean(humid),\n    wind_speed = mean(wind_speed),\n    precip = mean(precip)\n  )\n) \n\n\n\n\n\n\n\n\nSubset the daily weather data you obtained in exercise 2 so that it contains weather information only in Nov, Dec, Jan, and Feb for flights that depart from “EWR”.\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nCode\ndaily_weather %&gt;%\n  dplyr::filter(month %in% c(11, 12, 1, 2)) %&gt;%\n  dplyr::filter(origin == \"EWR\")"
  },
  {
    "objectID": "lectures/Chapter-3-DataWrangling/03-2-data-wrangling-dplyr.html#across",
    "href": "lectures/Chapter-3-DataWrangling/03-2-data-wrangling-dplyr.html#across",
    "title": "03-2: Data wrangling with tidyverse: The Basics",
    "section": "across()",
    "text": "across()\n\nWhatSyntax and ExampleCompare\n\n\n\nacross() lets you apply the same operation (function) to multiple columns at the same time.\nIt is used with summarize() and mutate()\nIt is useful when you want to apply the same function to many variables.\n\n\n\nSyntax\n\nacross(which variables to apply the function, function, options to the function)\n\nExamples\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNote: na.rm = TRUE is an option for the mean() function.\n\n\nWithout across()\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWith across()\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-3-DataWrangling/03-2-data-wrangling-dplyr.html#select-and-relocate",
    "href": "lectures/Chapter-3-DataWrangling/03-2-data-wrangling-dplyr.html#select-and-relocate",
    "title": "03-2: Data wrangling with tidyverse: The Basics",
    "section": "select() and relocate()",
    "text": "select() and relocate()\nThe approaches to refer to the variables that fit with a specified pattern can be applied to other dplyr operations as well:\nTry:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-2-Quarto/02-1-Quarto-introduction.html#quarto-introduction",
    "href": "lectures/Chapter-2-Quarto/02-1-Quarto-introduction.html#quarto-introduction",
    "title": "02-1: Introduction to Quarto",
    "section": "Quarto: Introduction",
    "text": "Quarto: Introduction\n\nWhat is and why Quarto?Using WORD?Make a report with Quarto\n\n\n\nIt allows you to effortlessly generate documents that can print both R codes and their outcomes (this lecture note is indeed written using Quarto) in a single document.\nIt is useful when you report the analysis you conducted and its source R codes to your advisor or anyone you report to (as long as that person understands R).\nThe power of Quarto goes well beyond just creating a simple html document. The full power of Quarto is on display here.\n\n\n\n\n\nQuarto Installation\n\n\nVisit here.\n\n\n\n\n\n\n\nIt would be a real pain to do so because you need to copy and paste all the R codes you run and the results onto WORD manually.\nOften times, copied R codes and results are very much likely to be badly formatted when pasting them\nQuarto obviates the need of repeating copying and pasting when you would like to communicate what you did (R codes) and what you found (results) without worrying too much about formatting.\n\n\n\nGenerating a report using Quarto is a two-step process:\n\nCreate an Quarto file (file with .qmd as an extension) with regular texts and R codes mixed inside it.\n\nYou use a special syntax to let the computer know which parts of the file are simple texts and which parts are R codes.\n\nTell the computer to process the qmd file (a click of a button on RStudio, or use the render() function)\n\nThe computer runs the R codes and get their outcomes\nCombine the text parts, R codes, and their results to produce a document"
  },
  {
    "objectID": "lectures/Chapter-2-Quarto/02-1-Quarto-introduction.html#quarto-the-basics",
    "href": "lectures/Chapter-2-Quarto/02-1-Quarto-introduction.html#quarto-the-basics",
    "title": "02-1: Introduction to Quarto",
    "section": "Quarto: the Basics",
    "text": "Quarto: the Basics\n\nR code chunksRenderqmd v.s. outputInline codeMarkdown basicsCaveat\n\n\nA qmd file would consist of two types of inputs:\n\nR code chunks\nRegular texts\n\n\n\n\n\nSpecial Syntax\n\n\nWe can indicate R codes chunks by placing R codes inside a special syntax.\n```{r}\ncodes\n```\n\n\n\n\n\n\n\n\nDirection\n\n\nTake a look at sample_qmd.qmd, which can be downloaded from here.\n\nR codes summary(cars) and plot(pressure) are enclosed individually by the special syntax\nSo, in this qmd file, R knows that it should treat them as R codes, but not regular texts.\nOn the other hand, any texts that are not enclosed by the special syntax would be recognized as regular text.\n\n\n\n\n\n\n\nThe process of compiling an qmd file to produce a document is called rendering.\n\nThe easiest way to render is to hit the Render button located at the top of the code pane (upper left pane by default)\n\n\n\n\nNote\n\n\nAlternatively, you can use the render() function to render like below:\n\nrender(\"sample_qmd.qmd\")\n\n\n\n\n\n\nInspect the qmd file and its output document:\n\n\nqmd side\n\nlines 1-10: a YAML header where you control the aesthetics of the output document (more on this later)\nline 16: texts not enclosed by the special syntax\nlines 18-21: summary(cars) is an R code, which is enclosed by the special syntax\n\n\nhtml side\n\nlines 1-10: nothing\nline 16: printed as regular texts\nlines 18-21: the R code and its results printed\n\n\n\n\n\n\nYou can refer to an R object previously defined in line and display its content in line:\n\n\n\n\nDirection\n\n\nSee lines 41-51 of the qmd file\n\n\n\n\n\n\n\nheader\nmake a list\nfont\ncode highlighting\ninline math\nmath\nweb link\ncitation\n\n\n\n\n\nDirection\n\n\nCompare the chapter called “Markdown basics” of the qmd file and its corresponding output in the rendered html file\n\n\n\n\n\n\n\nWhen you render an qmd file and create a report, R creates an R session/environment that is completely  independent  of whatever R sessions or environments you may have on your RStudio.\nThis means that when you render an qmd file, you cannot refer to R objects you have defined on your current R session."
  },
  {
    "objectID": "lectures/Chapter-2-Quarto/02-1-Quarto-introduction.html#chunk-options",
    "href": "lectures/Chapter-2-Quarto/02-1-Quarto-introduction.html#chunk-options",
    "title": "02-1: Introduction to Quarto",
    "section": "Chunk options",
    "text": "Chunk options\n\nWhat?Example: echoHowVarious optionsSpecify chunk options globally\n\n\nChunk options are special codes inside R code chunks to control how the code chunks operate.\nHere are some example options:\n\necho\neval\nmessage\nwarning\noutput\ninclude\ncache\nfig.cap, fig-height, etc\n\nSee all the options here.\n\n\n\nInspect the qmd file and its output document and observe that\n\nFrom the R code chunk with summary(cars), the code itself and its outcome are presented in the output\nFrom the R code chunk with plot(pressure), only its outcome is presented in the output\n\nThis is because of the chunk option echo: false in the second R code chunk\n\n\n\nTo set a chunk option, use the following syntax:\n```{r}\n#| option-name: choice\n\nR codes come here\n```\n\nExample\n```{r}\n#| echo: false\n\nR codes come here\n```\n\n\n\n\n\nImportant\n\n\nNo space between the initiation of an R code chunk and chunk option. For example, the echo chunk option is going to be ignored below:\n```{r}\n\n#| echo: false\n\nR codes come here\n```\n\n\n\n\n\n\n\necho and evalmessage and warningoutputincludefigure-related\n\n\n\n\necho ( true  or false): specify whether the R codes appear in the output document or not\neval ( true  or false): specify whether the R codes are evaluated or not\n\n\n\n\n\n\nDirection\n\n\nInspect the qmd file (lines 75-103) and its output document to see their effects.\n\n\n\n\n\n\n\n\nmessage (true or  false ): specify weather messages associated with R codes evaluation appear in the output document or not\nwarning (true or  false ): specify weather warnings associated with R codes evaluation appear in the output document or not\n\n\n\n\n\n\nDirection\n\n\nInspect the qmd file (lines 107-131) and its output document\n\n\n\n\n\n\n\noutput ( true , false, asis)\n\ntrue: pint all the results including warnings and messages\nfalse: hides all the results including warnings and messages\nasis: the outputs of the R codes are printed as-is without any suitable formatting\n\n\n\n\n\n\nDirection\n\n\nInspect the qmd file (lines 135-149) and its output document\n\n\n\n\n\n\n\ninclude: false is equivalent to having eval: true, echo: false, and results: false\n\n\n\n\n\nDirection\n\n\nInspect the qmd file (lines 153-166) and its output document\n\n\n\n\n\n\n\nChunk option for figure\n\nfig.align: ‘default’, ‘center’, ‘left’, ‘right’\nfig.width: in inches\nfig.height: in inches\nfig.cap: figure caption\n\n\n\n\n\n\nDirection\n\n\nPlay with these options. See here for more chunk options.\n\n\n\n\n\n\n\n\n\n\n\nWhat and why?HowNote\n\n\nSometimes, it is useful to set chunk options that apply globally (for the entire documents).\nFor example,\n\nYou are writing a term paper and the instructor may want to see only results, but not R codes.\nYou do not want any of the R codes to appear on the output document, but echo: true is the default.\nIt is a waste of time to type echo: false for all the R code chunks\n\n\n\nYou can set chunk options globally in the YAML header with the execute option like below:\n---\ntitle: \"Reporting using Quarto\"\nauthor: \"Taro Mieno\"\nformat:\n  html:\n    toc: true\n    toc-depth: 2\n    number-sections: true\n    number-depth: 2\nexecute:\n  echo: false\n---\n\n\n\n\nDirection\n\n\n\nInsert the following in the YAML header of sample_qmd.qmd file so that it looks like above\n\nexecute:\n  echo: false\n\nRender the qmd file again and then compare lines 35-39 of the qmd file and its corresponding output.\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\nLocal option always overrides the global option."
  },
  {
    "objectID": "lectures/Chapter-2-Quarto/02-1-Quarto-introduction.html#caching",
    "href": "lectures/Chapter-2-Quarto/02-1-Quarto-introduction.html#caching",
    "title": "02-1: Introduction to Quarto",
    "section": "Caching",
    "text": "Caching\n\nWhat?Let’s tryChanges in codesChanges in contentsdependson\n\n\n\nIn the course of creating a document using Quarto, You are going to hit the “Render” button numerous times when you are writing a report to check whether the final output looks fine.\nEvery time you render, all the R code chunks are evaluated, which is inefficient because R has evaluated those R code chunks before.\nSo, if we can somehow store the results of R code chunks (caching), and then let R call up the saved results instead of re-evaluating the codes all over again, we can save lots of time.\nThe benefit of doing so is greater when the processing time of the codes is longer. Caching can be done by adding cache==TRUE as a chunk option.\nBy adding the option, once an R chunk is processed, its results are saved and can be reused again by R later when you compile the document again.\n\n\n\n\n\n\n\nDirection\n\n\n\nChange eval: false to eval: true in the cache_1 chunk\nRender and confirm that sample_qmd_cache and sample_qmd_files folders are created\nRender again and observe that the rendering process is much faster now\n\n\n\n\n\n\n\nWhen any part of the R codes within a cached R code chunk is changed, R is smart enough to recognize the change and evaluate the R code chunk again without using the cached results for the chunk.\n\n\n\n\nDirection\n\n\nChange y = 1 + x + v to y = 1 + 2 * x +v in the cache_1 chunk and render\n\n\n\n\n\n\n\nSometimes, your R codes within an cached R code chunk have not changed, but the content of a dataset used in the R code chunk may have changed.\nIn such a case, R is unable to recognize the change in the  content  of the dataset.\n\n\n\n\n\n\nDirection\n\n\n\nChange eval: false to eval: true in the cache_2 chunk and render\nChange y = 1 + 2 * x + v back to y = 1 + x +v and render (notice that the printed number from cache_2 did not change)\n\n\n\n\n\n\n\n\nTo R, everything in the cache_2 chunk looks the same as they only look at the code texts, but not the contents of R objects.\nTherefore, R would call up the saved results instead of rerunning the R codes, which is not what you want.\nYou can use the dependson option to make R recognize any changes in cached R objects\n\n\n\n\n\nDirection\n\n\nAdd dependson: cache_1 to the cache_2 chunk as an option and render again."
  },
  {
    "objectID": "lectures/Chapter-2-Quarto/02-1-Quarto-introduction.html#directory",
    "href": "lectures/Chapter-2-Quarto/02-1-Quarto-introduction.html#directory",
    "title": "02-1: Introduction to Quarto",
    "section": "Directory",
    "text": "Directory\n\nReading FilesWhat to do?\n\n\nSuppose you are interested in reading a dataset file like this:\n\nread.csv(\"corn_price.csv\")\n\n\n\n\n\nImportant\n\n\nBy default, R looks for corn_price.csv in the same folder in which the qmd file is located.\n\n\n\n\n\nIn my case, the sample_qmd.qmd is located in  /Users/taromieno/Library/CloudStorage/Dropbox/TeachingUNL/Data-Science-with-R-Quarto/Chapter-2-Quarto .\nThis means that RStudio tries to find  /Users/taromieno/Library/CloudStorage/Dropbox/TeachingUNL/Data-Science-with-R-Quarto/Chapter-2-Quarto/corn_price.csv.\nIf the file is not in the directory, RStudio won’t be able to find the file to import and returns an error. Clearly, all the subsequent actions dependent on the dataset will not run.\n\n\n\nTo avoid errors in reading files, there are three options:\n\nOption 1 (recommended for a beginner)\nPut all the datasets you intend to use in the same directory in which your qmd file is located.\n\nOption 2\nIf the file is not in the directory, supply the full path to the file like this\n\nread.csv(\"~/Dropbox/TeachingUNL/Data-Science-with-R-Quarto/Chapter-2-Quarto/corn_price.csv\")\n\n\nOption 3\nTell R to look for a specific directory for datasets by setting a working directory using opts_knit$set(root.dir = directory) at the beginning by adding the code like below in your qmd file after the YAML header:\n```{r}\nknir::opts_knit$set(root.dir = \"~/Dropbox/TeachingUNL/Data-Science-with-R/Chapter-2-Quarto\")\n```"
  },
  {
    "objectID": "lectures/Chapter-2-Quarto/02-1-Quarto-introduction.html#output-types",
    "href": "lectures/Chapter-2-Quarto/02-1-Quarto-introduction.html#output-types",
    "title": "02-1: Introduction to Quarto",
    "section": "Output types",
    "text": "Output types\n\nVarious formatsHowNote\n\n\nYou can render an qmd file to various formats using various engines (visit here to see all the document types).\n\n\n\n\nImportant\n\n\n\nIn this course, we only use the html option. Submit your assignment in html.\nhtml is void of the concept of page. Consequently, you do not have to worry about how you should organize texts, tables, and figures within a page (fixed amount of space).\n\n\n\n\n\n\nStep 1\nTo write to an output type you want, first add an appropriate options under the format option to the YAML header like below.\ntitle: \"Reporting using Quarto\"\nauthor: \"Taro Mieno\"\nformat:\n  html:\n    toc: true\n    toc-depth: 2\n    number-sections: true\n    number-depth: 2\n  docx: default \n  typst:  \n    papersize: a5\n    margin:\n      x: 1cm\n      y: 1cm\n    columns: 2\nHere,\n\nWORD (with word option) is generated with the default options.\nPDF (with typst option) is generated with the options specified below typst:.\n\n\n\n\n\nDirection\n\n\nAdd the docx option and typst options in the YAML above to your qmd file.\n\n\n\n\n\nStep 2\nYou should see a downward triangle right to the “Render” button. Pick one format to render to a document of the format.\n\n\nYAML and chunk options available are different based on the output format and engine. Visit here to see the options specific to particular formats."
  },
  {
    "objectID": "lectures/Chapter-2-Quarto/02-1-Quarto-introduction.html#resources",
    "href": "lectures/Chapter-2-Quarto/02-1-Quarto-introduction.html#resources",
    "title": "02-1: Introduction to Quarto",
    "section": "Resources",
    "text": "Resources\nThe best resource to learn Quarto is its official website:\n\nGeneral and specific (to document type) syntax\nYAML options specific to document type"
  },
  {
    "objectID": "lectures/Chapter-1-Introduction/01-Introduction.html#learning-objectives",
    "href": "lectures/Chapter-1-Introduction/01-Introduction.html#learning-objectives",
    "title": "01-1: Introduction to R",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nbecome familiar with programming\nbecome capable of using R software to conduct research independently\n\nmanipulate data\nvisualize data\nreport results\nspatial data management"
  },
  {
    "objectID": "lectures/Chapter-1-Introduction/01-Introduction.html#table-of-contents",
    "href": "lectures/Chapter-1-Introduction/01-Introduction.html#table-of-contents",
    "title": "01-1: Introduction to R",
    "section": "Table of contents",
    "text": "Table of contents\n\nIntroduction to R and RStudio\nVarious object types\nFunctions and packages\nSome fundamentals on vector, matrix, list, and data.frame"
  },
  {
    "objectID": "lectures/Chapter-1-Introduction/01-Introduction.html#r",
    "href": "lectures/Chapter-1-Introduction/01-Introduction.html#r",
    "title": "01-1: Introduction to R",
    "section": "R",
    "text": "R\n\na very popular statistical programming language used in academia and industry\n\nstarted out as software to do statistics, designed by a number of statisticians\nis open-source and free\nhas been and is evolving rapidly by the contributions of its users\nstate-of-the-art statistical methods (e.g., machine learning algorithms) written by the developers of the methods\ngeographic information system (GIS)\nbig data handling and analysis"
  },
  {
    "objectID": "lectures/Chapter-1-Introduction/01-Introduction.html#rstudio",
    "href": "lectures/Chapter-1-Introduction/01-Introduction.html#rstudio",
    "title": "01-1: Introduction to R",
    "section": "RStudio",
    "text": "RStudio\n\nR has a terrible graphic user interface\nRStudio is by far the most popular graphic user interface of R\n\n\nR User Interface"
  },
  {
    "objectID": "lectures/Chapter-1-Introduction/01-Introduction.html#install-r-and-rstudio",
    "href": "lectures/Chapter-1-Introduction/01-Introduction.html#install-r-and-rstudio",
    "title": "01-1: Introduction to R",
    "section": "Install R and RStudio",
    "text": "Install R and RStudio\n\nInstall R\nInstall RStudio"
  },
  {
    "objectID": "lectures/Chapter-1-Introduction/01-Introduction.html#introduction-to-rstudio",
    "href": "lectures/Chapter-1-Introduction/01-Introduction.html#introduction-to-rstudio",
    "title": "01-1: Introduction to R",
    "section": "Introduction to RStudio",
    "text": "Introduction to RStudio\nFour panes\n\nR script (upper left)\nConsole (lower left)\nEnvironment (upper right)\nFiles, plots, packages, and help (lower right)\n\nSmall tips\n\nAppearance\nPane Layout"
  },
  {
    "objectID": "lectures/Chapter-1-Introduction/01-Introduction.html#objectives",
    "href": "lectures/Chapter-1-Introduction/01-Introduction.html#objectives",
    "title": "01-1: Introduction to R",
    "section": "Objectives",
    "text": "Objectives\nLearn how to\n\ndo basic mathematical operations\ndefine objects in R\nlearn different object types\nuse RStudio at the same time"
  },
  {
    "objectID": "lectures/Chapter-1-Introduction/01-Introduction.html#basic-element-types-atomic-mode",
    "href": "lectures/Chapter-1-Introduction/01-Introduction.html#basic-element-types-atomic-mode",
    "title": "01-1: Introduction to R",
    "section": "Basic element types (atomic mode)",
    "text": "Basic element types (atomic mode)\n\ninteger: e.g., 1, 3,\n\nnumeric (double): e.g., 1, 1.3\ncomplex:\nlogical (boolean): true or false\ncharacter: combination of letters (numerical operations not allowed)"
  },
  {
    "objectID": "lectures/Chapter-1-Introduction/01-Introduction.html#basic-arithmetic-r-as-a-calculator",
    "href": "lectures/Chapter-1-Introduction/01-Introduction.html#basic-arithmetic-r-as-a-calculator",
    "title": "01-1: Introduction to R",
    "section": "Basic arithmetic: R as a calculator",
    "text": "Basic arithmetic: R as a calculator\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\nRStudio Tip\n\n\nYou can run the selected codes by hitting\n\nMac: command + enter\nWindows: Control + enter"
  },
  {
    "objectID": "lectures/Chapter-1-Introduction/01-Introduction.html#logical-values-and-operators",
    "href": "lectures/Chapter-1-Introduction/01-Introduction.html#logical-values-and-operators",
    "title": "01-1: Introduction to R",
    "section": "logical values and operators",
    "text": "logical values and operators\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-1-Introduction/01-Introduction.html#character",
    "href": "lectures/Chapter-1-Introduction/01-Introduction.html#character",
    "title": "01-1: Introduction to R",
    "section": "Character",
    "text": "Character\nContents enclosed by double (or single) quotation marks will be recognized as characters.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nYou cannot do addition using characters\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWe will learn string manipulations later using the stringr package."
  },
  {
    "objectID": "lectures/Chapter-1-Introduction/01-Introduction.html#assigning-contents-to-an-object",
    "href": "lectures/Chapter-1-Introduction/01-Introduction.html#assigning-contents-to-an-object",
    "title": "01-1: Introduction to R",
    "section": "Assigning contents to an object",
    "text": "Assigning contents to an object\n\nHowExampleObject evaluationMore examplesNotes\n\n\n\nYou can assign contents (numeric numbers, character, boolean, etc) to an object on R and reuse it later using either &lt;- or =.\n\n\nobject_name &lt;- contents\nobject_name = contents\n\n\n\nIt does not really matter which of &lt;- or = to use. You should pick whichever makes sense for you (though it is often recommended to use &lt;-). But, it is a good idea to be consistent.\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nNotice that these objects are now in the list of objects on the environment tab of RStudio.\n\n\n\nNote\n\n\nYou can insert the assignment operator (&lt;-) by hitting\n\nMac: Option + -\nWindows Alt + -\n\n\n\n\n\n\nOnce objects are created, you can evaluate them on the console to see what is inside:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nNote\n\n\nI often ask you to evaluate an R object. That just means looking inside the R object to see what is inside.\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nSeveral things to remember about assignment:\n\nIf you assign contents to an object of the same name, the object that had the same name will be overwritten\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nObject names cannot start with a numeric number. Try the following:\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nYou cannot use a reserved word as the name of an object (complete list found here)\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-1-Introduction/01-Introduction.html#objects",
    "href": "lectures/Chapter-1-Introduction/01-Introduction.html#objects",
    "title": "01-1: Introduction to R",
    "section": "Objects",
    "text": "Objects\n\nBasicsVectorListMatrixdata.frameRecognizing the class\n\n\n\nR is an object-oriented programming (OOP), which basically means:\n\n“Everything is an object and everything has a name.”\n\nR has many different object types (classes)\n\nvector\nmatrix\ndata.frame\nlist\nfunction\n\n\n\n\n\n\n\n\nDefinition\n\n\nA vectors is a class of object that consists of elements of the same kind (it can have only one type of elements). You use c() to create a vector.\n\n\n\n\nExample\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nDifferent modes?\nWhat if we mix elements of different mode\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAll the numeric values are converted to characters.\n\n\n\n\n\n\nDefinition\n\n\nA list is a class of object that consists of elements of mixed types.\n\n\n\n\nExample\n\nA list is very flexible. It can hold basically any type of R objects as its elements.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nWe will see more complex examples later.\n\n\n\n\n\n\n\nDefinition\n\n\nA matrix is a class of object that consists of elements of the same kind (it can have only one element) stored in a two-dimensional array.\n\n\n\n\nExamples\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\ndata.frame is like a matrix (or a list of columns)\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nThere are different kinds of objects that are like “data.frame”\n\ntibble\ndata.table\n\nWe will talk about some of them later.\n\n\n\nWhy?HowVisual inspection\n\n\nIt is critical to recognize the class of the objects:\n\nthe same function does different things depending on the class of the object to which the function is applied\n\nsome functions work on some object classes, but not on others\n\nMany of the errors you will encounter while working on R has something to do with applying functions that are not applicable to the objects you are working on!\n\n\nUse class, typeof, and str commands to know more about what kind of objects you are dealing with:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nYou could also use View() function for visual inspection:\n\nView(yield_data)"
  },
  {
    "objectID": "lectures/Chapter-1-Introduction/01-Introduction.html#function",
    "href": "lectures/Chapter-1-Introduction/01-Introduction.html#function",
    "title": "01-1: Introduction to R",
    "section": "Function",
    "text": "Function\n\nWhat is a function?Why functions?Some other useful functionsExercises\n\n\nA function takes R objects (vector, data.frame, etc), processes them, and returns R objects\n\nExample:\nmin() takes a vector of values as an argument and returns the minimum of all the values in the vector\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nFunctions (both base and user-written) are what makes R compelling to use as major statistical and programming software!\nIndeed, this course is pretty much all about learning useful functions that make your life easier\nWe will learn lots of functions that are made available through user-written packages\n\n\n\n\ncreate a sequence of values\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nrepeat values\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nsum values\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nfind the length of an vector\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\ngenerate a vector (call it \\(x\\)) that starts from 1 and increase by 2 until 99\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\ncalculate the sample mean of \\(x\\)\n\n\\(\\frac{1}{n}\\sum_{i=1}^n x_i\\)\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\ncalculate the sample variance of \\(x\\)\n\n\\(\\frac{1}{n}\\sum_{i=1}^n (x_i-\\bar{x})^2\\), where \\(\\bar{x}\\) is the sample mean\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-1-Introduction/01-Introduction.html#package",
    "href": "lectures/Chapter-1-Introduction/01-Introduction.html#package",
    "title": "01-1: Introduction to R",
    "section": "Package",
    "text": "Package\n\nWhat are packages?How to use them?\n\n\nA drawer in your work space (R environment) that has specialized tools (functions) to complete tasks.\n\nExample packages:\n\ndplyr (data wrangling)\ndata.table (data wrangling)\nggplot2 (data visualization)\nsf (spatial vector data handling)\nraster (spatial raster data handling)\nstars (spatiotemporal data handling)\n\n\n\n\nBefore you use tools (functions) in the drawer (package), you need to buy (install) it first. You can install a package using the following syntax:\n\n\ninstall.packages(\"package name\")\n\n\n\nFor example,\n\n\ninstall.packages(\"ggplot2\")\n\n\n\nYou need to bring the drawer (package) to your working space (R environment) by using the library() function:\n\n\nlibrary(ggplot2)\n\n\n\nNow, you can start using specialized tools (functions) in the drawer (package)!!"
  },
  {
    "objectID": "lectures/Chapter-1-Introduction/01-Introduction.html#working-with-r-or-any-computer-programs",
    "href": "lectures/Chapter-1-Introduction/01-Introduction.html#working-with-r-or-any-computer-programs",
    "title": "01-1: Introduction to R",
    "section": "Working with R (or any computer programs)",
    "text": "Working with R (or any computer programs)\n\nYou are the architect who has the blueprint of the final product, but does not have an ability to build specific pieces by yourself\nYou work with one worker (R) who can build specific pieces perfectly without any error  if given right tools and instructions \nThis worker is weird. If you do not give right tools or your instruction is wrong, he/she will speak up and tell you there has been an error. He/she will not try to figure out how things could have been done differently by himself/herself.\nYour job is to provide the right tools and instructions to the worker (R), and correct your instructions when you found out you made a mistake (debugging)"
  },
  {
    "objectID": "lectures/Chapter-1-Introduction/01-Introduction.html#vector-1",
    "href": "lectures/Chapter-1-Introduction/01-Introduction.html#vector-1",
    "title": "01-1: Introduction to R",
    "section": "Vector",
    "text": "Vector\n\nPrepArithmetic operationsAccess elements\n\n\nLet’s define two vectors to work with\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nNote\n\n\nVector arithmetic operations happen element by element!\n\n\n\n\n\n\n\nTo access element(s) of a vector, you use [] like below:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nYou can access multiple elements of a vector\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-1-Introduction/01-Introduction.html#matrix-1",
    "href": "lectures/Chapter-1-Introduction/01-Introduction.html#matrix-1",
    "title": "01-1: Introduction to R",
    "section": "Matrix",
    "text": "Matrix\n\nPrepArithmetic operationsOther operationsAccess elements\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nTo access element(s) of a matrix, you use [] just like we did for a vector. But, now you have two arguments inside [].\n\nmatrix[indices for rows, indices for columns]  \n\n\nExamples\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-1-Introduction/01-Introduction.html#list-1",
    "href": "lectures/Chapter-1-Introduction/01-Introduction.html#list-1",
    "title": "01-1: Introduction to R",
    "section": "List",
    "text": "List\n\nAccess elements using [[]]Access elements using $\n\n\nTo access element(s) of a matrix, you can use either [[]] operator for accessing a single element and use [] for multiple elements.\nExample: single element\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nExample: multiple elements\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nYou can also use $ operator to access a single element of a list as long as the element has a name.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-1-Introduction/01-Introduction.html#data.frame-1",
    "href": "lectures/Chapter-1-Introduction/01-Introduction.html#data.frame-1",
    "title": "01-1: Introduction to R",
    "section": "data.frame",
    "text": "data.frame\n\nBasicsAccess parts of a data.frame\n\n\ndata.frame (and its relatives)\n\nis the most common object type we use.\nis a special kind of list of vectors that are of the same length that makes a matrix-like structure\nshares properties of both the matrix and the list\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nAccessing parts of a data.frame works like accessing elements of a matrix or list.\n\nExamples\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n We will spend lots of time on how to do data wrangling on data.frames using the tidyverse package!"
  },
  {
    "objectID": "lectures/Chapter-1-Introduction/01-Introduction.html#examples",
    "href": "lectures/Chapter-1-Introduction/01-Introduction.html#examples",
    "title": "01-1: Introduction to R",
    "section": "Examples",
    "text": "Examples\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n We will spend lots of time on how to do data wrangling on data.frames using the tidyverse package!"
  },
  {
    "objectID": "lectures/Chapter-1-Introduction/01-Introduction.html#next-class-quarto",
    "href": "lectures/Chapter-1-Introduction/01-Introduction.html#next-class-quarto",
    "title": "01-1: Introduction to R",
    "section": "Next class: Quarto",
    "text": "Next class: Quarto"
  },
  {
    "objectID": "exercises/index.html",
    "href": "exercises/index.html",
    "title": "Exercises",
    "section": "",
    "text": "Title\n\n\n\nTopic\n\n\n\n\n\n\n\n\nEx-1-1: Data Wrangling\n\n\nData Wrangling\n\n\n\n\n\n\nEx-1-2: Merge Datasets\n\n\nData Wrangling\n\n\n\n\n\n\nEx-1-3: Reshape Datasets\n\n\nData Wrangling\n\n\n\n\n\n\nEx-2-1: Data Visualization\n\n\nData Visualization\n\n\n\n\n\n\nEx-2-2: Fine tuning figures\n\n\nData Visualization\n\n\n\n\n\n\nEx-2-3: Modify themes of ggplot2 figures\n\n\nData Visualization\n\n\n\n\n\n\nEx-8-1: Make tables with flextable\n\n\n \n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "exercises/ex-2-2-ggplot2-fine-tune.html#exercise-1",
    "href": "exercises/ex-2-2-ggplot2-fine-tune.html#exercise-1",
    "title": "Ex-2-2: Fine tuning figures",
    "section": "1 Exercise 1",
    "text": "1 Exercise 1\nUsing the diamonds data,\n\nCreate a histogram for diamond prices (price).\n\nSet bin fill color to a color you like using its Hex code\nSet bin border color to a color you like using its Hex code\nSet bins = 30\n\nChange the panel background color to #6f6f6f using the panel.background option inside theme().\nIncrease the x-axis and y-axis label text size to 12\nChange the y-axis breaks to seq(0, 15000, by = 1000)\nChange the color and size of x-axis title to “blue” and 16, respectively\nChange the color and size of y-axis title to “red” and 16, respectively\nRemove the minor grid lines of the y-axis\n\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nHere is the output you should be getting:\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data = diamonds) +\n  geom_histogram(\n    aes(x = price),\n    color = \"#000000\",\n    fill = \"#c90076\",\n    bins = 30\n  ) +\n  theme(\n    axis.text = element_text(size = 12),\n    axis.title.x = element_text(size = 16, color = \"blue\"),\n    axis.title.y = element_text(size = 16, color = \"red\"),\n    panel.grid.minor.y = element_blank(),\n    panel.background = element_rect(fill = \"#6f6f6f\")\n  ) +\n  scale_y_continuous(breaks = seq(0, 15000, by = 1000))"
  },
  {
    "objectID": "exercises/ex-2-2-ggplot2-fine-tune.html#exercise-2",
    "href": "exercises/ex-2-2-ggplot2-fine-tune.html#exercise-2",
    "title": "Ex-2-2: Fine tuning figures",
    "section": "2 Exercise 2",
    "text": "2 Exercise 2\nUsing the iris data,\n\nGenerate a boxplot of sepal lengths (Sepal.Length) for each species (Species)\nApply one of the pre-made themes by the ggthemes package\nPick one palette from the list of “qualitative” palettes by the RColorBrewer package (You can see the list by running display.brewer.all(type = \"qual\").)\nUse the palette you picked in scale_A_B() to change the color scheme from the default\n\nA: fill or color\nB: brewer or distiller\n\nPlace the legend title at the top of the legend keys\nChange the y-axis title to “Sepal Length”\nChange the breaks of the y-axis to seq(4, 8, by = 0.5)\nMake the font size of x-axis text 12\nChange the color x-axis title to a color you like using the Hex code\nPlace the legend at the bottom of the figure\nChange the width of the legend keys to 1cm.\nRemove the minor grid lines of the y-axis\n\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nHere is the output you should be getting:\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data = iris) +\n  geom_boxplot(aes(x = Species, y = Sepal.Length, fill = Species)) +\n  theme_bw() +\n  scale_fill_brewer(\n    palette = \"Set2\",\n    guide = guide_legend(title.position = \"top\")\n  ) +\n  ylab(\"Sepal Length\") +\n  theme(\n    panel.grid.minor.y = element_blank(),\n    axis.text.x = element_text(size = 16),\n    axis.title.x = element_text(color = \"#cc0000\"),\n    legend.position = \"bottom\",\n    legend.key.width = unit(1, \"cm\")\n  ) +\n  scale_y_continuous(breaks = seq(4, 8, by = 0.5))"
  },
  {
    "objectID": "exercises/ex-2-2-ggplot2-fine-tune.html#exercise-3",
    "href": "exercises/ex-2-2-ggplot2-fine-tune.html#exercise-3",
    "title": "Ex-2-2: Fine tuning figures",
    "section": "3 Exercise 3",
    "text": "3 Exercise 3\nUsing the mpg data,\n\nCreate a scatter plot of highway miles-per-gallon (hwy) against engine displacement (displ).\n\nModify the point color based on drive type (drv).\nSet the size of the points to 3\n\nUse scale_AviridisB() to apply the Viridis color scale\n\nA: color or fill\nB: c (continuous) or d (discrete)\n\nLegend:\n\nRename the legend title to “Drive Type”.\nPlace the legend at the bottom of the figure\n\nAxis\n\nChange the y-axis and x-xis titles to “Miles per gallon” and “Displacement”, respectively\nChange the font size of y-axis and x-axis titles to 16\nChange the font size of y-axis and x-axis texts to 12\n\nOthers:\n\nMake the background color of the panel to #f3fbf5 using the panel.background option inside theme().\n\n\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nHere is the output you should be getting:\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data = mpg) +\n  geom_point(aes(x = displ, y = hwy, shape = drv, color = class), size = 3) +\n  scale_shape_manual(\n    name = \"Drive Type\",\n    values = c(\"f\" = 16, \"r\" = 17, \"4\" = 18),\n    labels = c(\"Front\", \"Rear\", \"Four-wheel\")\n  )"
  },
  {
    "objectID": "exercises/ex-2-2-ggplot2-fine-tune.html#exercise-4",
    "href": "exercises/ex-2-2-ggplot2-fine-tune.html#exercise-4",
    "title": "Ex-2-2: Fine tuning figures",
    "section": "4 Exercise 4",
    "text": "4 Exercise 4\nUsing county_yield_y,\n\nCreate a line plot of corn yield (corn_yield) against year (year) faceted by State (state_name)\nApply theme_wsj()\nAxis\n\nChange the y-axis and x-axis titles to “Corn Yield (bu/acre)” and “Year”, respectively\nChange the breaks of x-axis to 2000:2018\n\nTheme\n\nChange the font size of x-axis and y-axis titles to 16\nChange the font size of x-axis and y-axis texts to 12\nChange the background color of the strips to #fbf3f9\nChange the background border color of the strips to blue\nChange the strip text size to 12 and set its angle to 0\n\n\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nHere is the output you should be getting:\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data = county_yield_y) +\n  geom_line(aes(x = year, y = corn_yield)) +\n  facet_grid(state_name ~ .) +\n  theme_wsj() +\n  ylab(\"Corn Yield (bu/acre)\") +\n  xlab(\"Year\") +\n  scale_x_continuous(breaks = 2000:2018) +\n  theme(\n    axis.text = element_text(size = 12),\n    axis.title = element_text(size = 16),\n    strip.background = element_rect(fill = \"#fbf3f9\", color = \"blue\"),\n    strip.text.y = element_text(size = 12, angle = 0)\n  )"
  },
  {
    "objectID": "exercises/8-1-flextable.html",
    "href": "exercises/8-1-flextable.html",
    "title": "Ex-8-1: Make tables with flextable",
    "section": "",
    "text": "Dataset: mtcars\n\nLoad the mtcars dataset into R.\nUse the flextable package to create a table that displays the first 10 rows of the dataset for mpg, cyl, disp, and hp.\nApply styles to the table to make\n\nthe texts in the header bold using bold()\nthe texts of the cyl column center-aligned including the cyl in the header using align()\nthe texts of the hp column colored red using color()\nthe font size of the texts of the mpg 18 if the value of disp is greater than 200 using fontsize().\n\n\nHere is the finished table you are trying to make:\n\n\nmpgcyldisphp21.06160.011021.06160.011022.84108.09321.46258.011018.78360.017518.16225.010514.38360.024524.44146.76222.84140.89519.26167.6123\n\n\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nCode\n# Create a simple flextable\nft &lt;- \n  flextable(\n    mtcars[1:10, ],\n    col_keys = c(\"mpg\", \"cyl\", \"disp\", \"hp\")\n  ) %&gt;%\n  bold(part = \"header\") %&gt;%\n  align(j = 2, align = \"center\", part = \"all\") %&gt;%\n  color(j = 4, color = \"red\")"
  },
  {
    "objectID": "exercises/8-1-flextable.html#exercise-1",
    "href": "exercises/8-1-flextable.html#exercise-1",
    "title": "Ex-8-1: Make tables with flextable",
    "section": "",
    "text": "Dataset: mtcars\n\nLoad the mtcars dataset into R.\nUse the flextable package to create a table that displays the first 10 rows of the dataset for mpg, cyl, disp, and hp.\nApply styles to the table to make\n\nthe texts in the header bold using bold()\nthe texts of the cyl column center-aligned including the cyl in the header using align()\nthe texts of the hp column colored red using color()\nthe font size of the texts of the mpg 18 if the value of disp is greater than 200 using fontsize().\n\n\nHere is the finished table you are trying to make:\n\n\nmpgcyldisphp21.06160.011021.06160.011022.84108.09321.46258.011018.78360.017518.16225.010514.38360.024524.44146.76222.84140.89519.26167.6123\n\n\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nCode\n# Create a simple flextable\nft &lt;- \n  flextable(\n    mtcars[1:10, ],\n    col_keys = c(\"mpg\", \"cyl\", \"disp\", \"hp\")\n  ) %&gt;%\n  bold(part = \"header\") %&gt;%\n  align(j = 2, align = \"center\", part = \"all\") %&gt;%\n  color(j = 4, color = \"red\")"
  },
  {
    "objectID": "exercises/8-1-flextable.html#exercise-2",
    "href": "exercises/8-1-flextable.html#exercise-2",
    "title": "Ex-8-1: Make tables with flextable",
    "section": "2 Exercise 2",
    "text": "2 Exercise 2\nDataset: iris\n\nLoad the iris dataset.\nCreate a flextable that displays the first 10 rows of the dataset.\nApply conditional formatting:\n\nChange the background color of the cells in the Sepal.Length column where their values are greater than 5.0 in blue using color using bg().\nDraw orange borders at the bottom of the cells in the Sepal.Width column if their values are less than 3.0 using border().\nDraw red borders at both sides of the cells in the Sepal.Width column if their corresponding values of Petal.Width are less than 1.5 using border().\n\n\nHere is the finished table you are trying to make:\n\n\nSepal.LengthSepal.WidthPetal.LengthPetal.WidthSpecies5.13.51.40.2setosa4.93.01.40.2setosa4.73.21.30.2setosa4.63.11.50.2setosa5.03.61.40.2setosa5.43.91.70.4setosa4.63.41.40.3setosa5.03.41.50.2setosa4.42.91.40.2setosa4.93.11.50.1setosa\n\n\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nCode\n# Create flextable for first 10 rows\nft &lt;- \n  flextable(iris[1:10,]) %&gt;%\n  # Apply conditional formatting to Sepal.Length column\n  bg(i = ~ Sepal.Length &gt; 5, j = \"Sepal.Length\", bg = \"blue\") %&gt;%\n  border(i = ~ Sepal.Width &gt; 3, j = ~ Sepal.Width, border.bottom = officer::fp_border(color = \"orange\"))"
  },
  {
    "objectID": "exercises/8-1-flextable.html#exercise-3-merging-and-grouping-columns",
    "href": "exercises/8-1-flextable.html#exercise-3-merging-and-grouping-columns",
    "title": "Ex-8-1: Make tables with flextable",
    "section": "3 Exercise 3: Merging and Grouping Columns",
    "text": "3 Exercise 3: Merging and Grouping Columns\nDataset: airquality\n\nLoad the airquality dataset and filter the data so that you have only the first 10 days of May and June.\nCreate a flextable using selected columns: Month, Day, Ozone, Wind.\nGroup the table by the Month column and merge the cells of the Month column using merge_v().\nDraw a black border to separate May and June observations\nDraw a black line at the bottom of the table which was somehow lost in step 3 using fix_border_issues().\nAdd a caption to the table using set_caption().\n\nHere is the finished table you are trying to make:\n\n\nMonthDayOzoneWind51417.42368.031212.641811.5514.362814.97238.681913.89820.1108.6618.629.7316.149.258.6614.37299.786.997113.8103911.5\n\n\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nCode\n# Select columns\nft &lt;- \n  airquality %&gt;%\n  dplyr::filter(Month %in% c(5, 6) & Day &lt;= 10) %&gt;%\n  .[, c(\"Month\", \"Day\", \"Ozone\", \"Wind\")] %&gt;%\n  # Create flextable\n  flextable() %&gt;%\n  # Merge Month column\n  merge_v(j = \"Month\") %&gt;%\n  border(i = 10, border.bottom = officer::fp_border(color = \"black\")) %&gt;%\n  fix_border_issues() %&gt;%\n  # Add a caption\n  set_caption(\"Airquality Data Table with Grouped Month\")"
  },
  {
    "objectID": "exercises/8-1-flextable.html#exercise-4-custom-header-and-footer",
    "href": "exercises/8-1-flextable.html#exercise-4-custom-header-and-footer",
    "title": "Ex-8-1: Make tables with flextable",
    "section": "4 Exercise 4: Custom Header and Footer",
    "text": "4 Exercise 4: Custom Header and Footer\nDataset: iris\n\nLoad the iris dataset.\nCreate a table with the first 10 rows of the dataset.\nModify the header by renaming columns Sepal.Length and Sepal.Width to Sepal Length and Sepal Width, respectively.\nAdd a custom footer explaining what the dataset represents.\n\nHere is the finished table you are trying to make:\n\n\nSepal LengthSepal WidthPetal.LengthPetal.WidthSpecies5.13.51.40.2setosa4.93.01.40.2setosa4.73.21.30.2setosa4.63.11.50.2setosa5.03.61.40.2setosa5.43.91.70.4setosa4.63.41.40.3setosa5.03.41.50.2setosa4.42.91.40.2setosa4.93.11.50.1setosaIris dataset: Measurements of iris flowers from three species\n\n\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nCode\nft &lt;- \n  flextable(iris[1:15,]) %&gt;%\n  # Modify header labels\n  set_header_labels(Sepal.Length = \"Sepal Length\", Sepal.Width = \"Sepal Width\") %&gt;%\n  # Add a footer\n  add_footer_lines(\"Iris dataset: Measurements of iris flowers from three species\")"
  },
  {
    "objectID": "exercises/1-2-data_merging.html",
    "href": "exercises/1-2-data_merging.html",
    "title": "Ex-1-2: Merge Datasets",
    "section": "",
    "text": "Datasets: economics from the ggplot2 package and a fictitious dataset for financial events.\nTask: Merge the economics dataset with a fictitious dataset that provides a financial event for specific dates. Join these datasets using left_join based on date.\nLoad and Create Dataset:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\nDatasets: chickwts from the datasets package.\nTask: The chickwts dataset contains the weight of chicks alongside feed type. Create a fictitious dataset that provides pricing information for each feed type. Join these datasets based on the feed type.\nLoad Dataset:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nDatasets: PlantGrowth from the datasets package.\nTask: The PlantGrowth dataset provides information about the weight of plants under different treatment conditions. Create a fictitious dataset that assigns a scientific team responsible for each treatment type. Merge these datasets based on the group column.\nLoad Dataset:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "exercises/1-2-data_merging.html#exercise-1",
    "href": "exercises/1-2-data_merging.html#exercise-1",
    "title": "Ex-1-2: Merge Datasets",
    "section": "",
    "text": "Datasets: economics from the ggplot2 package and a fictitious dataset for financial events.\nTask: Merge the economics dataset with a fictitious dataset that provides a financial event for specific dates. Join these datasets using left_join based on date.\nLoad and Create Dataset:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "exercises/1-2-data_merging.html#exercise-2",
    "href": "exercises/1-2-data_merging.html#exercise-2",
    "title": "Ex-1-2: Merge Datasets",
    "section": "",
    "text": "Datasets: chickwts from the datasets package.\nTask: The chickwts dataset contains the weight of chicks alongside feed type. Create a fictitious dataset that provides pricing information for each feed type. Join these datasets based on the feed type.\nLoad Dataset:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "exercises/1-2-data_merging.html#exercise-3",
    "href": "exercises/1-2-data_merging.html#exercise-3",
    "title": "Ex-1-2: Merge Datasets",
    "section": "",
    "text": "Datasets: PlantGrowth from the datasets package.\nTask: The PlantGrowth dataset provides information about the weight of plants under different treatment conditions. Create a fictitious dataset that assigns a scientific team responsible for each treatment type. Merge these datasets based on the group column.\nLoad Dataset:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "exercises/1-2-data_merging.html#exercise-1-1",
    "href": "exercises/1-2-data_merging.html#exercise-1-1",
    "title": "Ex-1-2: Merge Datasets",
    "section": "2.1 Exercise 1",
    "text": "2.1 Exercise 1\nDatasets: Two fictitious datasets: one containing student enrollment details and another containing their grades.\nTask: Join the enrollment dataset with the grades dataset using student_id and semester as the key variables.\nLoad Dataset:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "exercises/1-2-data_merging.html#exercise-2-1",
    "href": "exercises/1-2-data_merging.html#exercise-2-1",
    "title": "Ex-1-2: Merge Datasets",
    "section": "2.2 Exercise 2",
    "text": "2.2 Exercise 2\nDatasets: Two fictitious datasets: one listing employee details and another detailing their project assignments.\nTask: Merge the employees dataset with the projects dataset using both department and role as the key variables.\nLoad Dataset:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "exercises/1-2-data_merging.html#exercise-3-1",
    "href": "exercises/1-2-data_merging.html#exercise-3-1",
    "title": "Ex-1-2: Merge Datasets",
    "section": "2.3 Exercise 3",
    "text": "2.3 Exercise 3\nDatasets: Two fictitious datasets: one containing transaction records and another with product pricing.\nTask: Join the transactions dataset with the pricing dataset using both transaction_date and product_code as the key variables.\nLoad Dataset:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "assignments.html",
    "href": "assignments.html",
    "title": "Assignments",
    "section": "",
    "text": "Instruction:\n\nVisit here and download all the files.\nOpen Assignment-1-student.qmd and start working on problems."
  },
  {
    "objectID": "assignments.html#assignment-1",
    "href": "assignments.html#assignment-1",
    "title": "Assignments",
    "section": "",
    "text": "Instruction:\n\nVisit here and download all the files.\nOpen Assignment-1-student.qmd and start working on problems."
  },
  {
    "objectID": "assignments.html#assignment-2",
    "href": "assignments.html#assignment-2",
    "title": "Assignments",
    "section": "Assignment 2",
    "text": "Assignment 2\nInstruction:\n\nVisit here and download all the files.\nOpen Assignment-2-student.qmd and start working on problems."
  },
  {
    "objectID": "assignments.html#assignment-3",
    "href": "assignments.html#assignment-3",
    "title": "Assignments",
    "section": "Assignment 3",
    "text": "Assignment 3\nInstruction:\n\nVisit here and download all the files.\nOpen Assignment-3-student.qmd and start working on problems."
  },
  {
    "objectID": "IndustryPartnership/FCSA/proposal.html",
    "href": "IndustryPartnership/FCSA/proposal.html",
    "title": "Proposal for course matericals by FCSA",
    "section": "",
    "text": "The key motivation of the collaboration with FCSA is to expose students to real-world application of data science skills so that they have a good idea of how course materials can be used in practice.\n\n\n\nMock project(s) that uses R codes to analyze financial data to get actionable insights.\n\n\nR codes conduct following things.\n\nExploratory data analysis\nAnalysis\nHyepothesis testing\n\nHere are desired specific elements in the R codes that are used.\n\ntidyverse is used where possible for data wrangling (dplyr, tidyr) and visualization (ggplot2). I heard from Shara that you guys use Power BI for data visualization. That is good to see as well if you do not use ggplot2.\ndata.table is used where computation speed matters (Shara told me you guys do this for some operations).\nLooping is used for automating repetitive processes\n\nI would like to store the codes in my github repository for this course.\n\n\n\nI would like to store these datasets in a public repository that current and future students can access for assignments or their final projects.\n\n\n\nPlease let me know if you would like to record a video or give a in-class live delivery (in this case, I would like to ask your permission for recording). We meet at 1pm on Mondays and Wednesdays.\nThis presentation has the following structure:\n\nIntroduction of the presenter and what FCSA does\nPresents the mock project\nQualifications (what are you looking for from job applicants?)\nWork envrironment?\nAny opportunity? (internship)"
  },
  {
    "objectID": "IndustryPartnership/FCSA/proposal.html#ideal-prodcuts-from-fcsa-for-the-course",
    "href": "IndustryPartnership/FCSA/proposal.html#ideal-prodcuts-from-fcsa-for-the-course",
    "title": "Proposal for course matericals by FCSA",
    "section": "",
    "text": "The key motivation of the collaboration with FCSA is to expose students to real-world application of data science skills so that they have a good idea of how course materials can be used in practice."
  },
  {
    "objectID": "IndustryPartnership/FCSA/proposal.html#desired-contentes-shared-by-fcsa",
    "href": "IndustryPartnership/FCSA/proposal.html#desired-contentes-shared-by-fcsa",
    "title": "Proposal for course matericals by FCSA",
    "section": "",
    "text": "Mock project(s) that uses R codes to analyze financial data to get actionable insights.\n\n\nR codes conduct following things.\n\nExploratory data analysis\nAnalysis\nHyepothesis testing\n\nHere are desired specific elements in the R codes that are used.\n\ntidyverse is used where possible for data wrangling (dplyr, tidyr) and visualization (ggplot2). I heard from Shara that you guys use Power BI for data visualization. That is good to see as well if you do not use ggplot2.\ndata.table is used where computation speed matters (Shara told me you guys do this for some operations).\nLooping is used for automating repetitive processes\n\nI would like to store the codes in my github repository for this course.\n\n\n\nI would like to store these datasets in a public repository that current and future students can access for assignments or their final projects.\n\n\n\nPlease let me know if you would like to record a video or give a in-class live delivery (in this case, I would like to ask your permission for recording). We meet at 1pm on Mondays and Wednesdays.\nThis presentation has the following structure:\n\nIntroduction of the presenter and what FCSA does\nPresents the mock project\nQualifications (what are you looking for from job applicants?)\nWork envrironment?\nAny opportunity? (internship)"
  },
  {
    "objectID": "exercises/1-1-data_wrangling_dplyr.html",
    "href": "exercises/1-1-data_wrangling_dplyr.html",
    "title": "Ex-1-1: Data Wrangling",
    "section": "",
    "text": "Objective: Filter the mtcars dataset for cars that have an automatic transmission (am == 1) and weigh more than 3,000 lbs (wt &gt; 3).\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\nObjective: Filter the iris dataset for flowers of the species setosa where the sepal length (Sepal.Length) exceeds 5 cm.\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nObjective: Filter the dataset for diamonds with a cut of “Premium” and a carat size between 1 and 2.\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nObjective: Filter the data for days in June (Month == 6) where the ozone level (Ozone) exceeded 100 (ignoring NA values).\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nObjective: Filter for records of chicks (Chick) number 1 to 5 (inclusive) and for times (Time) less than or equal to 10 days.\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "exercises/1-1-data_wrangling_dplyr.html#exercise-1",
    "href": "exercises/1-1-data_wrangling_dplyr.html#exercise-1",
    "title": "Ex-1-1: Data Wrangling",
    "section": "",
    "text": "Objective: Filter the mtcars dataset for cars that have an automatic transmission (am == 1) and weigh more than 3,000 lbs (wt &gt; 3).\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "exercises/1-1-data_wrangling_dplyr.html#exercise-2",
    "href": "exercises/1-1-data_wrangling_dplyr.html#exercise-2",
    "title": "Ex-1-1: Data Wrangling",
    "section": "",
    "text": "Objective: Filter the iris dataset for flowers of the species setosa where the sepal length (Sepal.Length) exceeds 5 cm.\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "exercises/1-1-data_wrangling_dplyr.html#exercise-3",
    "href": "exercises/1-1-data_wrangling_dplyr.html#exercise-3",
    "title": "Ex-1-1: Data Wrangling",
    "section": "",
    "text": "Objective: Filter the dataset for diamonds with a cut of “Premium” and a carat size between 1 and 2.\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "exercises/1-1-data_wrangling_dplyr.html#exercise-4",
    "href": "exercises/1-1-data_wrangling_dplyr.html#exercise-4",
    "title": "Ex-1-1: Data Wrangling",
    "section": "",
    "text": "Objective: Filter the data for days in June (Month == 6) where the ozone level (Ozone) exceeded 100 (ignoring NA values).\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "exercises/1-1-data_wrangling_dplyr.html#exercise-5",
    "href": "exercises/1-1-data_wrangling_dplyr.html#exercise-5",
    "title": "Ex-1-1: Data Wrangling",
    "section": "",
    "text": "Objective: Filter for records of chicks (Chick) number 1 to 5 (inclusive) and for times (Time) less than or equal to 10 days.\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "exercises/1-1-data_wrangling_dplyr.html#exercise-1-1",
    "href": "exercises/1-1-data_wrangling_dplyr.html#exercise-1-1",
    "title": "Ex-1-1: Data Wrangling",
    "section": "2.1 Exercise 1",
    "text": "2.1 Exercise 1\nObjective: Add a column named efficiency that calculates miles-per-gallon (mpg) divided by the number of cylinders (cyl).\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "exercises/1-1-data_wrangling_dplyr.html#exercise-2-1",
    "href": "exercises/1-1-data_wrangling_dplyr.html#exercise-2-1",
    "title": "Ex-1-1: Data Wrangling",
    "section": "2.2 Exercise 2",
    "text": "2.2 Exercise 2\nObjective: Create a new column named area which multiplies sepal length (Sepal.Length) by sepal width (Sepal.Width).\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "exercises/1-1-data_wrangling_dplyr.html#exercise-3-1",
    "href": "exercises/1-1-data_wrangling_dplyr.html#exercise-3-1",
    "title": "Ex-1-1: Data Wrangling",
    "section": "2.3 Exercise 3",
    "text": "2.3 Exercise 3\nObjective: Calculate the price per carat and name the new column price_per_carat.\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "exercises/1-1-data_wrangling_dplyr.html#exercise-4-1",
    "href": "exercises/1-1-data_wrangling_dplyr.html#exercise-4-1",
    "title": "Ex-1-1: Data Wrangling",
    "section": "2.4 Exercise 4",
    "text": "2.4 Exercise 4\nObjective: Convert the temperature from Fahrenheit (Temp) to Celsius and name the new column TempC. The formula is C = (F - 32) * 5/9.\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "exercises/1-1-data_wrangling_dplyr.html#exercise-1-2",
    "href": "exercises/1-1-data_wrangling_dplyr.html#exercise-1-2",
    "title": "Ex-1-1: Data Wrangling",
    "section": "3.1 Exercise 1",
    "text": "3.1 Exercise 1\nObjective: Group by the number of cylinders (cyl) and compute the average miles-per-gallon (mpg) for each group.\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "exercises/1-1-data_wrangling_dplyr.html#exercise-2-2",
    "href": "exercises/1-1-data_wrangling_dplyr.html#exercise-2-2",
    "title": "Ex-1-1: Data Wrangling",
    "section": "3.2 Exercise 2",
    "text": "3.2 Exercise 2\nObjective: Group by flower species (Species) and calculate the average sepal length (Sepal.Length) and sepal width (Sepal.Width) for each species.\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "exercises/1-1-data_wrangling_dplyr.html#exercise-3-2",
    "href": "exercises/1-1-data_wrangling_dplyr.html#exercise-3-2",
    "title": "Ex-1-1: Data Wrangling",
    "section": "3.3 Exercise 3",
    "text": "3.3 Exercise 3\nObjective: Group by cut and color and compute the median price for each combination.\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "exercises/1-1-data_wrangling_dplyr.html#exercise-4-2",
    "href": "exercises/1-1-data_wrangling_dplyr.html#exercise-4-2",
    "title": "Ex-1-1: Data Wrangling",
    "section": "3.4 Exercise 4",
    "text": "3.4 Exercise 4\nObjective: Group by month (Month) and compute the maximum temperature (Temp) and average ozone level (Ozone, omitting NA values) for each month.\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "exercises/1-1-data_wrangling_dplyr.html#exercise-5-1",
    "href": "exercises/1-1-data_wrangling_dplyr.html#exercise-5-1",
    "title": "Ex-1-1: Data Wrangling",
    "section": "3.5 Exercise 5",
    "text": "3.5 Exercise 5\nObjective: Group by diet (Diet) and chick number (Chick). For each combination, compute the final weight (i.e., weight at the maximum time).\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "exercises/1-1-data_wrangling_dplyr.html#exercise-1-calculate-average-mpg-by-cylinder",
    "href": "exercises/1-1-data_wrangling_dplyr.html#exercise-1-calculate-average-mpg-by-cylinder",
    "title": "Ex-1-1: Data Wrangling",
    "section": "4.1 Exercise 1: Calculate Average MPG by Cylinder",
    "text": "4.1 Exercise 1: Calculate Average MPG by Cylinder\nTask: Filter the dataset to cars with more than 100 horsepower. Then, for these cars, calculate the average miles per gallon (mpg) for each number of cylinders (cyl).\nFunctions to use: filter(), mutate(), group_by(), summarize()\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "exercises/1-1-data_wrangling_dplyr.html#exercise-2-adjusted-price-calculation",
    "href": "exercises/1-1-data_wrangling_dplyr.html#exercise-2-adjusted-price-calculation",
    "title": "Ex-1-1: Data Wrangling",
    "section": "4.2 Exercise 2: Adjusted Price Calculation",
    "text": "4.2 Exercise 2: Adjusted Price Calculation\nTask: Filter diamonds that are “Ideal” in cut and have carat less than 1. Calculate an adjusted price which is 90% of the original price. Finally, calculate the average adjusted price for each clarity level.\nFunctions to use: filter(), mutate(), group_by(), summarize()\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "exercises/1-1-data_wrangling_dplyr.html#exercise-3-compute-average-dispersion-by-gear",
    "href": "exercises/1-1-data_wrangling_dplyr.html#exercise-3-compute-average-dispersion-by-gear",
    "title": "Ex-1-1: Data Wrangling",
    "section": "4.3 Exercise 3: Compute Average Dispersion by Gear",
    "text": "4.3 Exercise 3: Compute Average Dispersion by Gear\nTask: Filter cars with 4 or 6 cylinders. Create a new column named disp_per_cyl that calculates the dispersion (disp) per cylinder (cyl). Then compute the average disp_per_cyl for each gear (gear) level.\nFunctions to use: filter(), mutate(), group_by(), summarize()\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "exercises/1-3-data-reshaping.html",
    "href": "exercises/1-3-data-reshaping.html",
    "title": "Ex-1-3: Reshape Datasets",
    "section": "",
    "text": "Datasets: data_long synthetically generated within R below.\nTask: Reshape the data_long dataset to wide format, where each year becomes a separate column. using tidyr::pivot_wider().\nLoad and Create Dataset:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nHere is the output of successfully reshaped data:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\nDatasets: data_wide (data_long converted to wide format)\nTask: Reshape the data_wide dataset to long format using tidyr::pivot_longer(). In the new dataset,\n\nname the column that will hold the current column names year.\nname the column that will hold the values value.\n\nLoad and Create Dataset:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nHere is the output of successfully reshaped data:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "exercises/1-3-data-reshaping.html#problem-1",
    "href": "exercises/1-3-data-reshaping.html#problem-1",
    "title": "Ex-1-3: Reshape Datasets",
    "section": "",
    "text": "Datasets: data_long synthetically generated within R below.\nTask: Reshape the data_long dataset to wide format, where each year becomes a separate column. using tidyr::pivot_wider().\nLoad and Create Dataset:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nHere is the output of successfully reshaped data:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "exercises/1-3-data-reshaping.html#problem-2",
    "href": "exercises/1-3-data-reshaping.html#problem-2",
    "title": "Ex-1-3: Reshape Datasets",
    "section": "",
    "text": "Datasets: data_wide (data_long converted to wide format)\nTask: Reshape the data_wide dataset to long format using tidyr::pivot_longer(). In the new dataset,\n\nname the column that will hold the current column names year.\nname the column that will hold the values value.\n\nLoad and Create Dataset:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nHere is the output of successfully reshaped data:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "exercises/1-3-data-reshaping.html#problem-1-1",
    "href": "exercises/1-3-data-reshaping.html#problem-1-1",
    "title": "Ex-1-3: Reshape Datasets",
    "section": "2.1 Problem 1",
    "text": "2.1 Problem 1\nDatasets: crop_data synthetically generated within R.\nTask: Reshape the economics dataset to wide format using tidyr::pivot_wider(). In doing so, append yield_ to the new column names using the names_prefix option.\nLoad and Create Dataset:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nHere is the output of successfully reshaped data:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "exercises/1-3-data-reshaping.html#problem-2-1",
    "href": "exercises/1-3-data-reshaping.html#problem-2-1",
    "title": "Ex-1-3: Reshape Datasets",
    "section": "2.2 Problem 2",
    "text": "2.2 Problem 2\nDatasets: the crop_data_wide (crop_data in wide format)\nTask: Reshape the economics dataset to long format using tidyr::pivot_longer(). In doing so, remove yield_ from the column names using the names_prefix option.\nLoad and Create Dataset:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nHere is the output of successfully reshaped data:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "exercises/ex-2-1-ggplot2.html",
    "href": "exercises/ex-2-1-ggplot2.html",
    "title": "Ex-2-1: Data Visualization",
    "section": "",
    "text": "Objective: Create a scatter plot of miles-per-gallon (mpg) against horsepower (hp), colored by the number of cylinders (cyl). Make the size of the points larger than the default (you can pick any value as long as it is larger than the default).\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nHere is the output you should be getting:\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data = mtcars) +\n  geom_point(aes(x = hp, y = mpg, color = as.factor(cyl)), size = 2)\n\n\n\n\n\n\n\n\nObjective: Create a boxplot showing the distribution of petal lengths (Petal.Length) for each species (Species). Make the color of the borders of the boxes red.\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nHere is the output you should be getting:\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data = iris) +\n  geom_boxplot(aes(x = Species, y = Petal.Length, fill = Species), color = \"red\") \n\n\n\n\n\n\n\n\nObjective: Create a histogram of diamond prices (price) by cut (the fill color of the histogram differs by cut). Use alpha = 0.6 so that the histograms are slightly transparent.\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nHere is the output you should be getting:\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data = diamonds) +\n  geom_histogram(\n    aes(x = price, fill = cut),\n    alpha = 0.6,\n    bins = 50\n  )\n\n\n\n\n\n\n\n\nObjective: Create a line plot that shows the progression of weight (weight) over time (Time) for each of the chicks that were fed Diet 1 (Hint: you first need to filter the data so that you only have the observations that has Diet == 1). Make the line color dependent on Chick.\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nHere is the output you should be getting:\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data = ChickWeight %&gt;% filter(Diet == 1)) +\n  geom_line(aes(x = Time, y = weight, color = Chick))"
  },
  {
    "objectID": "exercises/ex-2-1-ggplot2.html#exercise-1",
    "href": "exercises/ex-2-1-ggplot2.html#exercise-1",
    "title": "Ex-2-1: Data Visualization",
    "section": "",
    "text": "Objective: Create a scatter plot of miles-per-gallon (mpg) against horsepower (hp), colored by the number of cylinders (cyl). Make the size of the points larger than the default (you can pick any value as long as it is larger than the default).\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nHere is the output you should be getting:\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data = mtcars) +\n  geom_point(aes(x = hp, y = mpg, color = as.factor(cyl)), size = 2)"
  },
  {
    "objectID": "exercises/ex-2-1-ggplot2.html#exercise-2",
    "href": "exercises/ex-2-1-ggplot2.html#exercise-2",
    "title": "Ex-2-1: Data Visualization",
    "section": "",
    "text": "Objective: Create a boxplot showing the distribution of petal lengths (Petal.Length) for each species (Species). Make the color of the borders of the boxes red.\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nHere is the output you should be getting:\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data = iris) +\n  geom_boxplot(aes(x = Species, y = Petal.Length, fill = Species), color = \"red\")"
  },
  {
    "objectID": "exercises/ex-2-1-ggplot2.html#exercise-3",
    "href": "exercises/ex-2-1-ggplot2.html#exercise-3",
    "title": "Ex-2-1: Data Visualization",
    "section": "",
    "text": "Objective: Create a histogram of diamond prices (price) by cut (the fill color of the histogram differs by cut). Use alpha = 0.6 so that the histograms are slightly transparent.\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nHere is the output you should be getting:\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data = diamonds) +\n  geom_histogram(\n    aes(x = price, fill = cut),\n    alpha = 0.6,\n    bins = 50\n  )"
  },
  {
    "objectID": "exercises/ex-2-1-ggplot2.html#exercise-4",
    "href": "exercises/ex-2-1-ggplot2.html#exercise-4",
    "title": "Ex-2-1: Data Visualization",
    "section": "",
    "text": "Objective: Create a line plot that shows the progression of weight (weight) over time (Time) for each of the chicks that were fed Diet 1 (Hint: you first need to filter the data so that you only have the observations that has Diet == 1). Make the line color dependent on Chick.\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nHere is the output you should be getting:\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data = ChickWeight %&gt;% filter(Diet == 1)) +\n  geom_line(aes(x = Time, y = weight, color = Chick))"
  },
  {
    "objectID": "exercises/ex-2-1-ggplot2.html#exercise-1-1",
    "href": "exercises/ex-2-1-ggplot2.html#exercise-1-1",
    "title": "Ex-2-1: Data Visualization",
    "section": "2.1 Exercise 1",
    "text": "2.1 Exercise 1\nObjective: Create a scatter plot of miles-per-gallon (mpg) against weight (wt), colored by the number of gears (gear). Facet the plot by the number of cylinders (cyl).\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nHere is the output you should be getting:\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data = mtcars) +\n  geom_point(aes(x = wt, y = mpg, color = as.factor(gear))) +\n  facet_wrap(~cyl)"
  },
  {
    "objectID": "exercises/ex-2-1-ggplot2.html#exercise-2-1",
    "href": "exercises/ex-2-1-ggplot2.html#exercise-2-1",
    "title": "Ex-2-1: Data Visualization",
    "section": "2.2 Exercise 2",
    "text": "2.2 Exercise 2\nObjective: Create a boxplot of diamond prices (price) for each diamond cut (cut). Facet the plot by diamond color (color).\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nHere is the output you should be getting:\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data = diamonds) +\n  geom_boxplot(aes(x = cut, y = price, fill = cut)) +\n  facet_wrap(~color)"
  },
  {
    "objectID": "exercises/ex-2-1-ggplot2.html#exercise-3-1",
    "href": "exercises/ex-2-1-ggplot2.html#exercise-3-1",
    "title": "Ex-2-1: Data Visualization",
    "section": "2.3 Exercise 3",
    "text": "2.3 Exercise 3\nObjective: Plot the progression of weight (weight) over time (Time) for each chick using a line plot. Facet the visualization by the diet type (Diet).\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nHere is the output you should be getting:\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data = ChickWeight) +\n  geom_line(aes(x = Time, y = weight, group = Chick)) +\n  facet_wrap(~Diet)"
  },
  {
    "objectID": "exercises/ex-2-1-ggplot2.html#exercise-4-1",
    "href": "exercises/ex-2-1-ggplot2.html#exercise-4-1",
    "title": "Ex-2-1: Data Visualization",
    "section": "2.4 Exercise 4",
    "text": "2.4 Exercise 4\nObjective: Create a scatter plot of highway miles-per-gallon (hwy) against engine displacement (displ). Facet the plot by the drive type (drv), with different panels for each type of drive (front-wheel drive, rear-wheel drive, and four-wheel drive).\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nHere is the output you should be getting:\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data = mpg) +\n  geom_point(aes(x = displ, y = hwy, color = class)) +\n  facet_wrap(~drv)"
  },
  {
    "objectID": "exercises/ex-2-1-ggplot2.html#exercise-5",
    "href": "exercises/ex-2-1-ggplot2.html#exercise-5",
    "title": "Ex-2-1: Data Visualization",
    "section": "2.5 Exercise 5",
    "text": "2.5 Exercise 5\nObjective: Plot a boxplot showing the count of insects (count) for each spray type (spray). Facet the plot by spray type (spary).\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nHere is the output you should be getting:\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data = InsectSprays) +\n  geom_boxplot(aes(x = spray, y = count, fill = spray)) +\n  facet_wrap(~spray)"
  },
  {
    "objectID": "exercises/ex-2-3-practice_theme.html",
    "href": "exercises/ex-2-3-practice_theme.html",
    "title": "Ex-2-3: Modify themes of ggplot2 figures",
    "section": "",
    "text": "Load Required Packages:\n\nlibrary(ggplot2)\nlibrary(dplyr)\n\n\n1 Exercise 1: Modify Plot Background and Grid\nDataset: mtcars (available within R).\nTask: Create a scatter plot of mpg against hp. Adjust theme to: (1) set plot background to lightblue, (2) change major grid to white, (3) remove minor grid and axis ticks.\n\n1.0.1 Work here\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nHere is the output of successfully created plot:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n1.0.2 Answer\n\n\nCode\n(\n  ggplot(mtcars, aes(x = hp, y = mpg)) +\n    geom_point() +\n    theme(\n      plot.background = element_rect(fill = \"lightblue\"),\n      panel.grid.major = element_line(color = \"white\"),\n      panel.grid.minor = element_blank(),\n      axis.ticks = element_blank()\n    )\n)\n\n\n\n\n\n\n2 Exercise 2: Change Title and Axis Text Styles\nDataset: diamonds (ggplot2).\n\n2.0.1 Work here\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nHere is the output of successfully created plot:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n2.0.2 Answer\n\n\nCode\n(\n  ggplot(diamonds, aes(x = carat, y = price)) +\n    geom_point(alpha = 0.5) +\n    ggtitle(\"Price vs Carat\") +\n    theme(\n      plot.title = element_text(face = \"bold\", color = \"red\"),\n      axis.text = element_text(face = \"italic\")\n    )\n)\n\n\n\n\n\n\n3 Exercise 3: Alter Legend Properties\nDataset: iris (available within R).\n\n3.0.1 Work here\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nHere is the output of successfully created plot:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n3.0.2 Answer\n\n\nCode\n(\n  ggplot(iris, aes(x = Sepal.Width, y = Sepal.Length, color = Species)) +\n    geom_point() +\n    theme(\n      legend.position = \"bottom\",\n      legend.background = element_rect(fill = \"grey90\"),\n      legend.title = element_text(face = \"bold\", color = \"blue\")\n    )\n)\n\n\n\n\n\n\n4 Exercise 4: Adjust Axis Line Appearance and Title Position\nDataset: Fictitious dataset of monthly sales (sales_data created in setup).\n\n4.0.1 Work here\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nHere is the output of successfully created plot:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n4.0.2 Answer\n\n\nCode\n(\n  ggplot(sales_data, aes(x = month, y = sales)) +\n    geom_line(group = 1) +\n    geom_point() +\n    ggtitle(\"Monthly Sales\") +\n    theme(\n      axis.line = element_line(size = 2),\n      plot.title.position = \"plot\"\n    )\n)\n\n\n\n\n\n\n5 Exercise 5: Adjusting Strip Text in Facets\nDataset: mpg (ggplot2).\n\n5.0.1 Work here\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nHere is the output of successfully created plot:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n5.0.2 Answer\n\n\nCode\n(\n  ggplot(mpg, aes(x = displ, y = hwy)) +\n    geom_point() +\n    facet_wrap(~class) +\n    theme(\n      strip.text = element_text(color = \"white\"),\n      strip.background = element_rect(fill = \"darkblue\")\n    )\n)\n\n\n\n\n\n\n6 Exercise 6: Modify Legend Key Shapes\nDataset: iris (available within R).\n\n6.0.1 Work here\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nHere is the output of successfully created plot:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n6.0.2 Answer\n\n\nCode\n(\n  ggplot(iris, aes(x = Sepal.Width, y = Sepal.Length, color = Species)) +\n    geom_point() +\n    theme(\n      legend.key = element_rect()\n    ) +\n    guides(\n      color = guide_legend(override.aes = list(shape = 15))\n    )\n)\n\n\n\n\n\n\n7 Exercise 7: Custom Axis Ticks and Labels\nDataset: diamonds (ggplot2).\n\n7.0.1 Work here\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nHere is the output of successfully created plot:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n7.0.2 Answer\n\n\nCode\n(\n  ggplot(diamonds, aes(x = carat, y = price)) +\n    geom_point(alpha = 0.5) +\n    theme(\n      axis.ticks.x = element_line(size = 2),\n      axis.text.y = element_text(color = \"red\")\n    )\n)\n\n\n\n\n\n\n8 Exercise 8: Modify Plot Margins\nDataset: airquality (available within R).\n\n8.0.1 Work here\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nHere is the output of successfully created plot:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n8.0.2 Answer\n\n\nCode\n(\n  ggplot(airquality, aes(x = Wind, y = Temp)) +\n    geom_point() +\n    theme(\n      plot.margin = margin(2, 2, 2, 2, \"cm\")\n    )\n)\n\n\n\n\n\n9 Exercise 9: Remove Plot Labels\nDataset: Fictitious dataset of weekly sales.\nTask: Customize the theme to remove axis title and plot title.\nCreate Dataset:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nHere is the output of successfully created plot:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nCode\n(\n  ggplot(sales_weekly, aes(x = week, y = sales)) +\n    geom_line() +\n    ggtitle(\"Weekly Sales\") +\n    theme(\n      plot.title = element_blank(),\n      axis.title.x = element_blank(),\n      axis.title.y = element_blank()\n    )\n)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Science with R for Environmental, Agricultural, and Social Scientists",
    "section": "",
    "text": "This website hosts course materials for Data Science with R for Environmental, Agricultural, and Social Scientists (AECN 896-05) at UNL."
  },
  {
    "objectID": "lectures/Chapter-2-Quarto/02-0-Github-sublime-merge.html#github",
    "href": "lectures/Chapter-2-Quarto/02-0-Github-sublime-merge.html#github",
    "title": "02-0: Clone Github Repositories",
    "section": "Github",
    "text": "Github\n\nGithub is an online service to store primarily computer programs (small datasets are okay to store).\nGithub repository is like a folder on your computer (but it is online)\n\npublic: anybody can access it\nprivate: only the owner can access it (you cannot even see it on Github)\n\nThere are numerous public repositories that serve as excellent examples to learn coding\nYou can clone (just another way of saying copy) any public Github repositories to your local computer\n\n\n\n\n\nObjective\n\n\nLearn how to clone Github repositories."
  },
  {
    "objectID": "lectures/Chapter-2-Quarto/02-0-Github-sublime-merge.html#sublime-merge",
    "href": "lectures/Chapter-2-Quarto/02-0-Github-sublime-merge.html#sublime-merge",
    "title": "02-0: Clone Github Repositories",
    "section": "Sublime Merge",
    "text": "Sublime Merge\n\nIn cloning Github repositories, we will use Sublime Merge.\nSublime Merge is certainly not the only option. But, I found it very easy and light-weight to use especially for just cloning Github repositories.\n\n\n\n\n\nInstall Sublime Merge\n\n\nClick here and install it."
  },
  {
    "objectID": "lectures/Chapter-2-Quarto/02-0-Github-sublime-merge.html#clone-a-repository-to-your-computer",
    "href": "lectures/Chapter-2-Quarto/02-0-Github-sublime-merge.html#clone-a-repository-to-your-computer",
    "title": "02-0: Clone Github Repositories",
    "section": "Clone a repository to your computer",
    "text": "Clone a repository to your computer\n\nCopy the url of the repositoryClone the repositoryDo it yourself\n\n\n\nVisit the Github repository you want to clone (copy)\nClick on the Code button\nClick on the a button with two sheets of papers, which will copy the url of the repository\n\n\n\n\n\nStep 1Step 2\n\n\nGo to Sublime Merge and follow file -&gt; Clone Repository\n\n\n\nYou should now see something like below.\n\n\nNote that the source url you copied is already printed on the Source URL box (if not, just paste the url yourself).\nOn Repository Name, the name of the repository for which you copied the url is printed automatically. If you would like a different name, type the name you want.\nOn Destination Path, click on the gray box with ... to select the folder on your machine in which the repository is going to be cloned.\nFinally, hit the Clone button\n\n\n\n\n\n\n\n\nLet’s clone a repository that has many templates and sample qmd files used in this course.\nWe will actually use this template later, so do not delete it after you clone it.\nThe repository is found here."
  },
  {
    "objectID": "lectures/Chapter-2-Quarto/02-2-Quarto-revealjs.html#get-started",
    "href": "lectures/Chapter-2-Quarto/02-2-Quarto-revealjs.html#get-started",
    "title": "02-2: Using Quarto to Create Presentations",
    "section": "Get Started",
    "text": "Get Started\n\nYAMLCreating a new slideInclude R codes and results\n\n\nThe first thing you need to do to create a presentation using Quarto via revealjs is to add appropriate format information in the YAML header of the qmd file like below:\n\n---\ntitle: \"02-1 Using Quarto to Create Presentations\"\nformat:\n  revealjs:\n    theme: [default, ../custom.scss]\n    fontsize: 1.6em\n    callout-icon: false\n    scrollable: true\n    echo: true\n    fig-dpi: 400\n---\n\n\n\n\nNote\n\n\n\nformat needs to be specified as revealjs\nYou can add revealjs-specific options below revealjs: (We will look at various options later).\n\n\n\n\n\n\nYou can start a new slide using either # or ##.\n\nUse # (level 1 header)\n# new section title\n\nBy default, this creates a new slide with new section title printed left-aligned at the middle of the slide.\n\nUse ## (level 2 header)\n## new slide title\n\nBy default, this creates a new slide with new slide title printed at the top left corner of the slide.\n\n\n\n\nDirection\n\n\nLook at the sample_qmd_revealjs.qmd\n\n\n\n\n\n\nWe have already learned how to do this. The way we include R codes are consistent across different output formats (including presentation with revealjs)!!\n```{r}\nR codes \n```\n\n\n\n\nRecommended global settings for research presentations\n\n\nPlace the options below in the YAML header, which hides all the codes, messages, and warnings that the audience does not have to see.\nexecute:\n  echo: false\n  message: false\n  warning: false"
  },
  {
    "objectID": "lectures/Chapter-2-Quarto/02-2-Quarto-revealjs.html#useful-tools",
    "href": "lectures/Chapter-2-Quarto/02-2-Quarto-revealjs.html#useful-tools",
    "title": "02-2: Using Quarto to Create Presentations",
    "section": "Useful Tools",
    "text": "Useful Tools\n\nIncremental listMultiple columnsScrollableSpeaker NoteLogoTabsets\n\n\n\nCodeOutput\n\n\n::: {.incremental}\n- collect data\n- run statistical analysis\n- report\n:::\n\n\n\ncollect data\nrun statistical analysis\nreport\n\n\n\n\n\n\n\n\nCodeOutput\n\n\n:::: {.columns}\n\n::: {.column width=\"40%\"}\n\nPlot 1\n\n```{r}\nggplot(data = mtcars) +\n  geom_point(aes(y = mpg,  x = cyl))\n```\n\n:::\n\n::: {.column width=\"60%\"}\n\nPlot 2\n\n```{r}\nggplot(data = mtcars) +\n  geom_histogram(aes(x = mpg))\n```\n:::\n\n::::\n\n\n\n\nPlot 1\n\nggplot(data = mtcars) +\n  geom_point(aes(y = mpg,  x = cyl))\n\n\n\n\n\n\n\n\n\nPlot 2\n\nggplot(data = mtcars) +\n  geom_histogram(aes(x = mpg))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdd scrollable: true under revealjs: to make each of the slides scrollable when the contents are too big to present on a screen.\n\n---\nformat:\n  revealjs:\n    scrollable: true\n---\n\nscrollable: true is enabled in this presentation.\nyou\ncan\nsee\nthat\nright?\n\n\n\nggplot(data = mtcars) +\n  geom_histogram(aes(x = mpg)) \n\n\n\n\n\n\n\n\n\nYou do not see me!\n\n\n\n\n\nTry\n\n\nHitting the “s” key will generate a pop-up window with speaker view.\n\n\n\n\n\n\nYou can add a logo with the logo option under revealjs:.\n---\nformat:\n  revealjs:\n    logo: logo.png\n---\n\nThis presentation has the code below in the YAMl and you can see the logo at the bottom-right corner.\n---\nformat:\n  revealjs:\n    logo: nebraska-n.jpg\n---\n\n\nYou can create tabs using the following code:\n\n::: {.panel-tabset}\n\n### Tab A\n\nContent for `Tab A`\n\n### Tab B\n\nContent for `Tab B`\n\n:::"
  },
  {
    "objectID": "lectures/Chapter-2-Quarto/02-2-Quarto-revealjs.html#figure",
    "href": "lectures/Chapter-2-Quarto/02-2-Quarto-revealjs.html#figure",
    "title": "02-2: Using Quarto to Create Presentations",
    "section": "Figure",
    "text": "Figure\n\nHowExample 1Example 2Example 3To be exact\n\n\nYou can use\n\nout-width: option to control the size of a figure.\nfig-align: option to control the alignment of a figure.\n\nSee here for all the options available.\n\n\n\nCodeOutput\n\n\n```{r}\n#| out-width: 100%\nggplot(data = mtcars) +\n  geom_histogram(aes(x = mpg)) \n```\n\n\n\nggplot(data = mtcars) +\n  geom_histogram(aes(x = mpg)) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCodeOutput\n\n\n```{r}\n#| out-width: 80%\n#| fig-align: center\nggplot(data = mtcars) +\n  geom_histogram(aes(x = mpg)) \n```\n\n\n\nggplot(data = mtcars) +\n  geom_histogram(aes(x = mpg)) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCodeOutput\n\n\n```{r}\n#| out-width: 50%\n#| fig-align: right\nggplot(data = mtcars) +\n  geom_histogram(aes(x = mpg)) \n```\n\n\n\nggplot(data = mtcars) +\n  geom_histogram(aes(x = mpg)) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHowCodeOutput\n\n\nTo set the figure size exactly you can specify all of the four options:\n\nfig-width\nfig-height\nout-width\nout-height\n\n\n\n\nNote\n\n\n\nBy default fig- options take numeric numbers and the unit is inch.\nFor out- options you need to add in after a numeric number to make them consistent with the fig- options.\n\n\n\n\n\n\n```{r}\n#| fig-width: 10\n#| fig-height: 3\n#| out-width: 10in\n#| out-height: 3in\nggplot(data = mtcars) +\n  geom_histogram(aes(x = mpg)) \n```\n\n\n\nggplot(data = mtcars) +\n  geom_histogram(aes(x = mpg))"
  },
  {
    "objectID": "lectures/Chapter-2-Quarto/02-2-Quarto-revealjs.html#theme",
    "href": "lectures/Chapter-2-Quarto/02-2-Quarto-revealjs.html#theme",
    "title": "02-2: Using Quarto to Create Presentations",
    "section": "Theme",
    "text": "Theme\n\nPre-made themesCustomized themes\n\n\nThere are many pre-made themes that you can apply to revealjs presentations. See the list here.\nYou can set a theme using the theme option in the YAML header like below:\n\nformat:\n  revealjs:\n    theme: dark\n\n\n\n\n\nDirection\n\n\nTry one of the themes listed and see how the theme of the presentation changes."
  },
  {
    "objectID": "lectures/Chapter-2-Quarto/02-2-Quarto-revealjs.html#resources",
    "href": "lectures/Chapter-2-Quarto/02-2-Quarto-revealjs.html#resources",
    "title": "02-2: Using Quarto to Create Presentations",
    "section": "Resources",
    "text": "Resources\n\nThe best resources is the official documentation of how to use Quarto with revealjs found here.\nThere are more you can do with revealjs, which can be found here (I have not found them necessary)."
  },
  {
    "objectID": "lectures/Chapter-3-DataWrangling/03-1-input-output.html#importing-and-exporting-datasets-1",
    "href": "lectures/Chapter-3-DataWrangling/03-1-input-output.html#importing-and-exporting-datasets-1",
    "title": "03-1: Importing Files and Exporting to Files",
    "section": "Importing and Exporting Datasets",
    "text": "Importing and Exporting Datasets\n\nObjectives and DirectionsDirectionsHow\n\n\n\nRead datasets in various formats (csv, xlsx, dta, and rds) containing corn yields in Nebraska counties for the year of 2008.\nWrite R objects as files in various formats\n\n\n\n\nGo here and clone the repository that hosts datasets used in this lecture\nInstall the tidyverse and haven packages, which we will use later to read/write files.\n\n\ninstall.packages(c(\"tidyverse\", \"haven\"))\n\n\n\n\nNote\n\n\nThe tidyverse package does far more than just reading and writing files. We will learn it extensively later.\n\n\n\n\n\nCheck the format in which the dataset is stored by looking at the extension of the file (what comes after the file name and a dot)\n\ncorn.csv: a file format Microsoft Excel supports.\ncorn.xlsx: another format supported by Microsoft Excel, which may have more than one tabs of data sheets.\ncorn.dta: a format that STATA support (software that is immensely popular for economists).\ncorn.rds: a format that R supports.\n\nWhen you import a dataset, you need to use a particular function that is appropriate for the particular type of format the dataset is in."
  },
  {
    "objectID": "lectures/Chapter-3-DataWrangling/03-1-input-output.html#read-a-csv-file",
    "href": "lectures/Chapter-3-DataWrangling/03-1-input-output.html#read-a-csv-file",
    "title": "03-1: Importing Files and Exporting to Files",
    "section": "Read a CSV file",
    "text": "Read a CSV file\n\nread.csv()read_csv()Compare\n\n\nYou can use read.csv() from the base package.\n\nSyntax\n\n#--- NOT RUN ---#  \ndata = read.csv(path to the file to import)\n\n\nExamples\n\ncorn_yields_df &lt;- read.csv(\"~/Dropbox/TeachingUNL/Data-Science-with-R-Quarto/Lectures/Chapter-3-DataWrangling/corn_yields.csv\")\n\n\n\nYou can use read_csv() from the readr package.\n\nSyntax\n\n#--- NOT RUN ---#  \ndata = readr::read_csv(path to the file to import)\n\n\nExamples\n\ncorn_yields_tbl &lt;- readr::read_csv(\"~/Dropbox/TeachingUNL/Data-Science-with-R-Quarto/Lectures/Chapter-3-DataWrangling/corn_yields.csv\")\n\n\n\n Direction: evaluate corn_yields_df and corn_yields_tbl to see the differences.\n\nData read using read.csv():\n\nclass(corn_yields_df)\n\n[1] \"data.frame\"\n\n\n\nData read using read_csv():\n\nclass(corn_yields_tbl) \n\n[1] \"spec_tbl_df\" \"tbl_df\"      \"tbl\"         \"data.frame\""
  },
  {
    "objectID": "lectures/Chapter-3-DataWrangling/03-1-input-output.html#setting-the-working-directory",
    "href": "lectures/Chapter-3-DataWrangling/03-1-input-output.html#setting-the-working-directory",
    "title": "03-1: Importing Files and Exporting to Files",
    "section": "Setting the working directory",
    "text": "Setting the working directory\n\nWhat and whyhownavigationRStudio project\n\n\n\nIn the previous slide, we provided the full path to the csv file to read onto R.\nIf you expect to import and/or export (save) datasets and R objects often from/to a particular directory, it would be nice to tell R to look for files in the directory by default. So, the R code looks more like this:\n\n\ncorn_yield &lt;- read.csv(\"corn_yields.csv\")\n\n\n\nThis will save us from writing out the full path every time we either import or export datasets.\nYou can do so by designating the directory as the working directory.\nOnce the working directory is set, R looks for files in that directory unless told otherwise.\nIt is not just when importing datasets. When you export an R object as a file, R will create a file in the working directory by default.\n\n\n\nYou can use setwd() to designate a directory as the working directory:\n\n#--- Setting a directory (path) in your computer---#\nsetwd(\"/Users/tmieno2/Dropbox/TeachingUNL/Data-Science-with-R-Quarto/Lectures/Chapter-3-DataWrangling\")\n\n\nYou can check the current working directory using the getwd() function:\n\n#--- find the current working directory ---#\ngetwd()\n\n[1] \"/Users/taromieno/Library/CloudStorage/Dropbox/TeachingUNL/Data-Science-with-R-Quarto/lectures/Chapter-3-DataWrangling\"\n\n\n\n\nSuppose it is convenient for you to set the working directory somewhere else than the folder where all the datasets are residing.\n\nsetwd(\"~/Dropbox/TeachingUNL/DataScience\")\n\n\nYou can then provide the path to the file relative to the working directory like this:\n\ndata &lt;- read_csv(\"Datasets/Chapter_3_data_wrangling/corn_yields.csv\")\n\n\nThis is equivalent to:\n\ndata &lt;- read_csv(\"~/Dropbox/TeachingUNL/DataScience/Datasets/Chapter_3_data_wrangling/corn_yields.csv\")\n\n\nYou can use .. to move up a folder. For example, if you want to import corn_yields.csv stored in “~/Dropbox/TeachingUNL”, then the following works:\n\ndata &lt;- read_csv(\"../corn_yields.csv\")\n\n\n\nYou can create an R Project using RStudio:\n\nclick on a blue transparent box with a plus sign at the upper left corner of RStudio\nclick on “new directory” (to initiate a new folder) or “existing directory” (to designate an existing folder)\n\n\n\n\n\nLet’s try\n\n\n\nCreate an R project\nWhen you open an R Project folder, then the working directory is set at the project folder. Confirm this:\n\n\ngetwd()"
  },
  {
    "objectID": "lectures/Chapter-3-DataWrangling/03-1-input-output.html#read-a-sheet-from-an-xlsx-file",
    "href": "lectures/Chapter-3-DataWrangling/03-1-input-output.html#read-a-sheet-from-an-xlsx-file",
    "title": "03-1: Importing Files and Exporting to Files",
    "section": "Read a sheet from an xls(x) file",
    "text": "Read a sheet from an xls(x) file\n\nInstructionSyntax and ExamplesNote\n\n\n\nYou can use read_excel() from the readxl package to read data sheets from an xls(x) file, which is part of the tidyverse package.\nThe readxl package is installed when you install the tidyverse pacakge.\nHowever, it is not loaded automatically when you load the tidyverse package.\nSo, you need to library the package even if you have loaded the tidyverse package.\n\n\nlibrary(readxl)\n\n\n\nSyntax\n\nread_excel(path to the file, sheet = x)\n\n\nx: sheet number\n\nExamples\nImport a sheet of an xls(x) file using read_excel():\n\ncorn_08 &lt;- read_excel(\"corn_yields.xls\", sheet = 1) # 1st sheet \ncorn_09 &lt;- read_excel(\"corn_yields.xls\", sheet = 2) # 2nd sheet\n\n\n\n\n#--- check the class ---#\nclass(corn_08) \n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n\nNotice that the data is converted into a tibble (because the readxl package is part of the tidyverse package.)."
  },
  {
    "objectID": "lectures/Chapter-3-DataWrangling/03-1-input-output.html#read-a-stata-data-file-.dta",
    "href": "lectures/Chapter-3-DataWrangling/03-1-input-output.html#read-a-stata-data-file-.dta",
    "title": "03-1: Importing Files and Exporting to Files",
    "section": "Read a STATA data file (.dta)",
    "text": "Read a STATA data file (.dta)\n\nSyntax and ExamplesNote\n\n\nUse the read_dta() function from the haven package.\n\n#--- load the package ---#\nlibrary(haven) \n\n\nSyntax\n\n#--- Syntax (NOT RUN) ---#\nhaven::read_dta(file path)\n\n\nExamples\n\n#--- import the data ---#\ncorn_yields &lt;- haven::read_dta(\"corn_yields.dta\")\n\n\n\n\n#--- check the class ---#\nclass(corn_yields) \n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n\nNotice that the data is converted into a data.frame object, not a tibble."
  },
  {
    "objectID": "lectures/Chapter-3-DataWrangling/03-1-input-output.html#read-an-rds-file",
    "href": "lectures/Chapter-3-DataWrangling/03-1-input-output.html#read-an-rds-file",
    "title": "03-1: Importing Files and Exporting to Files",
    "section": "Read an rds file",
    "text": "Read an rds file\n\nInstructionSyntax and ExamplesNote\n\n\n\nAn rds ( r data set) file is a file type that is supported by R.\nYou can use the readRDS() function to read an rds file.\nNo special packages are necessary.\n\n\n\nSyntax\n\nreadRDS(\"path to the file\") \n\n\nExamples\n\ncorn_yields &lt;- readRDS(\"corn_yields.rds\") \n\n\n\n\nclass(corn_yields)\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n\n\nNotice that the imported dataset is already a tibble object. This is because the R object exported as corn_yields.rds was tibble."
  },
  {
    "objectID": "lectures/Chapter-3-DataWrangling/03-1-input-output.html#export-an-r-object",
    "href": "lectures/Chapter-3-DataWrangling/03-1-input-output.html#export-an-r-object",
    "title": "03-1: Importing Files and Exporting to Files",
    "section": "Export an R object",
    "text": "Export an R object\n\nInstructionSyntax and ExamplesNotes on RDS\n\n\n\nExporting datasets work much the same way as importing them.\nHere is the list of functions that let you export a data.frame or (tibble) in different formats:\n\ncsv: write_csv()\ndta: write_dta()\nrds: saveRDS()\n\n\n\n\nSyntax\n\nexport_function(obeject name, file name)\n\n\nExamples\n\n#--- export as csv ---#\nreadr::write_csv(corn_yields, \"corn_yields_exp_rownames.csv\")\n\n#--- export as dta ---#\nhaven::write_dta(corn_yields, \"corn_yields_exp.dta\")\n\n#--- export as rds ---#\nsaveRDS(corn_yields, \"corn_yields_exp.rds\")\n\n#--- export as xls file ---#\n# just don't do it\n\n\n\n\nObject type preservationFile size\n\n\nYou can export any kind of R objects as an rds file.\n\na_list &lt;- list(a = c(\"R\", \"rocks\"), b = corn_yields)   \n\nsaveRDS(a_list, \"a_list.rds\")\n\nreadRDS(\"a_list.rds\")\n\n$a\n[1] \"R\"     \"rocks\"\n\n$b\n# A tibble: 161 × 9\n    Year State  FIPS County_name State_name Commodity `Data item`      Irrigated\n   &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;       &lt;chr&gt;      &lt;chr&gt;     &lt;chr&gt;                &lt;int&gt;\n 1  2008    31 31019 BUFFALO     NEBRASKA   CORN      CORN, GRAIN - Y…         0\n 2  2008    31 31019 BUFFALO     NEBRASKA   CORN      CORN, GRAIN, IR…         1\n 3  2008    31 31041 CUSTER      NEBRASKA   CORN      CORN, GRAIN - Y…         0\n 4  2008    31 31041 CUSTER      NEBRASKA   CORN      CORN, GRAIN, IR…         1\n 5  2008    31 31047 DAWSON      NEBRASKA   CORN      CORN, GRAIN - Y…         0\n 6  2008    31 31047 DAWSON      NEBRASKA   CORN      CORN, GRAIN, IR…         1\n 7  2008    31 31077 GREELEY     NEBRASKA   CORN      CORN, GRAIN - Y…         0\n 8  2008    31 31077 GREELEY     NEBRASKA   CORN      CORN, GRAIN, IR…         1\n 9  2008    31 31079 HALL        NEBRASKA   CORN      CORN, GRAIN - Y…         0\n10  2008    31 31079 HALL        NEBRASKA   CORN      CORN, GRAIN, IR…         1\n# ℹ 151 more rows\n# ℹ 1 more variable: Yield &lt;int&gt;\n\n\nAs you can see a list is saved as an rds file, and when imported, it is still a list.\n\n\nCheck the size of the corn data files in different formats.\nWhich one is the smallest?"
  },
  {
    "objectID": "lectures/Chapter-3-DataWrangling/03-3-reshape-merge.html#long-and-wide-formats",
    "href": "lectures/Chapter-3-DataWrangling/03-3-reshape-merge.html#long-and-wide-formats",
    "title": "03-3: Reshaping and Merging",
    "section": "Long and wide formats",
    "text": "Long and wide formats\n\nlong vs widewide or long?too long\n\n\n\n\nLong format\nA single column representing a single variable\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWide format\nMultiple column representing a single variable\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNote: there is nothing in the dataset that tells you what the data values represent in the wide format.\n\n\n\n\n\nSuppose you are interested in estimating the following statistical model:\n\\[corn yield = \\beta_0 + \\beta_1 R_{May}  + \\beta_2 R_{June} + \\beta_2 R_{July} + \\beta_2 R_{August} + \\beta_2 R_{September} + v\\]\nwhere \\(R\\) refers to rainfall.\nThen the following dataset is in a  long  format:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nThis is  too long  for your analysis.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\nPoint\n\n\nWhether a dataset is wide or long is determined based on what you are doing with the dataset."
  },
  {
    "objectID": "lectures/Chapter-3-DataWrangling/03-3-reshape-merge.html#long-to-wide",
    "href": "lectures/Chapter-3-DataWrangling/03-3-reshape-merge.html#long-to-wide",
    "title": "03-3: Reshaping and Merging",
    "section": "Long to wide",
    "text": "Long to wide\n\npreparehow and exampleprefixmultiple columns\n\n\nCreate the following dataset in long format:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nHow\nTo convert a long-formatted data.frame into a wide-formatted data.frame, you can use tidyr::pivot_wider() function from the tidyr package.\n\n#--- NOT RUN ---#\ntidyr::pivot_wider(\n  data,\n  names_from = variable 1,\n  values_from = variable 2\n)\n\n\nthe value of variable 1 becomes the name the new variables\nthe value of variable 2 becomes the value of the new variables\n\n\nExample\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nthe value of year becomes the name the new variables\nthe value of yield becomes the value of the new variables\n\n\n\n\n\n\nYou can append a character string to the new variable names. The previous example had 2019 and 2010 as the name of the new variables.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPrepare a datasetdemonstration\n\n\nCreate the following data in long format;\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nYou can simply supply multiple variables to be made wide like this:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-3-DataWrangling/03-3-reshape-merge.html#wide-to-long",
    "href": "lectures/Chapter-3-DataWrangling/03-3-reshape-merge.html#wide-to-long",
    "title": "03-3: Reshaping and Merging",
    "section": "Wide to long",
    "text": "Wide to long\n\nhow and exampleprefixmultiple sets of columns\n\n\n\n\nHow\nTo convert a long-formatted data.frame into a wide-formatted data.frame, you can use tidyr::pivot_longer() function from the tidyr package.\n\n#--- NOT RUN ---#\ntidyr::pivot_longer(\n  data, \n  cols = x,\n  names_to = y, \n  values_to = z \n)\n\n\nx: list of the name of the columns to pivot into longer format\ny: what the name of x represents\nz: what the values stored in x represents\n\n\nExample\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nx: all the variables except state\ny: “year”\nz: “yield”\n\n\n\n\n\n\nYou do not want year_ in front of the year numbers in the new year variable? You can use the names_prefix option as follows:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNotice year is character. Convert it to numeric using as.numeric() if you use is as a numeric variable.\n\n\n\nPrepone-step?separate()three-step\n\n\n\n\nLong\nCreate the following dataset in the long format;\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWide\nConvert the long dataset into the wide format:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n Objective : We would like to convert the wide data back to the original long data.\n\n\n\n\n\nYou cannot revert this data back to the original long-formatted data in one step.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nHowever, you take advantage of dplyr::separate() function, which separate a variable of type character by a user-specified separator into two variables in the dataset.\n\n#--- NOT RUN ---#\nseparate(data, variable name, the name of variables, separator)\n\n\n\nBefore separation:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAfter separation:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\nAfter separating type_year to type and year, all you have to do is to apply tidyr::pivot_wider() to have the desired long-formatted data.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-3-DataWrangling/03-3-reshape-merge.html#exercises",
    "href": "lectures/Chapter-3-DataWrangling/03-3-reshape-merge.html#exercises",
    "title": "03-3: Reshaping and Merging",
    "section": "Exercises",
    "text": "Exercises\n\nDataExercise 1Exercise 2Exercise 3\n\n\nWe will use flights data from the nycflights13 package.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nUsing flights data, calculate the total number of flights by carrier-month, which is in the long format. Name the resulting object num_flights.\n\nWork here\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAnswer\n\n\nCode\nnum_flights &lt;-\n  flights %&gt;% \n  group_by(carrier, month) %&gt;% \n  summarize(num_obs = n()) \n\n\nHere is the output you are supposed to get if done correctly:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nReshape the num_flights data into a wide format with the number of flights per month as columns, and assign the result to an R object named num_flights_wide.\n\nWork here\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAnswer\n\n\nCode\nnum_flights %&gt;% \n  tidyr::pivot_wider(\n    names_from = month,\n    names_prefix = \"month_\",\n    values_from = num_obs\n  ) \n\n\nHere is the output you are supposed to get if done correctly:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nReshape the data (num_flights_wide) back into the long format so that a single columns has all the flight number values\n\nWork here\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAnswer\n\n\nCode\nnum_flights_wide %&gt;% \n  tidyr::pivot_longer(\n    starts_with(\"month_\"),\n    names_to = \"month\",\n    names_prefix = \"month_\",\n    values_to = \"num_flights\"\n  )\n\n\nHere is the output you are supposed to get if done correctly:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-3-DataWrangling/03-3-reshape-merge.html#merging-multiple-datasets-1",
    "href": "lectures/Chapter-3-DataWrangling/03-3-reshape-merge.html#merging-multiple-datasets-1",
    "title": "03-3: Reshaping and Merging",
    "section": "Merging multiple datasets",
    "text": "Merging multiple datasets\n\nMotivationMatch? 1Match? 2Match? 3How\n\n\nIt is very common that you have data stored in separate files, and you need to combine them before you conduct any statistical analysis.\nFor example, if you are interested in how crop price affects the supply of crops, you want to have price and production data in a single dataset. However, it may be that price and production data are stored in two separate files.\n\n\nNow suppose, you have collected price and production data for Lancaster and Douglas County from 2015 to 2016.\nHere is what the datasets look like (these are made-up numbers).\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\n\nQuestion\n\n\nCan you merge the two?\n\n\n\n\n\n\nLet’s display one more variable from each of the datasets.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nOkay, great. At least we know which price and prod belong to which county! In other words, we know which price and prod belong to who (or where).\n\n\n\n\n\nQuestion\n\n\nCan you merge the two?\n\n\n\n\n\n\nLet’s display one more variable from each of the datasets.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\n\nQuestion\n\n\nCan you merge the two now?\n\n\n\n\n\n\n\n\n\nKey\n\n\n\nThe variables that let you merge two datasets are called  keys.\nWhat are the keys here?\n\n\n\n\n\n\n\n\nYou can use the left_join() function from the dplyr package to merge two datasets.\nThere are different types of join functions:\n\nright_join() (you never need to use this one)\ninner_join()\nfull_join()\nsemi_join()\nnest_join()\n\nBut, most of the time, left_join() is sufficient.\nTry to learn other functions when you encounter a case where left_join() is not sufficient. Do not waster your time until then."
  },
  {
    "objectID": "lectures/Chapter-3-DataWrangling/03-3-reshape-merge.html#joining-datasets-with-dplyrleft_join",
    "href": "lectures/Chapter-3-DataWrangling/03-3-reshape-merge.html#joining-datasets-with-dplyrleft_join",
    "title": "03-3: Reshaping and Merging",
    "section": "Joining datasets with dplyr::left_join()",
    "text": "Joining datasets with dplyr::left_join()\n\nleft_join()demonstration: 1 to 1demonstration: 1 to mdemonstration: m to mExercises\n\n\nSyntax\n\n#--- Syntax (NOT RUN) ---#\nleft_join(data_x, data_y, by = keys)  \n\n\nRules to be aware of\n\nRule 1: It returns all rows from data_x, and all columns from data_x and data_y\nRule 2: Rows in data_x with no match in data_y will have NA values in the new columns\nRule 3: If there are multiple matches between data_x and data_y, all combinations of the matches are returned\n\n\n\n\n\nNote\n\n\nThe order of datasets matter.\n\n\n\n\n\n\n\nData prepDemo 1Data prep 2Demo 2keeping all rows\n\n\nWe use price_data and yield_data for demonstrations.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\n\nQuestion\n\n\nWhat are the keys?\n\n\n\n\n\n\nThe keys are county and year, so\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nSwitching the two?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nNote\n\n\nIn this instance,  which comes first does not matter  because all the individual rows in yield_data (left data) have exactly one match in price_data (right data) without fail, and vice versa.\n\n\n\n\n\nLet’s expand the yield_data as follows:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nyield_data_with_chase on the right:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nyield_data_with_chase on the left:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\nRemember?\n\n\n\nRule 1: left_join() returns all rows from data_x, and all columns from data_x and data_y\nRule 2: Rows in data_x with no match in data_y will have NA values in the new columns\n\n\n\n\n\n\n\nWe saw in the previous slide having price_data (as data_x) and yield_data_with_chase as (data_y), left_join() discarded rows in yield_data_with_chase (data_y).\nIf you would like to keep unmatched rows in data_y, you can use full_join().\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\nData prepDemo\n\n\nLet’s create a weather dataset where you have more than one observations per county-year:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nRemember?\n\n\nRule 3: If there are multiple matches between data_x and data_y, all combinations of the matches are returned.\n\n\n\n\n\n\n\n\n\n\n\nData prepDemo\n\n\nLet’s create an expanded crop yield dataset for multiple crops:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\nPreparationExercise 1Exercise 2\n\n\nCreate the following datasets and take a look at them to understand what’s in them:\n\nFlights in January:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\ndaily temperature in January:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nhourly temperature in January:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nYou are interested in learning the impact of daily temperature on departure delay for the flights in January. To do so, you need to have the variables in a single dataset.\nIs this going to be a 1-to-1 matching, 1-to-m, or m-to-m matching?\nMerge daily_temp_Jan to flights_Jan using left_join()\n\n\nWork here\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nHere is the output you are supposed to get if done correctly:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAnswer\n\n\nCode\nleft_join(flights_Jan, daily_temp_Jan, by = c(\"origin\", \"month\", \"day\"))\n\n\n\n\n\nYou are interested in learning the impact of hourly temperature on departure delay for the flights in January. To do so, you need to have them in a single dataset.\nIs this going to be a 1-to-1 matching, 1-to-m, or m-to-m matching?\nMerge hourly_temp_Jan to flights_Jan using left_join()\n\n\nWork here\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nHere is the output you are supposed to get if done correctly:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAnswer\n\n\nCode\nleft_join(flights_Jan, hourly_temp_Jan, by = c(\"origin\", \"month\", \"day\"))"
  },
  {
    "objectID": "lectures/Chapter-4-Data-Visualization/04-2-more-information.html#tips-to-make-the-most-of-the-lecture-notes",
    "href": "lectures/Chapter-4-Data-Visualization/04-2-more-information.html#tips-to-make-the-most-of-the-lecture-notes",
    "title": "04-2: Data visualization with ggplot2: More in One",
    "section": "Tips to make the most of the lecture notes",
    "text": "Tips to make the most of the lecture notes\n\nInteractive navigation toolsRunning and writing codes\n\n\n\nClick on the three horizontally stacked lines at the bottom left corner of the slide, then you will see table of contents, and you can jump to the section you want\nHit letter “o” on your keyboard and you will have a panel view of all the slides\n\n\n\n\nThe box area with a hint of blue as the background color is where you can write code (hereafter referred to as the “code area”).\nHit the “Run Code” button to execute all the code inside the code area.\nYou can evaluate (run) code selectively by highlighting the parts you want to run and hitting Command + Enter for Mac (Ctrl + Enter for Windows).\nIf you want to run the codes on your computer, you can first click on the icon with two sheets of paper stacked on top of each other (top right corner of the code chunk), which copies the code in the code area. You can then paste it onto your computer.\nYou can click on the reload button (top right corner of the code chunk, left to the copy button) to revert back to the original code."
  },
  {
    "objectID": "lectures/Chapter-4-Data-Visualization/04-2-more-information.html#placing-more-information-in-one-figure-1",
    "href": "lectures/Chapter-4-Data-Visualization/04-2-more-information.html#placing-more-information-in-one-figure-1",
    "title": "04-2: Data visualization with ggplot2: More in One",
    "section": "Placing more information in one figure",
    "text": "Placing more information in one figure\n\nMotivationHowExamplesExercises\n\n\nSo far, we have learned the basics of ggplot2 and how to create popular types of figures. We can make a figure much more informative by making its aesthetics data-dependent.\nFor example, suppose you are interested in comparing the history of irrigated corn yield by state in a line plot. So, you want to create a line for each state and make the lines distinguishable so the readers know which line is for which state like this:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nWe can make the aesthetics of a figure data-dependent by specifying which variable you use for aesthetics differentiation  INSIDE aes().\nHere is an example:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nIn this code, color = state_name is inside aes() and it tells R to divide the data into the groups of State and draw a line by state_name (by state) where the lines are color-differentiated.\nA legend is automatically generated.\n\n\n\nDataExample 1Example 2Example 3Example 4\n\n\nCreate a data set of corn yield by state-year first:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\nInstructionExercise 1Exercise 2\n\n\nThis exercise use the diamonds dataset from the ggplot2() package. First, load the dataset and extract observations with Premium cut whose color is one of E, I, and F:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nUsing premium, create a scatter plot of price (y-axis) against depth (x-axis) by clarity:\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nCode\nggplot(data = premium) +\n  geom_point(aes(y = price, x = depth, color = clarity))\n\n\n\n\n\n\n\nUsing premium, create density plots of carat by color (set alpha to 0.5):\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nCode\nggplot(data = premium) +\n  geom_density(aes(x = carat, fill = color), alpha = 0.5)"
  },
  {
    "objectID": "lectures/Chapter-4-Data-Visualization/04-2-more-information.html#faceting-1",
    "href": "lectures/Chapter-4-Data-Visualization/04-2-more-information.html#faceting-1",
    "title": "04-2: Data visualization with ggplot2: More in One",
    "section": "Faceting",
    "text": "Faceting\n\nMotivationHowTwo-wayfacet_grid()Strip labelExercises\n\n\nSometimes, you would like to visualize information across groups on separate panels.\n\n\nToo much information in one panel?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nOn separate panels (faceting)?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\nWe can make faceted figures by adding either facet_wrap or facet_grid() in which you specify which variable to use for faceting.\nHere is an example:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nIn this code, facet_wrap(state_name ~ .) is added to a simple boxplot, which tells R to make a boxplot by state_name (state).\n\n\n\n\nNote\n\n\n. in state_name ~ . means non (facet by no variable).\n\n\n\n\n\n\nWhat?Another example\n\n\nTwo-way faceting will\n\ndivide the data into groups where each group has a unique combination of the two faceting variables\ncreate a plot for each group\n\nExample\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nFilter county_yield to those in 2017 and 2018.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nCreate a faceted density plots.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\ncomparefacet_grid()order mattersscale\n\n\n\n\nfacet_wrap\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nfacet_grid\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nNote\n\n\n\nUnlike facet_wrap(), which side you put faceting variables matters a lot.\n\nleft hand side: rows\nright hand side: columns\n\nIn the code above, state_name values become the rows, and year values become columns.\n\n\n\n\n\n\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nGuidefree xfree yboth free\n\n\nfacet_grid() allows\n\nthe figures in different columns to have different scales for the x-axis (figures in the same column have the same scale for the x-axis)\nthe figures in different rows to have different scales for the y-axis (figures in the same rows have the same scale for the x-axis)\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\n\n\n\nCreate a variable that has the values you want to use as labels and use it as a faceting variable:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nExercise 1Exercise 2\n\n\n\n\nUsing premium, create scatter plots of price (y-axis) against carat (x-axis) by color on separate panels as shown on the right.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nCode\nggplot(data = premium) +\n  geom_point(aes(x = carat, y = price)) +\n  facet_grid(color ~ .)\n\n\n\n\n\n\n\n\n\n\nUsing premium, create histogram of carat by color and clarity on separate panels as shown on the right.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nCode\nggplot(data = premium) +\n  geom_histogram(aes(x = carat)) +\n  facet_grid(color ~ clarity)"
  },
  {
    "objectID": "lectures/Chapter-4-Data-Visualization/04-2-more-information.html#preparing-datasets-for-visualization",
    "href": "lectures/Chapter-4-Data-Visualization/04-2-more-information.html#preparing-datasets-for-visualization",
    "title": "04-2: Data visualization with ggplot2: More in One",
    "section": "Preparing datasets for visualization",
    "text": "Preparing datasets for visualization\n\nLong-format neededWide v.s. Long\n\n\nWe have seen\n\nfigures where its main elements (points, lines, boxes, etc) are made color differentiated (e.g., with aes(color = var) inside the geom_*() function)\nfaceted figures\n\n\n\n\nImportant\n\n\nThe dataset has to be in long format to create these types of figures!!\n\n\n\n\n\n\nFor example consider the following dataset in a wide format:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nThis dataset has county-level yields for Nebraska, Colorado, and Kansas stored in variables named 2000 and 2001 (they themselves represent years).\nImagine creating boxplots of corn yield fill color-differentiated by state and faceted by year….You actually cannot specify facet_grid() properly because you do not have a single variable that represents year.\nYou will find that reshaping wide datasets using pivot_longer() is very useful in creating figures."
  },
  {
    "objectID": "lectures/Chapter-4-Data-Visualization/04-2-more-information.html#multiple-datasets-in-one-figure-1",
    "href": "lectures/Chapter-4-Data-Visualization/04-2-more-information.html#multiple-datasets-in-one-figure-1",
    "title": "04-2: Data visualization with ggplot2: More in One",
    "section": "Multiple datasets in one figure",
    "text": "Multiple datasets in one figure\n\nGlobal v.s. localExample 1Example 2Use multiple datasets\n\n\n\n\n\nImportant\n\n\n\n(Global) When a dataset is specified inside ggplot(), then the dataset is used in  ALL  of the subsequent geom_*() unless otherwise specified\n(Local) When a dataset is specified inside of a geom_*(), the dataset is used only for the geom_*() over-riding the global dataset set inside ggplot().\n\n\n\n\n\n\nThis works with county_yield used in both geom_point() and geom_smooth().\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nThis does not work because no global dataset is set inside ggplot() and no dataset is supplied to geom_smooth().\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nTo use multiple datasets inside a single ggplot object (or a figure), you just need to specify what dataset to use locally inside individual geom_*()s.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-5-function-loop-parallel/05-1-function-loop-parallel.html#tips-to-make-the-most-of-the-lecture-notes",
    "href": "lectures/Chapter-5-function-loop-parallel/05-1-function-loop-parallel.html#tips-to-make-the-most-of-the-lecture-notes",
    "title": "05-1: User-defined Function, Loop, and Parallelization",
    "section": "Tips to make the most of the lecture notes",
    "text": "Tips to make the most of the lecture notes\n\nInteractive navigation toolsRunning and writing codes\n\n\n\nClick on the three horizontally stacked lines at the bottom left corner of the slide, then you will see table of contents, and you can jump to the section you want\nHit letter “o” on your keyboard and you will have a panel view of all the slides\n\n\n\n\nThe box area with a hint of blue as the background color is where you can write code (hereafter referred to as the “code area”).\nHit the “Run Code” button to execute all the code inside the code area.\nYou can evaluate (run) code selectively by highlighting the parts you want to run and hitting Command + Enter for Mac (Ctrl + Enter for Windows).\nIf you want to run the codes on your computer, you can first click on the icon with two sheets of paper stacked on top of each other (top right corner of the code chunk), which copies the code in the code area. You can then paste it onto your computer.\nYou can click on the reload button (top right corner of the code chunk, left to the copy button) to revert back to the original code."
  },
  {
    "objectID": "lectures/Chapter-5-function-loop-parallel/05-1-function-loop-parallel.html#learning-objectives",
    "href": "lectures/Chapter-5-function-loop-parallel/05-1-function-loop-parallel.html#learning-objectives",
    "title": "05-1: User-defined Function, Loop, and Parallelization",
    "section": "Learning objectives",
    "text": "Learning objectives\n\nLearn how to write functions yourself\nLearn how to use a for loop and lapply() to complete repetitive jobs\nLearn how not to loop things that can be easily vectorized\nLearn how to parallelize repetitive jobs using the future_lapply() function from the future.apply package"
  },
  {
    "objectID": "lectures/Chapter-5-function-loop-parallel/05-1-function-loop-parallel.html#user-defined-function-1",
    "href": "lectures/Chapter-5-function-loop-parallel/05-1-function-loop-parallel.html#user-defined-function-1",
    "title": "05-1: User-defined Function, Loop, and Parallelization",
    "section": "User-defined Function",
    "text": "User-defined Function\n\nWhen?HowExampleScope 1Scope 2default valueMultiple argumentsExercises\n\n\nIt is beneficial to write your own function when you expect to repeat the same action with different inputs to the action.\n\nExample: mean()\nCalculating the average of an variable is such a common task\n\nYou do not want to do sum(x)/length(x) every time you get a mean\nYou can just use the mean() function\n\nA function is more useful when the task is longer and more complicated.\n\n\nHere is the general structure of a user-defined function:\n\n#--- NOT RUN ---#\nfunction_name &lt;- function(x) {\n\n  1. do something on x\n\n  2. return the results\n\n}\n\n\nThen, you can use the function like this:\n\n#--- NOT RUN ---#\nfunction_name(x)\n\n\nNote: the argument does not have to be named x\n\n\nThe following function takes numeric numbers, square them, and return the squared values:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nTry the function:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nAny objects that are defined within a function are not created on the global environment.\nFor example, squared_a and original_a are defined only internally, and are not registered on the global environment.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nYou can confirm this by looking at the environment tab in RStudio after running the following:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nEven though we are returning original_a, only its content is returned.\n\n\nWhen R sees objects that are not provided explicitly as arguments to the function, then R looks for them in the global environment:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nHere, multiplier is provided as an argument to the function.\nTry this:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nNow, define multiplier on the global environment, and then run it again:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nYou can set default values for function arguments by argument = value like below:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nTry this:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nIt is easy to create a function with multiple arguments. You just simply add more arguments within function() like below:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAs you are likely to have noticed, the order of input arguments are assumed to be the same as the order of the arguments of the function. Above,\n\na = 4\nb = 3\n\nYou can mess with the order of input arguments if you want if you name the input arguments as follows:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nExercise 1Exercise 2Exercise 3\n\n\nDefine a function that takes temperature in Fahrenheit, convert it into Celsius, and return it.\nHere is the formula: temp_C &lt;- (temp_F - 32) * 5 / 9\nWork here\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAnswer\n\n\nCode\nf_to_c &lt;- function(temp_F) {\n  temp_C &lt;- (temp_F - 32) * 5 / 9\n  return(temp_C)\n}\n\n\n\n\nAfter running a randomized nitrogen trial, you found the following relationship between corn yield (bu/acre) and nitrogen rate (lb/acre):\n\\[\n\\mbox{corn yield} = 120 + 25 \\times log(\\mbox{nitrogen rate})\n\\]\nWrite a function that takes a nitrogen rate as an argument, calculate the estimated yield for the nitrogen rate, and then return the estimated yield.\nWork here\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAnswer\n\n\nCode\nn_to_yield &lt;- function(N) {\n  yield &lt;- 120 + 25 * log(N)\n  return(yield)\n}\n\n\n\n\nYou would like to calculate the revenue of corn production (defined below) as a function of nitrogen rate based on the yield response function.\n\\[\\begin{align*}\nP_{corn} * \\mbox{corn yield}\n\\end{align*}\\]\nWrite a function that takes corn price and nitrogen rate as its arguments, calculate revenue (and yield as an intermediate step), and return revenue. In doing so, use the function your created in Exercise 2.\nWork here\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAnswer\n\n\nCode\ncalc_rev &lt;- function(corn_price, N) {\n  yield &lt;- n_to_yield(N)\n  revenue &lt;- corn_price * yield\n  return(revenue)\n}"
  },
  {
    "objectID": "lectures/Chapter-5-function-loop-parallel/05-1-function-loop-parallel.html#loop-1",
    "href": "lectures/Chapter-5-function-loop-parallel/05-1-function-loop-parallel.html#loop-1",
    "title": "05-1: User-defined Function, Loop, and Parallelization",
    "section": "Loop",
    "text": "Loop\n\nMotivationsWhat is it?ExampleExercise\n\n\n\nWe sometimes need to run the same process over and over again often with slight changes in parameters.\nIn such a case, it is very time-consuming and messy to write all of the steps one bye one.\nFor example, suppose you are interested in knowing the square of 1 through 5 with a step of 1 ([1,2,3,4,5]). The following code certainly works:\n\n\n1^2 \n2^2 \n3^2 \n4^2 \n5^2 \n\n\nHowever, imagine you have to do this for 1000 integers.\nYes, you don’t want to write each one of them one by one as that would occupy 1000 lines of your code, and it would be time-consuming.\nThings will be even worse if you need to repeat much more complicated processes like Monte Carlo simulations. So, let’s learn how to write a program to do repetitive jobs effectively using loop.\n\n\n\n\nLooping is repeatedly evaluating the same (except parameters) process over and over again.\nIn the example above,\n\nthe same repeated process is the action of squaring\nwhat you square (parameter) changes\n\n\nSyntax\n\n#--- NOT RUN ---#\nfor (x in a_list_of_values){\n  you do what you want to do with x\n} \n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nThis does the same:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nWrite a for loop that cubes each element of the sequence of numbers that starts from 5 and increases up to 50 with the incremental step of 5.\nWork here\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAnswer\n\n\nCode\nfor (i in seq(5, 50, by = 5)){\n  i^3\n}"
  },
  {
    "objectID": "lectures/Chapter-5-function-loop-parallel/05-1-function-loop-parallel.html#looping-with-lapply",
    "href": "lectures/Chapter-5-function-loop-parallel/05-1-function-loop-parallel.html#looping-with-lapply",
    "title": "05-1: User-defined Function, Loop, and Parallelization",
    "section": "Looping with lapply()",
    "text": "Looping with lapply()\n\nInstructionExampledefine a functionmultiple argumentsExercises\n\n\nInstead of using a for loop, we can use the lapply() function from the base package to loop.\n\nSyntax\n\n#--- NOT RUN ---#  \nlapply(A, B) \n\n\nA is the list of values\nB is the function you would like to apply to each of the values in A\n\nYou can use an existing function (e.g., mean())\nYou can also write a function on the spot\n\n\n\nNote:\n\nA is a vector, lapply() works on each of the vector elements\nA is a list, lapply() works on each of the list elements whatever they may be\nA is a data.frame, lapply() works on each of the columns (data.frame is a list of columns of equal length)\n\n\n\nThis does the same thing as the for loop example we looked at earlier:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\\(x): shorthand for function(x)\n\n\nThe key difference from a for loop is the object class of the output after the loop.\n Important: the output type of lappy() is always a list (that’s why it is called lapply)\n\n\nIt is often the case that you want to write a function of the action you intend to repeat first and then loop.\nFor example, for the loop of squaring numbers, you can first define a function that implements the action of squaring:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAnd then loop:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nOften times, you would like to loop over a single parameter of a function that has multiple arguments:\nFor example, you would like to fix the value of b at 5 while trying different values of a of the following function:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nThen you can do this:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAs you can see, this function try each of 1:10 (called internally x), give it to square_them_add() as its first argument while b is fixed at 5.\n\n\n\nExercise 1Exercise 2\n\n\nUse lapply() to cube each element of the sequence of numbers that starts from 5 and increases up to 50 with the incremental step of 5.\n\nWork here\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAnswer\n\n\nCode\nlapply(seq(5, 50, by = 5), \\(x) x^3) \n\n\n\n\nDefine a function that takes a nitrogen rate and corn price as arguments and calculate revenue. Yield can be estimated using the following equation:\n\\[\n\\mbox{corn yield} = 120 + 25 \\times log(\\mbox{nitrogen rate})\n\\]\nAt each value of the corn price sequence of seq(2.5, 4.0, by = 0.1), calculate the revenue using lapply() where nitrogen rate is fixed at 200 (lb/acre).\n\nWork here\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAnswer\n\n\nCode\nn_to_yield &lt;- function(N) {\n  yield &lt;- 120 + 25 * log(N)\n  return(yield)\n}\n\ncorn_price_seq &lt;- seq(2.5, 4.0, by = 0.1)\n\nlapply(corn_price_seq, \\(x) n_to_yield(x))"
  },
  {
    "objectID": "lectures/Chapter-5-function-loop-parallel/05-1-function-loop-parallel.html#looping-over-multiple-variables",
    "href": "lectures/Chapter-5-function-loop-parallel/05-1-function-loop-parallel.html#looping-over-multiple-variables",
    "title": "05-1: User-defined Function, Loop, and Parallelization",
    "section": "Looping over multiple variables",
    "text": "Looping over multiple variables\n\nMotivationsExampleStepsTips to write a function for loopExercise\n\n\n\nThe example we have looked at is a very simple case where a loop is done over a single list of values\nIt is often the case that you want to loop over multiple variables.\n\nExample\nYou are interested in understanding the sensitivity of the profitability of corn production with respect to corn price and nitrogen application rate.\nSo, you would like to loop over two sets of sequences of values:\n\ncorn price\nnitrogen application rate\n\nHow\nThe trick is to\n\ncreate a data.frame of two (or as many variables as you would like to loop over) variables (corn price and nitrogen application rate), which stores all the permutations of the two variables\nthen loop over the rows of the data.frame\n\n\n\n\nWe are interested in understanding the sensitivity of corn revenue to corn price and applied nitrogen amount.\nWe consider\n\nthe range of $3.0/bu to $5.0/bu for corn price\n0 lb/acre to 300/acre for nitrogen rate\n\n\n\n\n\nStep 1Step 2Step 3Step 4\n\n\nGet a sequence of values for corn price and nitrogen rate:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWe then create a complete combination of the values using the expand.grid() function, and then convert it to a data.frame object (this is not strictly necessary).\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nDefine a function that\n\ntakes a row number\nrefer to parameters_data to extract the parameters stored at the row number\ncalculate corn yield and revenue based on the extracted parameters (corn price and nitrogen rate).\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nThis function\n\ntakes i (act as a row number within the function)\nextract corn price and nitrogen from the ith row of parameters_mat\nuse the extracted values to calculate yield and revenue\ncreate a data.frame of the resulting revenue, corn price, and nitrogen rate\nreturns the data.frame\n\n\n\nDo a loop using lapply():\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nCombine the list of data.frames into a single data.frame using bind_rows() from the dplyr package.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nBefore define a function, write a code that works for one row.\nWe will work on a specific value of i. Here is it i = 1.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAfter you confirm the code you write gives you desired outcomes, make it a function by replacing 1 with i.\n\n\n\nInstructionWorkspace\n\n\nFind the profit of corn production at different price combinations of corn and nitrogen where nitrogen rate is fixed at 200 lb/acre.\n\nStep 1: Define the following sequences of numbers\n\ncorn price: seq(2.5, 4.0, by = 0.05)\nnitrogen price: seq(0.2, 0.6, by = 0.01)\n\nStep 2: Create a data.frame of the complete combinations of the values from the price vectors\nStep 3: Define a function that takes a row number, extract corn price and nitrogen price and then calculate profit based on the price combination using the following equations:\n\n\\[\n\\mbox{corn yield} = 120 + 25 \\times log(\\mbox{nitrogen rate})\n\\]\n\\[\n\\mbox{profit} = \\mbox{corn price} \\times \\mbox{corn yield} - \\mbox{nitrogen price} \\times \\mbox{nitrogen rate}\n\\]\n\nStep 4: loop over the row numbers of the parameter data\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-5-function-loop-parallel/05-1-function-loop-parallel.html#do-you-really-need-to-loop",
    "href": "lectures/Chapter-5-function-loop-parallel/05-1-function-loop-parallel.html#do-you-really-need-to-loop",
    "title": "05-1: User-defined Function, Loop, and Parallelization",
    "section": "Do you really need to loop?",
    "text": "Do you really need to loop?\n\nWhy not?comparetimevectorize 1vectorize 2compare\n\n\n\nActually, we should not have used a for loop or lapply() in any of the examples above in practice1\nThis is because they can be easily vectorized.\nVectorized operations are those that take vectors as inputs and work on each element of the vectors in parallel\n\nExample\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nVectorized\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nNon-vectorized (loop)\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nCompare\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nBoth produce the same results. However, R is written in a way that is much better at doing vectorized operations.\n\n\nLet’s time them using the microbenchmark() function from the microbenchmark package.\nHere, we do not unlist() after lapply() to just focus on the multiplication part.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nAs you can see, the vectorized version is faster.\nThe time difference comes from R having to conduct many more internal checks and hidden operations for the non-vectorized one\n\n\n\nInstead of this:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nYou can just do this:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nHere is the vectorized version of the revenue sensitivity analysis:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nThen use the function to calculate revenue and assign it to a new variable in the parameters_data data.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nLet’s compare the vectorized and non-vectorized version:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-5-function-loop-parallel/05-1-function-loop-parallel.html#parallel-processing",
    "href": "lectures/Chapter-5-function-loop-parallel/05-1-function-loop-parallel.html#parallel-processing",
    "title": "05-1: User-defined Function, Loop, and Parallelization",
    "section": "Parallel processing",
    "text": "Parallel processing\n\nIntroInstructionPreparationTry itAny faster?What just happened?\n\n\n\nParallelization of computation involves distributing the task at hand to multiple cores so that multiple processes are done in parallel.\nOur focus is on the so called embarrassingly parallel processes.\n\nEmbarrassingly parallel process: a collection of processes where each process is completely independent of any another (one process does not use the outputs of any of the other processes)\n\nThe example of integer squaring is embarrassingly parallel. In order to calculate 12, you do not need to use the result of 22 or any other squares.\nEmbarrassingly parallel processes are very easy to parallelize because you do not have to worry about which process to complete first to make other processes happen.\nFortunately, most of the processes you are interested in parallelizing fall under this category\n\n\n\n\nWe will use the future_lapply() function from the future.apply package for parallelization.\nUsing the package, parallelization is a piece of cake as it is basically the same syntactically as lapply().\n\n\n#--- install the package ---#\ninstall.packages(\"future.apply\") \n\n#--- load packages ---#\nlibrary(future.apply)\n\n\nHow\nYou can simply replace lapply() with future_lapply()!\n\n#--- not parallelized ---#\nsq_ls &lt;- lapply(1:1000, function(x) x^2) \n\n#--- parallelized ---#\nsq_ls_par &lt;- future_lapply(1:1000, function(x) x^2) \n\n\n\nYou can find out how many cores you have available for parallel computation on your computer using the detectCores() function from the parallel package.\n\n#--- number of all cores ---#\nparallel::detectCores()\n\n[1] 16\n\n\n\nBefore we implement parallelized lapply(), we need to declare what backend process we will be using by plan().\n\nplan(multicore, workers = parallel::detectCores() - 1)\n\n\nOther backend processes are:\n\nsequential: this is just a regular loop\nmulticore: forked sessions (not available on Windows)\nmultisession: multiple sessions (less performant thana multicore)\n\nWith the multicore option, R figure out which multicore or multisession should be used (or can be used) and automatically redirect the backend process to the appropriate (available) one.\n\n\n\n\nNote\n\n\nUnless you tell R explicitly to parallelize things (like using future_lapply()), R always uses a single core by default. So, you do not have to change anything manually when you do not want to use multiple cores.\n\n\n\n\n\n\nsq_ls &lt;- future_lapply(1:1000, function(x) x^2)\n\n\n\n\nmicrobenchmark(\n\n  #--- parallelized ---#\n  \"parallelized\" = { sq_ls &lt;- future_lapply(1:1000, function(x) x^2) }, \n\n  #--- non-parallelized ---#\n  \"not parallelized\" = { sq_ls &lt;- lapply(1:1000, function(x) x^2) },\n  times = 100, \n  unit = \"ms\"\n\n) \n\nUnit: milliseconds\n             expr        min         lq       mean      median        uq\n     parallelized 214.475455 252.632071 288.473396 278.4967715 321.18057\n not parallelized   0.579383   0.742785   1.089473   0.8525375   1.15469\n       max neval\n 467.03261   100\n   7.06664   100\n\n\n\n\n\nThis is because communicating jobs to each core takes some time as well.\nSo, if each of the iterative processes is super fast (like this example where you just square a number), the time spent on communicating with the cores outweighs the time saving due to parallel computation.\nParallelization is more beneficial when each of the repetitive processes takes long."
  },
  {
    "objectID": "lectures/Chapter-5-function-loop-parallel/05-1-function-loop-parallel.html#parallel-processing-a-less-trivial-example",
    "href": "lectures/Chapter-5-function-loop-parallel/05-1-function-loop-parallel.html#parallel-processing-a-less-trivial-example",
    "title": "05-1: User-defined Function, Loop, and Parallelization",
    "section": "Parallel processing: a less trivial example",
    "text": "Parallel processing: a less trivial example\n\nMC simulationMC stepsfunctionperformanceMac/Linux\n\n\n\nOne of the very good use cases of parallelization is MC simulation\nWe will run MC simulations that test whether the correlation between an independent variable and error term would cause bias (yes, we know the answer).\n\n\n\n\ngenerate a dataset (50,000 observations) according to the following data generating process:\n\n\\[\ny = 1 + x + v\n\\]\nwhere + \\(\\mu \\sim N(0,1)\\) + \\(x \\sim N(0,1) + \\mu\\) + \\(v \\sim N(0,1) + \\mu\\).\nThe \\(\\mu\\) term cause correlation between \\(x\\) (the covariate) and \\(v\\) (the error term).\n\nestimate the coefficient on \\(x\\) vis OLS, and return the estimate.\nrepeat this process \\(1,000\\) times to understand the property of the OLS estimators under the data generating process.\n\nThis Monte Carlo simulation is embarrassingly parallel because each process is independent of any other.\n\n\nHere is a function that implements the steps described in the previous slide:\n\n#--- repeat steps 1-3 B times ---#\nMC_sim &lt;- function(i){\n\n  N &lt;- 50000 # sample size\n\n  #--- steps 1 and 2:  ---#\n  mu &lt;- rnorm(N) # the common term shared by both x and u\n  x &lt;- rnorm(N) + mu # independent variable\n  v &lt;- rnorm(N) + mu # error\n  y &lt;- 1 + x + v # dependent variable\n  data &lt;- data.table(y = y, x = x)\n\n  #--- OLS ---# \n  reg &lt;- lm(y~x, data = data) # OLS\n\n  #--- return the coef ---#\n  return(reg$coef['x'])\n}  \n\n\n\nSingle run:\n\ntic()\nsingle_res &lt;- MC_sim(1)\ntoc()\n\n0.007 sec elapsed\n\n\nNot parallelized (sequential):\n\ntic()\nMC_results &lt;- lapply(1:1000, MC_sim)\ntoc() \n\n18.541 sec elapsed\n\n\nParallelized:\n\ntic()\nMC_results &lt;- future_lapply(1:1000, MC_sim)\ntoc() \n\n2.763 sec elapsed\n\n\n\n\n\nFor Mac or Linux users, parallel::mclapply() is just as compelling (or pbmclapply::pbmclapply() if you want to have a nice progress report, which is very helpful particularly when the process is long).\nIt is just as easy to use as future_lapply() because its syntax is the same as lapply().\nYou can control the number of cores to employ by adding mc.cores option. Here is an example code that does the same MC simulations we conducted above:\n\n\n#--- mclapply ---#\nlibrary(parallel)\nMC_results &lt;- mclapply(1:1000, MC_sim, mc.cores = detectCores() - 1)\n\n#--- or with progress bar ---#\nlibrary(pbmclapply)\nMC_results &lt;- pbmclapply(1:1000, MC_sim, mc.cores = detectCores() - 1)"
  },
  {
    "objectID": "lectures/Chapter-5-function-loop-parallel/05-1-function-loop-parallel.html#low-dimensional-optimization-1",
    "href": "lectures/Chapter-5-function-loop-parallel/05-1-function-loop-parallel.html#low-dimensional-optimization-1",
    "title": "05-1: User-defined Function, Loop, and Parallelization",
    "section": "Low-dimensional optimization",
    "text": "Low-dimensional optimization\n\nSetupGrid searchExampleProfit-NBest N\n\n\nSuppose you have ran an randomized nitrogen experiment for corn production on a field, collected data, and run a regression to find the following quantitative relationship between corn yield (bu/acre) and nitrogen rate (lb/acre):\n\\[\n\\mbox{corn yield} = 120 + 25 \\times log(\\mbox{nitrogen rate})\n\\]\nYour are interested in finding the best nitrogen rates that maximize profit at different combinations of corn and nitrogen prices for this field.\n\\[\nMax_{N} P_C \\times Y(N) - P_N \\times N\n\\]\n\nN: nitrogen rate (lb/acre)\nY(N): corn yield (bu/acre) as a function of N as described above\nP_C: corn price ($/bu)\nP_N: nitrogen price ($/lb)\n\nHere, N is a decision variable, and P_C and P_N are parameters.\n\n\nGrid search is a very inefficient yet effective tool for finding solutions to optimization problems as long as the dimension of the optimization problem is low (1 or 2 variables).\nGrid search basically evaluates the objective function (profit here) at many levels of the decision variables (nitrogen here) and pick the one that maximizes the objective function (profit).\n\nExample\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nLet’s define a function that takes N, P_C, and P_N values and returns profits.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nLet’s create a sequence of N values at which we evaluate the profit, and then calculate profit at each level of N.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nHere is the visualization of profit-N relationship:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nOnce the profit-N relationship is found, we can use dplyr::filter() combined with max() to identify the optimal N rate.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAlternatively, you can sort the data by profit in the ascending order (default) and pick the last row using dplyr::slice(n()).\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nThis method is faster than the first one."
  },
  {
    "objectID": "lectures/Chapter-5-function-loop-parallel/05-1-function-loop-parallel.html#coding-strategy-1-looping",
    "href": "lectures/Chapter-5-function-loop-parallel/05-1-function-loop-parallel.html#coding-strategy-1-looping",
    "title": "05-1: User-defined Function, Loop, and Parallelization",
    "section": "Coding strategy 1: looping",
    "text": "Coding strategy 1: looping\n\nloopStep 1Step 2Step 3\n\n\nNow that you have written codes to find the optimal N at a given combination of corn and nitrogen prices.\nWe can move on to the next step of finding the optimal N rates at many various combinations of corn and nitrogen prices.\nHere is the coding strategy:\n\nDefine a set of all the combinations of corn and nitrogen prices you want to analyze as a data.frame.\nDefine a function that extract corn and nitrogen prices from the parameter data.frame and find the optimal N rate at the given combination of price and nitrogen combination.\nLoop over the set of parameters.\n\n\n\nHere, we define a data.frame of parameters to be explored. We will be looping over the rows of the parameter data.frame.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nNow, we will define a function that extract a combination of corn and nitrogen prices from price_parameters (extract a row from price_parameters), and then find the optimal N.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nCheck if this function works:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nCombine the list of data.frames into a single data.frame using bind_rows().\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-5-function-loop-parallel/05-1-function-loop-parallel.html#coding-strategy-2-vectorized",
    "href": "lectures/Chapter-5-function-loop-parallel/05-1-function-loop-parallel.html#coding-strategy-2-vectorized",
    "title": "05-1: User-defined Function, Loop, and Parallelization",
    "section": "Coding strategy 2: vectorized",
    "text": "Coding strategy 2: vectorized\n\nvectorizedStep 1Steps 2 and 3\n\n\nInstead of writing a loop like above, we can actually vectorize the process. Here are the steps:\n\nDefine a set of all the combinations of nitrogen rate, corn price, and nitrogen price you want to analyze as a data.frame.\nCalculate profits for all the combinations of nitrogen rate, corn price, and nitrogen price inside the data.frame\nFind the optimal N rate for each of the combinations of nitrogen rate, corn price, and nitrogen price\n\n\n\nHere, we define all the combinations of nitrogen rate, corn price, and nitrogen price you want to analyze as a data.frame.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nNow, we will calculate profit for all the rows in price_parameters.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nNow, we can identify the optimal N rate at each of the corn and nitrogen combinations:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-5-function-loop-parallel/05-1-function-loop-parallel.html#which-strategy",
    "href": "lectures/Chapter-5-function-loop-parallel/05-1-function-loop-parallel.html#which-strategy",
    "title": "05-1: User-defined Function, Loop, and Parallelization",
    "section": "Which strategy?",
    "text": "Which strategy?\n\nWhich strategy you should take depends on the size of your computer’s RMA memory.\nGoing over the RAM memory limit will suffocate your computer, which leads to a substantial loss in computing performance.\nVectorized version is more memory-hungry:\n\nStrategy 1: loop over the price combinations (one price combination at a time)\nStrategy 2: loop over price (all the price combinations at the same time)\n\nIf you can fit the entire dataset in the RAM memory, then take Strategy 2. Otherwise, break up the entire task into pieces like Strategy 1.\n\n \n\n\n\n\nKeep track of RAM memory usage\n\n\n\nMac users: go to Applications  \\(\\rightarrow\\) Utilities  \\(\\rightarrow\\) Activity Monitor \nWindows users: press Windows Key + R \\(\\rightarrow\\) type “resmon” into the search box"
  },
  {
    "objectID": "lectures/Chapter-5-function-loop-parallel/05-1-function-loop-parallel.html#optimization-fixed-attribute-combinations",
    "href": "lectures/Chapter-5-function-loop-parallel/05-1-function-loop-parallel.html#optimization-fixed-attribute-combinations",
    "title": "05-1: User-defined Function, Loop, and Parallelization",
    "section": "Optimization (fixed attribute combinations)",
    "text": "Optimization (fixed attribute combinations)\n\nsetupdataStrategy 1Strategy 2\n\n\nSuppose you have ran an randomized nitrogen experiment for corn production on a field, collected data, and run a regression to find the following quantitative relationship between corn yield (bu/acre) and nitrogen rate (lb/acre):\n\\[\n\\mbox{corn yield} = 120 + (EC/40) \\times (1 + slope)\\times 25 \\times log(\\mbox{nitrogen rate})\n\\]\nYou are interested in finding the best nitrogen rates that maximize profit for different parts of the field at a given corn and nitrogen price combination.\n\\[\nMax_{N} P_C \\times [120 + (EC/40) \\times (1 + slope) * 25 \\times log(\\mbox{nitrogen rate})] - P_N \\times N\n\\]\n\nN: nitrogen rate (lb/acre)\nslope: the slope\n\nEC: electrical conductivity\n\nP_C: corn price ($/bu)\nP_N: nitrogen price ($/lb)\n\nHere, N is a decision variable, slope and EC are attributes, and P_C and P_N are parameters.\n\n\nData\nConsider a 2-plot field like below for the sake of tractability:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nObjective\nYou want to find the optimal nitrogen rate for each plot for a give combination of corn and nitrogen prices.\n\n\nYou can expand on all the variables, nitrogen rate (decision variable), slope and EC (attributes), and corn and nitrogen prices (parameters):\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nYou only need the highlighted rows because no plots in this dataset has slope-ec combinations of c(0, 30) and c(0.2, 40)\nYou created unnecessary rows with this approach\n\n\n\nInstead of using expand on all the three vectors using expand.grid(), we can use expand.grid.df() from the reshape package as follows.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAs you can see, it creates unique complete comninations of the rows from the fisrt and second data.frames. Consequently, it does not create any observations that do not exist in reality."
  },
  {
    "objectID": "lectures/Chapter-7-Date-String/07-1-date-string.html#tips-to-make-the-most-of-the-lecture-notes",
    "href": "lectures/Chapter-7-Date-String/07-1-date-string.html#tips-to-make-the-most-of-the-lecture-notes",
    "title": "07-1: Date and String Management",
    "section": "Tips to make the most of the lecture notes",
    "text": "Tips to make the most of the lecture notes\n\nInteractive navigation toolsRunning and writing codes\n\n\n\nClick on the three horizontally stacked lines at the bottom left corner of the slide, then you will see table of contents, and you can jump to the section you want\nHit letter “o” on your keyboard and you will have a panel view of all the slides\n\n\n\n\nThe box area with a hint of blue as the background color is where you can write code (hereafter referred to as the “code area”).\nHit the “Run Code” button to execute all the code inside the code area.\nYou can evaluate (run) code selectively by highlighting the parts you want to run and hitting Command + Enter for Mac (Ctrl + Enter for Windows).\nIf you want to run the codes on your computer, you can first click on the icon with two sheets of paper stacked on top of each other (top right corner of the code chunk), which copies the code in the code area. You can then paste it onto your computer.\nYou can click on the reload button (top right corner of the code chunk, left to the copy button) to revert back to the original code."
  },
  {
    "objectID": "lectures/Chapter-7-Date-String/07-1-date-string.html#data-preparation",
    "href": "lectures/Chapter-7-Date-String/07-1-date-string.html#data-preparation",
    "title": "07-1: Date and String Management",
    "section": "Data Preparation",
    "text": "Data Preparation\nWe use the pizzaplace dataset is available in the gt package.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-7-Date-String/07-1-date-string.html#date-1",
    "href": "lectures/Chapter-7-Date-String/07-1-date-string.html#date-1",
    "title": "07-1: Date and String Management",
    "section": "Date",
    "text": "Date\n\nMotivationas.Date()lubridateformat for presentationcomponentsmath\n\n\nR has an object class called Date.\nThis is a date as character.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nThis is a date as Date.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nRecording dates as an Date object instead of a string has several benefits:\n\ncalendar math is possible with Date objects\nyou can filter() based on the chronological order of dates\nconverting date into an another format is easy\n\n\n\nDates (as string) come in various formats. Several of them are:\n\n2010-12-15\n12/15/2010\nDec 15 10\n15 December 2010\n\nThey all represent the same date.\nWe can use as.Date() to transform dates stored as characters into Dates.\n\n#--- NOT RUN ---#  \nas.Date(date in character, format)\n\n\nIn format you specify how day, month, and year are represented in the date characters you intend to convert using special symbols including:\n\n%d: day as a number (0-31)\n%m: month (00, 01, 02, \\(\\dots\\), 12)\n%b: abbreviated month (Jan, \\(\\dots\\), Dec)\n%B: unabbreviated month (January, \\(\\dots\\), December)\n%y: 2-digit year (96 for 1996, 02 for 2002)\n%Y: 4-digit year (1996, 2012)\n\nExample\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nAlternatively, you can use the lubridate package to easily convert dates recorded in characters into Dates.\nUsing lubridate, you do not need to provide the format information unlike as.Date()\nInstead, you simply use y (year), m (month), d (day) in the order they appear in the dates in character.\n\nExample\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nIt is often the case that date values are not formatted in the way you want (e.g., when you are creating figures).\nWhile you can use string manipulation functions to reformat dates (which we learn next in this lecture), it is easier to just use the format() function.\n\n\n#--- NOT RUN ---#  \nformat(Date, format)\n\n\nYou can use the same rule for the format argument as the one we saw earlier when using as.Date().\n\nExample\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nYou can extract components (year, month, day) from a Date object using various helper functions offered by lubridate.\n\nyear(): year\nmonth(): month\nmday(): day of month\nyday(): day of year\nwday(): day of week\n\n\nExamples\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\nUnlike dates in character, you can do some math on Date objects.\n\naddition and subtractionsequence of datesfilter (logical evaluation)\n\n\nYou can use years(), months(), days() from the lubridate package to add specified years, months, and days, respectively.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nYou can use seq() to create a sequence of dates, where the incremental step is defined by the by option.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-7-Date-String/07-1-date-string.html#string-manipulation",
    "href": "lectures/Chapter-7-Date-String/07-1-date-string.html#string-manipulation",
    "title": "07-1: Date and String Management",
    "section": "String manipulation",
    "text": "String manipulation\n\nIntroductionConcatenateSplitReplaceDetectletter casepadding\n\n\n\n\nPackage\nFor string (character) manipulation, we use the stringr package, which is part of the tidyverse package. So, you have installed it already.\nstringr is loaded automatically when you load tidyverse. So, just load tidyverse.\n\nlibrary(tidyverse)  \n\n\nResources\n\nstringr cheatsheet\nstringr packagedown website\n\n\nFunctions\nHere are the select functions we learn in this lecture:\n\njoin and split\n\nstringr::str_c()\nstringr::str_split() (tidyr::separate())\n\nmutate strings\n\nstringr::str_replace()\n\ndetect matches\n\nstringr::str_detect()\n\nmanage lengths\n\nstringr::str_trim()\nstringr::str_pad()\n\n\n\n\n\n\n\nstringr::str_c() lets you concatenate a vector of strings. It is basically the same as paste().\n\njoin 1join 2join 3use cases\n\n\nconcatenate\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\norder matters\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nseparator\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nmore than two strings\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\na string and a vector of strings\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nEach of the vector elements (verbs) are concatenated with a string (\"R\")\nThe separator (\"+\") applied to all the vector elements\n\n\ncollapsing a vector of strings to a single string\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nThe collapse option collapse all the vector elements into a single string with the collapse separator (here, %) placed between the individual vector elements\nsep = \"+\" is applied when concatenating a vector of strings and a string, and collapse = \"%\" is applied when concatenating the resulting vector of strings.\n\n\n\ntwo vectors of equal length\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nnth element of a vector (software_types) is met with n the element of the other vector (verbs).\n\n\ntwo vectors of different lengths\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nnth element of a vector (software_types) is met with n the element of the other vector (verbs) with verbs recycled for the elements in software_type that are missing positional matches.\n\n\nall combinations\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\ntake advantage of the recycling feature to create all possible combinations of values\n\n\n\n\nConcatenating string variables in a datasetReading files\n\n\nSometimes, you want to concatenate two (or more) string variables into one variable.\nFor example, suppose you would like to combine pizza size and type into a single variable to make it easier to create faceted figures by size-type.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nYou can use stringr::str_c() to create a vector of file names that have a common pattern.\nFor example suppose you have files that are named following this convention: “corn_yield_X.csv”, where X represents year.\nYou have such csv files starting from 2000 to 2020. Then,\n\nfile_names &lt;- stringr::str_c(\"corn_yield_\", 2000:2020, \".csv\")  \n\n\nhead(file_names) \n\n[1] \"corn_yield_2000.csv\" \"corn_yield_2001.csv\" \"corn_yield_2002.csv\"\n[4] \"corn_yield_2003.csv\" \"corn_yield_2004.csv\" \"corn_yield_2005.csv\"\n\n\nNow, you can easily read each of them iteratively using a loop.\n\n\n\n\n\n\n\n\n\n\nstringr::str_split() splits a string based on a pattern you provide:\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nBut, if you are splitting a variable into two variables, tidyr::separate() is a better option.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nIntroductionUse case\n\n\nHow\nYou can use stringr::str_replace() to replace parts of the texts matched with the user-specified texts.\n\n\n#--- Syntax ---#\nstringr::str_replace(string, pattern, replacement)\n\n\nExample\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nNote that the only the first occurrence of “rock” in each of the string vector element was replaced with “rock big time.”\nYou need to use stringr::str_replace_all() to replace all the occurrences.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nSuppose you would like to have a particular format of date in a figure you are trying to create using pizzaplace: e.g., 07/08/20 (month, day, year without the first 2 digits).\nPretend that date_text is the variable that indicates date and it looks like this:\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nSo, you would like to replace “20” with “” (nothing).\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nNow you can create a figure with the dates in the desired format. From pizzaplace, you could have just done this:\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\nIntroductionuse cases\n\n\nYou can use stringr::str_detect() to check if a user-specified texts are part of strings.\nIt takes a vector of strings and a text pattern, and then return a vector of TRUE/FALSE.\n\nExample\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nget the list of file namesDefine a group from a variable\n\n\nFirst clone this repository.\nInside data/data-for-loop-demo, there are two sets of files in a single folder: corn_experiment_x.rds and soy_experiment_y.rds, where both x and y range from 1 to 30.\nYou want to read only the soy files.\nFirst, let’s get the name of the whole list of files in the working directory:\n\nall_files &lt;- \n  list.files(\n    here::here(\"supplementary-material/data/data-for-loop-demo\"),\n    full.names = TRUE\n  )\n\nhead(all_files, 2)\n\n[1] \"/Users/taromieno/Library/CloudStorage/Dropbox/TeachingUNL/Data-Science-with-R-Quarto/supplementary-material/data/data-for-loop-demo/corn_experiment_1.rds\" \n[2] \"/Users/taromieno/Library/CloudStorage/Dropbox/TeachingUNL/Data-Science-with-R-Quarto/supplementary-material/data/data-for-loop-demo/corn_experiment_10.rds\"\n\ntail(all_files, 2)\n\n[1] \"/Users/taromieno/Library/CloudStorage/Dropbox/TeachingUNL/Data-Science-with-R-Quarto/supplementary-material/data/data-for-loop-demo/soy_experiment_8.rds\"\n[2] \"/Users/taromieno/Library/CloudStorage/Dropbox/TeachingUNL/Data-Science-with-R-Quarto/supplementary-material/data/data-for-loop-demo/soy_experiment_9.rds\"\n\n\n\nNow use stringr::str_detect() to find which elements of all_files include “soy.”\n\nis_soy &lt;- stringr::str_detect(all_files, \"soy\")  \n\n\nOkay so, here is the list of all the “soy” files:\n\nall_files[is_soy]\n\n [1] \"/Users/taromieno/Library/CloudStorage/Dropbox/TeachingUNL/Data-Science-with-R-Quarto/supplementary-material/data/data-for-loop-demo/soy_experiment_1.rds\" \n [2] \"/Users/taromieno/Library/CloudStorage/Dropbox/TeachingUNL/Data-Science-with-R-Quarto/supplementary-material/data/data-for-loop-demo/soy_experiment_10.rds\"\n [3] \"/Users/taromieno/Library/CloudStorage/Dropbox/TeachingUNL/Data-Science-with-R-Quarto/supplementary-material/data/data-for-loop-demo/soy_experiment_11.rds\"\n [4] \"/Users/taromieno/Library/CloudStorage/Dropbox/TeachingUNL/Data-Science-with-R-Quarto/supplementary-material/data/data-for-loop-demo/soy_experiment_12.rds\"\n [5] \"/Users/taromieno/Library/CloudStorage/Dropbox/TeachingUNL/Data-Science-with-R-Quarto/supplementary-material/data/data-for-loop-demo/soy_experiment_13.rds\"\n [6] \"/Users/taromieno/Library/CloudStorage/Dropbox/TeachingUNL/Data-Science-with-R-Quarto/supplementary-material/data/data-for-loop-demo/soy_experiment_14.rds\"\n [7] \"/Users/taromieno/Library/CloudStorage/Dropbox/TeachingUNL/Data-Science-with-R-Quarto/supplementary-material/data/data-for-loop-demo/soy_experiment_15.rds\"\n [8] \"/Users/taromieno/Library/CloudStorage/Dropbox/TeachingUNL/Data-Science-with-R-Quarto/supplementary-material/data/data-for-loop-demo/soy_experiment_16.rds\"\n [9] \"/Users/taromieno/Library/CloudStorage/Dropbox/TeachingUNL/Data-Science-with-R-Quarto/supplementary-material/data/data-for-loop-demo/soy_experiment_17.rds\"\n[10] \"/Users/taromieno/Library/CloudStorage/Dropbox/TeachingUNL/Data-Science-with-R-Quarto/supplementary-material/data/data-for-loop-demo/soy_experiment_18.rds\"\n[11] \"/Users/taromieno/Library/CloudStorage/Dropbox/TeachingUNL/Data-Science-with-R-Quarto/supplementary-material/data/data-for-loop-demo/soy_experiment_19.rds\"\n[12] \"/Users/taromieno/Library/CloudStorage/Dropbox/TeachingUNL/Data-Science-with-R-Quarto/supplementary-material/data/data-for-loop-demo/soy_experiment_2.rds\" \n[13] \"/Users/taromieno/Library/CloudStorage/Dropbox/TeachingUNL/Data-Science-with-R-Quarto/supplementary-material/data/data-for-loop-demo/soy_experiment_20.rds\"\n[14] \"/Users/taromieno/Library/CloudStorage/Dropbox/TeachingUNL/Data-Science-with-R-Quarto/supplementary-material/data/data-for-loop-demo/soy_experiment_21.rds\"\n[15] \"/Users/taromieno/Library/CloudStorage/Dropbox/TeachingUNL/Data-Science-with-R-Quarto/supplementary-material/data/data-for-loop-demo/soy_experiment_22.rds\"\n[16] \"/Users/taromieno/Library/CloudStorage/Dropbox/TeachingUNL/Data-Science-with-R-Quarto/supplementary-material/data/data-for-loop-demo/soy_experiment_23.rds\"\n[17] \"/Users/taromieno/Library/CloudStorage/Dropbox/TeachingUNL/Data-Science-with-R-Quarto/supplementary-material/data/data-for-loop-demo/soy_experiment_24.rds\"\n[18] \"/Users/taromieno/Library/CloudStorage/Dropbox/TeachingUNL/Data-Science-with-R-Quarto/supplementary-material/data/data-for-loop-demo/soy_experiment_25.rds\"\n[19] \"/Users/taromieno/Library/CloudStorage/Dropbox/TeachingUNL/Data-Science-with-R-Quarto/supplementary-material/data/data-for-loop-demo/soy_experiment_26.rds\"\n[20] \"/Users/taromieno/Library/CloudStorage/Dropbox/TeachingUNL/Data-Science-with-R-Quarto/supplementary-material/data/data-for-loop-demo/soy_experiment_27.rds\"\n[21] \"/Users/taromieno/Library/CloudStorage/Dropbox/TeachingUNL/Data-Science-with-R-Quarto/supplementary-material/data/data-for-loop-demo/soy_experiment_28.rds\"\n[22] \"/Users/taromieno/Library/CloudStorage/Dropbox/TeachingUNL/Data-Science-with-R-Quarto/supplementary-material/data/data-for-loop-demo/soy_experiment_29.rds\"\n[23] \"/Users/taromieno/Library/CloudStorage/Dropbox/TeachingUNL/Data-Science-with-R-Quarto/supplementary-material/data/data-for-loop-demo/soy_experiment_3.rds\" \n[24] \"/Users/taromieno/Library/CloudStorage/Dropbox/TeachingUNL/Data-Science-with-R-Quarto/supplementary-material/data/data-for-loop-demo/soy_experiment_30.rds\"\n[25] \"/Users/taromieno/Library/CloudStorage/Dropbox/TeachingUNL/Data-Science-with-R-Quarto/supplementary-material/data/data-for-loop-demo/soy_experiment_4.rds\" \n[26] \"/Users/taromieno/Library/CloudStorage/Dropbox/TeachingUNL/Data-Science-with-R-Quarto/supplementary-material/data/data-for-loop-demo/soy_experiment_5.rds\" \n[27] \"/Users/taromieno/Library/CloudStorage/Dropbox/TeachingUNL/Data-Science-with-R-Quarto/supplementary-material/data/data-for-loop-demo/soy_experiment_6.rds\" \n[28] \"/Users/taromieno/Library/CloudStorage/Dropbox/TeachingUNL/Data-Science-with-R-Quarto/supplementary-material/data/data-for-loop-demo/soy_experiment_7.rds\" \n[29] \"/Users/taromieno/Library/CloudStorage/Dropbox/TeachingUNL/Data-Science-with-R-Quarto/supplementary-material/data/data-for-loop-demo/soy_experiment_8.rds\" \n[30] \"/Users/taromieno/Library/CloudStorage/Dropbox/TeachingUNL/Data-Science-with-R-Quarto/supplementary-material/data/data-for-loop-demo/soy_experiment_9.rds\" \n\n\n\nNow, you can loop to read all the files.\n\n(\nsoy_data &lt;- \n  lapply(all_files, \\(x) readRDS(x)) %&gt;%\n  bind_rows()\n)\n\n# A tibble: 60,000 × 4\n   N_rate     v corn_yield field_id\n    &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;\n 1   248.  85.7       106.        1\n 2   237.  56.4       105.        1\n 3   227.  15.5       105.        1\n 4   175.  33.3       105.        1\n 5   236.  25.6       105.        1\n 6   169. -13.6       105.        1\n 7   237.  30.8       105.        1\n 8   240.  32.4       105.        1\n 9   158. -18.8       105.        1\n10   247. -81.3       106.        1\n# ℹ 59,990 more rows\n\n\n\n\nConsider the following dataset of plant genes.\n\ngene_data &lt;- expand.grid(\n  id = c(\"Zm_1\", \"Zm_2\"), \n  gene = c(\"20_WW_BL_TP1\", \"20_WW_BL_TP\", \"20_WW_ML_TP1\", \"20_WW_ML_TP\", \"20_WW_TL_TP1\", \"20_WW_TL_TP3\")\n) \n\n\n\n     id         gene\n1  Zm_1 20_WW_BL_TP1\n2  Zm_2 20_WW_BL_TP1\n3  Zm_1  20_WW_BL_TP\n4  Zm_2  20_WW_BL_TP\n5  Zm_1 20_WW_ML_TP1\n6  Zm_2 20_WW_ML_TP1\n7  Zm_1  20_WW_ML_TP\n8  Zm_2  20_WW_ML_TP\n9  Zm_1 20_WW_TL_TP1\n10 Zm_2 20_WW_TL_TP1\n11 Zm_1 20_WW_TL_TP3\n12 Zm_2 20_WW_TL_TP3\n\n\n\nThere are three different types of genes: those that have _BL_,_ML_, and _TL_. The objective here is to make a variable that indicates gene group from the gene variable.\n\ngene_data %&gt;% \n  mutate(gene_group = case_when(\n    stringr::str_detect(gene, \"_BL_\") ~ \"BL\",\n    stringr::str_detect(gene, \"_ML_\") ~ \"ML\",\n    stringr::str_detect(gene, \"_TL_\") ~ \"TL\"\n  ))\n\n     id         gene gene_group\n1  Zm_1 20_WW_BL_TP1         BL\n2  Zm_2 20_WW_BL_TP1         BL\n3  Zm_1  20_WW_BL_TP         BL\n4  Zm_2  20_WW_BL_TP         BL\n5  Zm_1 20_WW_ML_TP1         ML\n6  Zm_2 20_WW_ML_TP1         ML\n7  Zm_1  20_WW_ML_TP         ML\n8  Zm_2  20_WW_ML_TP         ML\n9  Zm_1 20_WW_TL_TP1         TL\n10 Zm_2 20_WW_TL_TP1         TL\n11 Zm_1 20_WW_TL_TP3         TL\n12 Zm_2 20_WW_TL_TP3         TL\n\n\n\n\n\n\n\n\n\n\n\n\nHere are the collection of functions that let you change the letter case of strings.\n\nTo upper case\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nTo lower case\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nOnly the first letter is capitalized\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nYou can pad strings with symbols of your choice so the resulting string are of the length you specify.\n\n#--- NOT RUN ---#\nstringr::str_pad(strings, string length, side, padding symbol)\n\n\nExamples\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-7-Date-String/07-1-date-string.html#exercises",
    "href": "lectures/Chapter-7-Date-String/07-1-date-string.html#exercises",
    "title": "07-1: Date and String Management",
    "section": "Exercises",
    "text": "Exercises\n\nData preparationExercise 1Exercise 2\n\n\nWe will work with the following data:\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nUse stringr::str_c() to combine, year, month, and day using “-” as the separator and convert the combined text to Date using lubridate.\n\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nCode\ndate_data %&gt;%\n  mutate(date_as_str = str_c(year, month, day, sep = \"-\")) %&gt;%\n  mutate(date_as_Date = ymd(date_as_str)) %&gt;%\n  select(date_as_Date)\n\n\n\n\n\n\n\n\nUsing Date math to recover the dates from year and day_of_year.\n\n\nWork hereAnswer\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nCode\ndate_data %&gt;%\n  mutate(first_day_of_year = ymd(str_c(year, \"01-01\"))) %&gt;%\n  mutate(date = first_day_of_year + day_of_year - 1)"
  },
  {
    "objectID": "lectures/Chapter-8-Table/08-2-modelsummary.html#tips-to-make-the-most-of-the-lecture-notes",
    "href": "lectures/Chapter-8-Table/08-2-modelsummary.html#tips-to-make-the-most-of-the-lecture-notes",
    "title": "08-2: Make Regression and Summary Tables with modelsummary",
    "section": "Tips to make the most of the lecture notes",
    "text": "Tips to make the most of the lecture notes\n\nInteractive navigation toolsRunning and writing codes\n\n\n\nClick on the three horizontally stacked lines at the bottom left corner of the slide, then you will see table of contents, and you can jump to the section you want\nHit letter “o” on your keyboard and you will have a panel view of all the slides\n\n\n\n\nThe box area with a hint of blue as the background color is where you can write code (hereafter referred to as the “code area”).\nHit the “Run Code” button to execute all the code inside the code area.\nYou can evaluate (run) code selectively by highlighting the parts you want to run and hitting Command + Enter for Mac (Ctrl + Enter for Windows).\nIf you want to run the codes on your computer, you can first click on the icon with two sheets of paper stacked on top of each other (top right corner of the code chunk), which copies the code in the code area. You can then paste it onto your computer.\nYou can click on the reload button (top right corner of the code chunk, left to the copy button) to revert back to the original code."
  },
  {
    "objectID": "lectures/Chapter-8-Table/08-2-modelsummary.html#create-regression-tables-with-the-modelsummary-package",
    "href": "lectures/Chapter-8-Table/08-2-modelsummary.html#create-regression-tables-with-the-modelsummary-package",
    "title": "08-2: Make Regression and Summary Tables with modelsummary",
    "section": "Create regression tables with the modelsummary package",
    "text": "Create regression tables with the modelsummary package\n\nDatasetInitiate a regression tableModifySwapping VCOVSave the table\n\n\n\nGet the dataLook at the data\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWe use county_yield throughout this lecture.\nFirst install the r.spatial.workshop.datasets package.\n\n#--- install the r.spatial.workshop.datasets package ---#\ninstall.packages(\"r.spatial.workshop.datasets\", repos = c(\"https://tmieno2.r-universe.dev\", \"https://cran.r-project.org\"))\n\n\nThen, get the data:\n\n#--- get the data ---#\ndata(county_yield, package = \"r.spatial.workshop.datasets\")\n\ncounty_yield &lt;- dplyr::select(county_yield, - geometry)\n\n\n\n\ncounty_yield\n\n# A tibble: 1,956 × 10\n   corn_yield soy_yield  year county_code state_name d0_5_9 d1_5_9 d2_5_9 d3_5_9\n        &lt;dbl&gt;     &lt;dbl&gt; &lt;int&gt; &lt;chr&gt;       &lt;chr&gt;       &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n 1       123       42    2000 053         Kansas       2.49  2.87   0.134   0   \n 2       188.      NA    2017 095         Kansas       8.72  0      0       0   \n 3       169.      58.4  2016 095         Kansas       1     0      0       0   \n 4       198.      NA    2015 095         Kansas       1.76  1.21   2.09    0   \n 5       152.      NA    2012 095         Kansas       6.28  1.47   9.54    4.46\n 6       170       42    2007 095         Kansas       0     0      0       0   \n 7       193       49    2005 095         Kansas       4.32  0      0       0   \n 8       173       47    2003 095         Kansas       2.29  5.16   4.46    1.09\n 9       165       40    2002 095         Kansas       3.71  1.48   1.90    0   \n10       171       52    2001 095         Kansas       9.88  0.188  0       0   \n# ℹ 1,946 more rows\n# ℹ 1 more variable: d4_5_9 &lt;dbl&gt;\n\n\n\nVariable Definitions\n\nsoy_yield: soybean yield (bu/acre)\ncorn_yield: corn yield (bu/acre)\nd0_5_9: ratio of weeks under drought severity of 0 from May to September\nd1_5_9: ~ drought severity of 1 from May to September\n\nd2_5_9: ~ drought severity of 2 from May to September\n\nd3_5_9: ~ drought severity of 3 from May to September\n\nd4_5_9: ~ drought severity of 4 from May to September\n\n\n\n\n\n\n\n\nPrepare regression resultsdefault table\n\n\nLet’s first run regressions which we are going to report in tables.\n\nmodel_1_corn &lt;- lm(corn_yield ~ d1_5_9 + d2_5_9, data = county_yield)\nmodel_2_corn &lt;- lm(corn_yield ~ d1_5_9 + d2_5_9 + d3_5_9 + d4_5_9, data = county_yield)\nmodel_1_soy &lt;- lm(soy_yield ~ d1_5_9 + d2_5_9, data = county_yield)\nmodel_2_soy &lt;- lm(soy_yield ~ d1_5_9 + d2_5_9 + d3_5_9 + d4_5_9, data = county_yield)\n\n\nGet White-Huber robust variance-covariance matrix for the regressions:\n\nvcov_1_corn &lt;- vcovHC(model_1_corn)\nvcov_2_corn &lt;- vcovHC(model_2_corn)\nvcov_1_soy &lt;- vcovHC(model_1_soy)\nvcov_2_soy &lt;- vcovHC(model_2_soy)\n\n\n\nYou can supply a list of regression results to modelsummary::msummary() to create a default regression table.\n\nmodelsummary::msummary(\n  list(\n    model_1_corn,\n    model_2_corn,\n    model_1_soy,\n    model_2_soy\n  )\n)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                 \n                (1)\n                (2)\n                (3)\n                (4)\n              \n        \n        \n        \n                \n                  (Intercept)\n                  181.978\n                  183.882\n                  56.049\n                  56.202\n                \n                \n                  \n                  (0.678)\n                  (0.690)\n                  (0.288)\n                  (0.295)\n                \n                \n                  d1_5_9\n                  -0.216\n                  -0.367\n                  -0.062\n                  -0.069\n                \n                \n                  \n                  (0.135)\n                  (0.133)\n                  (0.055)\n                  (0.055)\n                \n                \n                  d2_5_9\n                  -1.081\n                  -0.836\n                  -0.327\n                  -0.298\n                \n                \n                  \n                  (0.124)\n                  (0.129)\n                  (0.053)\n                  (0.055)\n                \n                \n                  d3_5_9\n                  \n                  -0.754\n                  \n                  -0.173\n                \n                \n                  \n                  \n                  (0.158)\n                  \n                  (0.090)\n                \n                \n                  d4_5_9\n                  \n                  -2.194\n                  \n                  -0.137\n                \n                \n                  \n                  \n                  (0.320)\n                  \n                  (0.213)\n                \n                \n                  Num.Obs.\n                  1956\n                  1956\n                  1100\n                  1100\n                \n                \n                  R2\n                  0.050\n                  0.099\n                  0.047\n                  0.052\n                \n                \n                  R2 Adj.\n                  0.049\n                  0.097\n                  0.046\n                  0.049\n                \n                \n                  AIC\n                  17806.4\n                  17708.0\n                  7475.7\n                  7474.2\n                \n                \n                  BIC\n                  17828.8\n                  17741.4\n                  7495.8\n                  7504.2\n                \n                \n                  Log.Lik.\n                  -8899.218\n                  -8847.985\n                  -3733.873\n                  -3731.078\n                \n                \n                  F\n                  51.768\n                  53.480\n                  27.207\n                  15.043\n                \n                \n                  RMSE\n                  22.89\n                  22.30\n                  7.21\n                  7.19\n                \n        \n      \n    \n\n\n\n\n\n\n\n\n\n\nHowstarscoef_mapcoef_omitgof_omitadd_rows\n\n\nmodelsummary::msummary() offers multiple options to modify the default regression table to your liking:\n\ntitle: put a title to the table\nstars: place significance symbols (and modify the symbol placement rules)\ncoef_map: change the order and label of variable names\n\nnotes: add footnotes\nfmt: change the format of numbers\nstatistic: type of statistics you display along with coefficient estimates\ngof_map: define which model statistics to display\ngof_omit: define which model statistics to omit from the default selection of model statistics\nadd_rows: add rows of arbitrary contents to the table\n\n\n\n\n\nAdd stars = TRUE in modelsummary::msummary() to add significance markers.\nYou can modify significance levels and markers by supplying a named vector with its elements being the significance levels and their corresponding names being the significance markers.\n\nExample:\n\n#--- create a named vector ---#\nstars_label &lt;- c(\"+\" = 0.1, \"&+\" = 0.05, \"+*+\" = 0.01)\n\n#--- create a table ---#\nmodelsummary::msummary(model_1_corn, stars = stars_label)\n\n\n\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                 \n                (1)\n              \n        \n        + p &lt; 0.1, &+ p &lt; 0.05, +*+ p &lt; 0.01\n        \n                \n                  (Intercept)\n                  181.978+*+\n                \n                \n                  \n                  (0.678)\n                \n                \n                  d1_5_9\n                  -0.216\n                \n                \n                  \n                  (0.135)\n                \n                \n                  d2_5_9\n                  -1.081+*+\n                \n                \n                  \n                  (0.124)\n                \n                \n                  Num.Obs.\n                  1956\n                \n                \n                  R2\n                  0.050\n                \n                \n                  R2 Adj.\n                  0.049\n                \n                \n                  AIC\n                  17806.4\n                \n                \n                  BIC\n                  17828.8\n                \n                \n                  Log.Lik.\n                  -8899.218\n                \n                \n                  F\n                  51.768\n                \n                \n                  RMSE\n                  22.89\n                \n        \n      \n    \n\n\n\n\n\n\n\n\n\n\ncoef_map allows you to reorder coefficient rows and change their labels.\nSimilarly with the stars option, you supply a named vector where its names are the existing labels and their corresponding elements are the new labels.\nIn the table, the coefficient rows are placed in the order they are ordered in the named vector.\n\n\n#--- define a coef_map vector ---#\ncoef_map_vec &lt;- c(\n  \"d1_5_9\" = \"DI: category 1\", \n  \"d2_5_9\" = \"DI: category 2\", \n  \"d3_5_9\" = \"DI: category 3\", \n  \"d4_5_9\" = \"DI: category 4\", \n  \"(Intercept)\" = \"Constant\"\n) \n\n#--- create a table ---#\nmodelsummary::msummary(\n  list(model_2_corn, model_2_soy), \n  coef_map = coef_map_vec\n)\n\n\n\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                 \n                (1)\n                (2)\n              \n        \n        \n        \n                \n                  DI: category 1\n                  -0.367\n                  -0.069\n                \n                \n                  \n                  (0.133)\n                  (0.055)\n                \n                \n                  DI: category 2\n                  -0.836\n                  -0.298\n                \n                \n                  \n                  (0.129)\n                  (0.055)\n                \n                \n                  DI: category 3\n                  -0.754\n                  -0.173\n                \n                \n                  \n                  (0.158)\n                  (0.090)\n                \n                \n                  DI: category 4\n                  -2.194\n                  -0.137\n                \n                \n                  \n                  (0.320)\n                  (0.213)\n                \n                \n                  Constant\n                  183.882\n                  56.202\n                \n                \n                  \n                  (0.690)\n                  (0.295)\n                \n                \n                  Num.Obs.\n                  1956\n                  1100\n                \n                \n                  R2\n                  0.099\n                  0.052\n                \n                \n                  R2 Adj.\n                  0.097\n                  0.049\n                \n                \n                  AIC\n                  17708.0\n                  7474.2\n                \n                \n                  BIC\n                  17741.4\n                  7504.2\n                \n                \n                  Log.Lik.\n                  -8847.985\n                  -3731.078\n                \n                \n                  F\n                  53.480\n                  15.043\n                \n                \n                  RMSE\n                  22.30\n                  7.19\n                \n        \n      \n    \n\n\n\n\n\n\n\n\n\n\ncoef_omit() lets you omit coefficient rows from the default selections.\nYou supply a vector of strings (and/or regular expressions), and coefficient rows that match the string pattern will be omitted.\n\nExample\n\nmodelsummary::msummary(\n  list(model_2_corn, model_2_soy), \n  coef_omit =\"d2\"\n)\n\n\nd2 matches with d2_5_9, and rows associated with the coefficients on d2_5_9 are removed.\n\n\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                 \n                (1)\n                (2)\n              \n        \n        \n        \n                \n                  (Intercept)\n                  183.882\n                  56.202\n                \n                \n                  \n                  (0.690)\n                  (0.295)\n                \n                \n                  d1_5_9\n                  -0.367\n                  -0.069\n                \n                \n                  \n                  (0.133)\n                  (0.055)\n                \n                \n                  d3_5_9\n                  -0.754\n                  -0.173\n                \n                \n                  \n                  (0.158)\n                  (0.090)\n                \n                \n                  d4_5_9\n                  -2.194\n                  -0.137\n                \n                \n                  \n                  (0.320)\n                  (0.213)\n                \n                \n                  Num.Obs.\n                  1956\n                  1100\n                \n                \n                  R2\n                  0.099\n                  0.052\n                \n                \n                  R2 Adj.\n                  0.097\n                  0.049\n                \n                \n                  AIC\n                  17708.0\n                  7474.2\n                \n                \n                  BIC\n                  17741.4\n                  7504.2\n                \n                \n                  Log.Lik.\n                  -8847.985\n                  -3731.078\n                \n                \n                  F\n                  53.480\n                  15.043\n                \n                \n                  RMSE\n                  22.30\n                  7.19\n                \n        \n      \n    \n\n\n\n\n\n\n\n\n\n\ngof_omit() lets you omit model statistics like \\(R^2\\) from the default selections.\nYou supply a vector of strings (and/or regular expressions), and statistics that match the string pattern will be omitted.\n\nExample\n\nmodelsummary::msummary(\n  list(model_2_corn, model_2_soy), \n  gof_omit =\"IC|Adj\"\n)\n\nIC matches with AIC and BIC, and Adj matches with R2 Adj\n\n\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                 \n                (1)\n                (2)\n              \n        \n        \n        \n                \n                  (Intercept)\n                  183.882\n                  56.202\n                \n                \n                  \n                  (0.690)\n                  (0.295)\n                \n                \n                  d1_5_9\n                  -0.367\n                  -0.069\n                \n                \n                  \n                  (0.133)\n                  (0.055)\n                \n                \n                  d2_5_9\n                  -0.836\n                  -0.298\n                \n                \n                  \n                  (0.129)\n                  (0.055)\n                \n                \n                  d3_5_9\n                  -0.754\n                  -0.173\n                \n                \n                  \n                  (0.158)\n                  (0.090)\n                \n                \n                  d4_5_9\n                  -2.194\n                  -0.137\n                \n                \n                  \n                  (0.320)\n                  (0.213)\n                \n                \n                  Num.Obs.\n                  1956\n                  1100\n                \n                \n                  R2\n                  0.099\n                  0.052\n                \n                \n                  Log.Lik.\n                  -8847.985\n                  -3731.078\n                \n                \n                  F\n                  53.480\n                  15.043\n                \n                \n                  RMSE\n                  22.30\n                  7.19\n                \n        \n      \n    \n\n\n\n\n\n\n\n\nadd_rows() can be used to insert arbitrary rows into a table. Adding rows using add_rows() is a two-step process:\n\nCreating a data.frame (or tibble) to insert\n\n\n#--- create a table (data.frame) to insert ---#\n(\nrows &lt;- data.frame(\n  c1 = c(\"FE: County\", \"FE: Year\"),\n  c2 = c(\"Yes\", \"Yes\"),\n  c3 = c(\"No\", \"Now\")\n  )\n)\n\n          c1  c2  c3\n1 FE: County Yes  No\n2   FE: Year Yes Now\n\n\n\n\nTell which rows you will inset the data.frame by attr(data.frame, \"position\") &lt;- row number.\n\n\n#--- tell where to insert ---#\nattr(rows, \"position\") &lt;- c(3, 4)\n\n#--- create a table with rows inserted ---#\nmodelsummary::msummary(\n  list(Moddel1 = model_2_corn, Model2 = model_2_soy), \n  gof_omit =\"IC|Adj\",\n  coef_omit = \"d\",\n  add_row = rows #&lt;&lt;\n)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                 \n                Moddel1\n                Model2\n              \n        \n        \n        \n                \n                  (Intercept)\n                  183.882\n                  56.202\n                \n                \n                  \n                  (0.690)\n                  (0.295)\n                \n                \n                  FE: County\n                  Yes\n                  No\n                \n                \n                  FE: Year\n                  Yes\n                  Now\n                \n                \n                  Num.Obs.\n                  1956\n                  1100\n                \n                \n                  R2\n                  0.099\n                  0.052\n                \n                \n                  Log.Lik.\n                  -8847.985\n                  -3731.078\n                \n                \n                  F\n                  53.480\n                  15.043\n                \n                \n                  RMSE\n                  22.30\n                  7.19\n                \n        \n      \n    \n\n\n\n\n\n\n\n\n\n\nInstructionCompare\n\n\nIt is often the case that we replace the default variance-covariance matrix with a robust one for valid statistical testing.\nYou can achieve this using the statistic_override option. You will give a list of variance-covariance matrices in the order their corresponding regression results appear on the table.\n\nSyntax:\n\nstatistic_override = list(vcov_1, vcov_2, ...)\n\n\n\n\n\nDefault:\n\nmodelsummary::msummary(\n  list(Moddel1 = model_2_corn, Model2 = model_2_soy), \n  gof_omit = \"IC|R\",\n  coef_omit = \"d3|d4\",\n  #--- no statistical override ---#\n)  \n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                 \n                Moddel1\n                Model2\n              \n        \n        \n        \n                \n                  (Intercept)\n                  183.882\n                  56.202\n                \n                \n                  \n                  (0.690)\n                  (0.295)\n                \n                \n                  d1_5_9\n                  -0.367\n                  -0.069\n                \n                \n                  \n                  (0.133)\n                  (0.055)\n                \n                \n                  d2_5_9\n                  -0.836\n                  -0.298\n                \n                \n                  \n                  (0.129)\n                  (0.055)\n                \n                \n                  Num.Obs.\n                  1956\n                  1100\n                \n                \n                  Log.Lik.\n                  -8847.985\n                  -3731.078\n                \n                \n                  F\n                  53.480\n                  15.043\n                \n        \n      \n    \n\n\n\n\nVCOV swapped:\n\nmodelsummary::msummary(\n  list(Moddel1 = model_2_corn, Model2 = model_2_soy), \n  gof_omit = \"IC|R\",\n  coef_omit = \"d3|d4\",\n  statistic_override = list(vcov_2_corn, vcov_2_soy) #&lt;&lt;\n)  \n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                 \n                Moddel1\n                Model2\n              \n        \n        \n        \n                \n                  (Intercept)\n                  183.882\n                  56.202\n                \n                \n                  \n                  (0.690)\n                  (0.295)\n                \n                \n                  d1_5_9\n                  -0.367\n                  -0.069\n                \n                \n                  \n                  (0.133)\n                  (0.055)\n                \n                \n                  d2_5_9\n                  -0.836\n                  -0.298\n                \n                \n                  \n                  (0.129)\n                  (0.055)\n                \n                \n                  Num.Obs.\n                  1956\n                  1100\n                \n                \n                  Log.Lik.\n                  -8847.985\n                  -3731.078\n                \n                \n                  F\n                  53.480\n                  15.043\n                \n        \n      \n    \n\n\n\n\n\n\n\n\n\n\n\n\nYou can save the table to a file by providing a file name to the output option.\nThe supported file types are:\n\n.html\n.tex\n.md\n.txt\n.docx, pptx\n.png\n.jpg\n\n\nExample:\nThe docx option may be particularly useful for those who want to put finishing touches on the table manually on WORD:\n\nmodelsummary::msummary(\n  list(Moddel1 = model_2_corn, Model2 = model_2_soy),\n  output = \"reg_results_table.docx\" #&lt;&lt;\n)"
  },
  {
    "objectID": "lectures/Chapter-8-Table/08-2-modelsummary.html#further-modify-regression-tables-with-other-packages",
    "href": "lectures/Chapter-8-Table/08-2-modelsummary.html#further-modify-regression-tables-with-other-packages",
    "title": "08-2: Make Regression and Summary Tables with modelsummary",
    "section": "Further modify regression tables with other packages",
    "text": "Further modify regression tables with other packages\n\noutput typeedit with flextableedit with gt\n\n\nUsing the output option in modelsummary::msummary(), you can turn the regression table into R objects that are readily modifiable by the gt, kableExtra, and flextable packages.\n\nExample: flextable\n\n#--- create a regression table and turn it into a gt_tbl ---#\nreg_table_ft &lt;- list(model_1_corn, model_1_soy)%&gt;% \n  modelsummary::msummary(output = \"flextable\")\n\n#--- check the class ---#\nclass(reg_table_ft)\n\n[1] \"flextable\"\n\n\n\nExample: gt\n\n#--- create a regression table and turn it into a gt_tbl ---#\nreg_table_gt &lt;- list(model_1_corn, model_1_soy)%&gt;% \n  modelsummary::msummary(output = \"gt\")\n\n#--- check the class ---#\nclass(reg_table_gt)\n\n[1] \"gt_tbl\" \"list\"  \n\n\n\n\n\n\nNow that the regression table created using modelsummary::msummary() with output = \"flextable\" is a flextable object.\nSo, we can use our knowledge of the flextable package to further modify the regression table if you would like.\nFor the details of how to use the flextable package visit the flextable lecture notes.\nHere I will just given you an example of the use of flextable operations.\n\n\n\n\n\n\n\n\nExample\n\nlist(\n  \"Corn 1\" = model_1_corn, \n  \"Corn 2\" =  model_2_corn, \n  \"Soy 1\" = model_1_soy, \n  \"Soy 2\" = model_2_soy\n) %&gt;% \nmodelsummary::msummary(\n  output = \"flextable\",\n  gof_omit =\"IC|Adj\",\n) %&gt;%  \nbold(i = 9, j = c(3, 5), bold = TRUE) %&gt;% \ncolor(i = 3, j = 2, color = \"red\")\n\n\n\n\n Corn 1Corn 2Soy 1Soy 2(Intercept)181.978183.88256.04956.202(0.678)(0.690)(0.288)(0.295)d1_5_9-0.216-0.367-0.062-0.069(0.135)(0.133)(0.055)(0.055)d2_5_9-1.081-0.836-0.327-0.298(0.124)(0.129)(0.053)(0.055)d3_5_9-0.754-0.173(0.158)(0.090)d4_5_9-2.194-0.137(0.320)(0.213)Num.Obs.1956195611001100R20.0500.0990.0470.052Log.Lik.-8899.218-8847.985-3733.873-3731.078F51.76853.48027.20715.043RMSE22.8922.307.217.19\n\n\n\n\n\n\n\nNow that the regression table is a gt_tbl object, we can use our knowledge of the gt package to modify the regression table.\nFor the details of how to use the gt package go here. Here I will just given you an example of the use of gt operations.\n\n\nExample\n\nlist(\n  \"Corn 1\" = model_1_corn, \n  \"Corn 2\" =  model_2_corn, \n  \"Soy 1\" = model_1_soy, \n  \"Soy 2\" = model_2_soy\n) %&gt;% \n  modelsummary::msummary(\n    output = \"gt\",\n    gof_omit =\"IC|Adj\",\n  ) %&gt;%  \n  gt::tab_spanner( #&lt;&lt;\n    label = \"Corn\", #&lt;&lt;\n    columns = vars(\"Corn 1\", \"Corn 2\") #&lt;&lt;\n  ) %&gt;% #&lt;&lt;\n  gt::tab_style( #&lt;&lt;\n    style = cell_text(color = 'red'), #&lt;&lt;\n    locations = cells_body(rows = 7:8) #&lt;&lt;\n  ) #&lt;&lt;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCorn\n\nSoy 1\nSoy 2\n\n\nCorn 1\nCorn 2\n\n\n\n\n(Intercept)\n181.978\n183.882\n56.049\n56.202\n\n\n\n(0.678)\n(0.690)\n(0.288)\n(0.295)\n\n\nd1_5_9\n-0.216\n-0.367\n-0.062\n-0.069\n\n\n\n(0.135)\n(0.133)\n(0.055)\n(0.055)\n\n\nd2_5_9\n-1.081\n-0.836\n-0.327\n-0.298\n\n\n\n(0.124)\n(0.129)\n(0.053)\n(0.055)\n\n\nd3_5_9\n\n-0.754\n\n-0.173\n\n\n\n\n(0.158)\n\n(0.090)\n\n\nd4_5_9\n\n-2.194\n\n-0.137\n\n\n\n\n(0.320)\n\n(0.213)\n\n\nNum.Obs.\n1956\n1956\n1100\n1100\n\n\nR2\n0.050\n0.099\n0.047\n0.052\n\n\nLog.Lik.\n-8899.218\n-8847.985\n-3733.873\n-3731.078\n\n\nF\n51.768\n53.480\n27.207\n15.043\n\n\nRMSE\n22.89\n22.30\n7.21\n7.19"
  },
  {
    "objectID": "lectures/Chapter-8-Table/08-2-modelsummary.html#example-table",
    "href": "lectures/Chapter-8-Table/08-2-modelsummary.html#example-table",
    "title": "08-2: Make Regression and Summary Tables with modelsummary",
    "section": "Example table",
    "text": "Example table\n\ncounty_yield %&gt;% \n  dplyr::filter(year %in% 2010:2012) %&gt;% \n  modelsummary::datasummary(\n    (Year = factor(year)) * (\n      (`Corn Yield (bu/acre)` = corn_yield) + \n      (`Soy Yield (bu/acre)` = soy_yield) + \n      (`DI: category 4` = d4_5_9)\n    ) ~ \n    state_name * (Mean + SD) ,\n    data = .\n  )  \n\n\n\n    \n\n    \n    \n      \n        \n\n \n \nColorado\nKansas\nNebraska\n\n        \n              \n                Year\n                 \n                Mean\n                SD\n                Mean\n                SD\n                Mean\n                SD\n              \n        \n        \n        \n                \n                  2010\n                  Corn Yield (bu/acre)\n                  196.08\n                  12.96\n                  182.38\n                  17.12\n                  182.37\n                  14.80\n                \n                \n                  \n                  Soy Yield (bu/acre)\n                  \n                  \n                  \n                  \n                  58.79\n                  4.30\n                \n                \n                  \n                  DI: category 4\n                  0.00\n                  0.00\n                  0.00\n                  0.00\n                  0.00\n                  0.00\n                \n                \n                  2011\n                  Corn Yield (bu/acre)\n                  186.25\n                  12.76\n                  160.56\n                  29.69\n                  178.32\n                  16.00\n                \n                \n                  \n                  Soy Yield (bu/acre)\n                  \n                  \n                  \n                  \n                  60.35\n                  5.39\n                \n                \n                  \n                  DI: category 4\n                  0.00\n                  0.00\n                  1.52\n                  3.33\n                  0.00\n                  0.00\n                \n                \n                  2012\n                  Corn Yield (bu/acre)\n                  160.50\n                  31.69\n                  161.33\n                  17.44\n                  185.91\n                  18.44\n                \n                \n                  \n                  Soy Yield (bu/acre)\n                  \n                  \n                  \n                  \n                  59.80\n                  5.21\n                \n                \n                  \n                  DI: category 4\n                  1.79\n                  1.60\n                  6.16\n                  3.59\n                  3.05\n                  2.65"
  },
  {
    "objectID": "lectures/Chapter-8-Table/08-2-modelsummary.html#modelsummarydatasummary",
    "href": "lectures/Chapter-8-Table/08-2-modelsummary.html#modelsummarydatasummary",
    "title": "08-2: Make Regression and Summary Tables with modelsummary",
    "section": "modelsummary::datasummary()",
    "text": "modelsummary::datasummary()\n\nBasicssummary functionsuser-defined functionadd stats/variablesAll\n\n\n\n\nSyntax:\n\nmodelsummary::datasummary(formula, data = dataset)\n\nformula has two sides separated by ~ just like formula for regression.\nVariables/statistics on the left-hand side (right-hand side) comprise rows (columns).\n\nExample\n\nmodelsummary::datasummary(\n  corn_yield ~ Mean, #&lt;&lt;\n  data = county_yield\n)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                 \n                Mean\n              \n        \n        \n        \n                \n                  corn_yield\n                  178.25\n                \n        \n      \n    \n\n\n\n\nSwitching the order changes the structure of the resulting table:\n\nmodelsummary::datasummary(\n  Mean ~ corn_yield, #&lt;&lt;\n  data = county_yield\n)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                 \n                corn_yield\n              \n        \n        \n        \n                \n                  Mean\n                  178.25\n                \n        \n      \n    \n\n\n\n\n\n\n\n\n\n\nThe modelsummary package offers multiple summary functions of its own:\n\nMean\nSD\nMin\nMax\nP0, P25, P50, P75, P100\nHistogram\n\nThese functions have na.rm = NA hidden inside it, so they avoid having NA when simply applying their counterparts from the base package.\n\nFor example, compare these two:\n\nmodelsummary::datasummary(\n  corn_yield ~ Mean, #&lt;&lt;\n  data = county_yield\n)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                 \n                Mean\n              \n        \n        \n        \n                \n                  corn_yield\n                  178.25\n                \n        \n      \n    \n\n\n\n\n\nmodelsummary::datasummary(\n  #--- mean from the base package ---#\n  corn_yield ~ mean, #&lt;&lt;\n  data = county_yield\n)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                 \n                mean\n              \n        \n        \n        \n                \n                  corn_yield\n                  178.25\n                \n        \n      \n    \n\n\n\n\n\n\n\n\nYou can use a user-defined function that takes a vector of values and return a single value.\nExample:\n\n#--- define a function ---#\nMinMax &lt;- function(x){\n  paste0('[', min(x, na.rm = TRUE), ', ', max(x, na.rm = TRUE), ']')\n} \n\n#--- use it ---#\nmodelsummary::datasummary(corn_yield ~ MinMax, data = county_yield) \n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                 \n                MinMax\n              \n        \n        \n        \n                \n                  corn_yield\n                  [0, 234.3]\n                \n        \n      \n    \n\n\n\n\n\nYou can add more variables and statistics using +.\nExample:\n\nmodelsummary::datasummary(\n  corn_yield + soy_yield + d0_5_9 + d1_5_9\n  ~ Mean + SD+ MinMax + Histogram, \n  data = county_yield\n)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                 \n                Mean\n                SD\n                MinMax\n                Histogram\n              \n        \n        \n        \n                \n                  corn_yield\n                  178.25\n                  23.50\n                  [0, 234.3]\n                  ▁▄▇▆▁\n                \n                \n                  soy_yield\n                  54.95\n                  7.39\n                  [15, 74.3]\n                  ▁▄▇▆▃▁\n                \n                \n                  d0_5_9\n                  3.92\n                  3.94\n                  [0, 21.3569]\n                  ▇▃▃▂▁\n                \n                \n                  d1_5_9\n                  3.15\n                  4.15\n                  [0, 21.4838]\n                  ▇▁▁▁▁\n                \n        \n      \n    \n\n\n\nFor each of the variables on the left-hand side, each of the statistics on the right-hand side is calculated and displayed.\n\n\nYou can use All() to create a summary table for all the numeric variables in the dataset.\nAt the moment, All() does not work on tibble. So, if your dataset is tibble, convert it to a data.frame on the fly in the code like below:\nExample:\n\nmodelsummary::datasummary(\n  All(data.frame(county_yield)) \n  ~ Mean + SD, \n  data = county_yield\n)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                 \n                Mean\n                SD\n              \n        \n        \n        \n                \n                  corn_yield\n                  178.25\n                  23.50\n                \n                \n                  soy_yield\n                  54.95\n                  7.39\n                \n                \n                  year\n                  2007.38\n                  5.22\n                \n                \n                  d0_5_9\n                  3.92\n                  3.94\n                \n                \n                  d1_5_9\n                  3.15\n                  4.15\n                \n                \n                  d2_5_9\n                  2.82\n                  4.51\n                \n                \n                  d3_5_9\n                  1.60\n                  3.61\n                \n                \n                  d4_5_9\n                  0.41\n                  1.69"
  },
  {
    "objectID": "lectures/Chapter-8-Table/08-2-modelsummary.html#more-on-tablesummary",
    "href": "lectures/Chapter-8-Table/08-2-modelsummary.html#more-on-tablesummary",
    "title": "08-2: Make Regression and Summary Tables with modelsummary",
    "section": "More on tablesummary()",
    "text": "More on tablesummary()\n\nNesting by groupdeeperrenamingfunction argumentstitle and notesalign columnsOutput\n\n\nYou can nest categorical variables with *, meaning you can get summary statistics for each value of the categorical variable (like group_by() %&gt;% summarize()).\n\nSyntax\n\n#--- single stat ---#\nvariable ~ category_variable * stat  \n\n#--- multiple stats ---#\nvariable ~ category_variable * (stat 1 + stat 2 + ...)  \n\n\nExamples:\n\nmodelsummary::datasummary(\n  corn_yield + soy_yield + d0_5_9 + d1_5_9\n  ~ state_name * (Mean + SD) + MinMax, #&lt;&lt; \n  data = county_yield\n)\n\n\n\n    \n\n    \n    \n      \n        \n\n \nColorado\nKansas\nNebraska\n \n\n        \n              \n                 \n                Mean\n                SD\n                Mean\n                SD\n                Mean\n                SD\n                MinMax\n              \n        \n        \n        \n                \n                  corn_yield\n                  168.26\n                  30.64\n                  173.06\n                  24.32\n                  181.65\n                  21.32\n                  [0, 234.3]\n                \n                \n                  soy_yield\n                  \n                  \n                  50.74\n                  7.34\n                  55.80\n                  7.11\n                  [15, 74.3]\n                \n                \n                  d0_5_9\n                  4.23\n                  4.67\n                  3.69\n                  3.81\n                  3.97\n                  3.89\n                  [0, 21.3569]\n                \n                \n                  d1_5_9\n                  2.66\n                  3.52\n                  2.96\n                  4.19\n                  3.28\n                  4.20\n                  [0, 21.4838]\n                \n        \n      \n    \n\n\n\nFor each value of state_name (Nebraska, Colorado, Kansas), Mean and SD are shown for each of the variables on the left-hand side. But, MinMax is for the entire sample.\n\n\nYou can nest with multiple categorical variables by multiplying stats with multiple categorical variables.\nExample:\n\ncounty_yield %&gt;% \n  dplyr::filter(year %in% 2011:2012) %&gt;% \n  dplyr::filter(state_name %in% c(\"Kansas\", \"Nebraska\")) %&gt;% \n  modelsummary::datasummary(\n    corn_yield + soy_yield + d0_5_9 + d1_5_9\n    ~ factor(year) * state_name * (Mean + SD) + MinMax, #&lt;&lt; \n    data = .\n  )\n\n\n\n    \n\n    \n    \n      \n        \n\n \n2011\n2012\n \n\n\n \nKansas\nNebraska\nKansas\nNebraska\n \n\n        \n              \n                 \n                Mean\n                SD\n                Mean\n                SD\n                Mean\n                SD\n                Mean\n                SD\n                MinMax\n              \n        \n        \n        \n                \n                  corn_yield\n                  160.56\n                  29.69\n                  178.32\n                  16.00\n                  161.33\n                  17.44\n                  185.91\n                  18.44\n                  [100, 217]\n                \n                \n                  soy_yield\n                  \n                  \n                  60.35\n                  5.39\n                  \n                  \n                  59.80\n                  5.21\n                  [48, 70.3]\n                \n                \n                  d0_5_9\n                  3.52\n                  3.18\n                  2.86\n                  2.01\n                  2.15\n                  1.25\n                  3.11\n                  1.34\n                  [0, 8.7386]\n                \n                \n                  d1_5_9\n                  5.05\n                  3.28\n                  0.01\n                  0.05\n                  2.62\n                  1.17\n                  2.74\n                  1.39\n                  [0, 10.1494]\n                \n        \n      \n    \n\n\n\nFor each of the unique combinations of state_name (Nebraska, Kansas) and year (2011, 2012), Mean and SD are shown for each of the variables on the left-hand side. But, MinMax is for the entire sample.\n\n\nBy default variable and statistics names are used as the labels in the table.\nYou can provide labels by the following syntax: (label = variable/stat)\n\nExample:\n\ncounty_yield %&gt;% \n  dplyr::filter(year %in% 2011:2012) %&gt;% \n  dplyr::filter(state_name %in% c(\"Kansas\", \"Nebraska\")) %&gt;% \n  modelsummary::datasummary(\n    (`Corn Yield (bu/acre)` = corn_yield) #&lt;&lt;\n    ~ state_name * (Mean + (Std.Dev. = SD)), #&lt;&lt; \n    data = .\n  )\n\n\n\n    \n\n    \n    \n      \n        \n\n \nKansas\nNebraska\n\n        \n              \n                 \n                Mean\n                Std.Dev.\n                Mean\n                Std.Dev.\n              \n        \n        \n        \n                \n                  Corn Yield (bu/acre)\n                  160.99\n                  23.31\n                  181.95\n                  17.56\n                \n        \n      \n    \n\n\n\n\ncorn_yield is labeled as Corn Yield (bu/acre)\nSD is labeled as Std.Dev.\n\n.content-box-red[Note: when you have spaces in the label, surround the label with back quotes.]\nIf you do not like this way of changing labels, you can always use gt package.\n\n\nYou can pass option arguments to the stats function by: stat * Argument(options)\n\nExample:\n\ncounty_yield %&gt;% \n  dplyr::filter(year %in% 2011:2012) %&gt;% \n  dplyr::filter(state_name %in% c(\"Kansas\", \"Nebraska\")) %&gt;% \n  modelsummary::datasummary(\n    corn_yield \n    ~ state_name * (mean + sd) * Arguments(na.rm = TRUE) + #&lt;&lt;\n      quantile * Arguments(prob = 0.1, na.rm = TRUE), #&lt;&lt; \n    data = .\n  )\n\n\n\n    \n\n    \n    \n      \n        \n\n \nKansas\nNebraska\n \n\n        \n              \n                 \n                mean\n                sd\n                mean\n                sd\n                quantile\n              \n        \n        \n        \n                \n                  corn_yield\n                  160.99\n                  23.31\n                  181.95\n                  17.56\n                  148.52\n                \n        \n      \n    \n\n\n\n\n\n(mean + sd) * Arguments(na.rm = TRUE) adds na.rm = TRUE option to mean() and sd()\nquantile * Arguments(prob = 0.1, na.rm = TRUE) adds prob = 0.1 and na.rm = TRUE to quantileo()\n\n\n\nExample\n\ncounty_yield %&gt;% \n  dplyr::filter(year %in% 2011:2012) %&gt;% \n  dplyr::filter(state_name %in% c(\"Kansas\", \"Nebraska\")) %&gt;% \n  modelsummary::datasummary(\n    corn_yield \n    ~ state_name * (mean + sd) * Arguments(na.rm = TRUE) + \n      quantile * Arguments(prob = 0.1, na.rm = TRUE),  \n    data = .,\n    title = \"A title\", #&lt;&lt;\n    notes = c(\"first note\", \"second note\") #&lt;&lt;\n  )\n\n\n\n    \n\n    \n    \n      \n        \n\n \nKansas\nNebraska\n \n\n        A title\n              \n                 \n                mean\n                sd\n                mean\n                sd\n                quantile\n              \n        \n        first note\nsecond note\n        \n                \n                  corn_yield\n                  160.99\n                  23.31\n                  181.95\n                  17.56\n                  148.52\n                \n        \n      \n    \n\n\n\n\n\nYou can use align to align columns. Available alignment are:\n\nl: left\nr: right\nc: center\n\nInside align(), you provide a sequence of the option letters (e.g., \"lrcle\")\nThe nth letter corresponds to nth column.\nExample:\n\ncounty_yield %&gt;% \n  dplyr::filter(year %in% 2011:2012) %&gt;% \n  dplyr::filter(state_name %in% c(\"Kansas\", \"Nebraska\")) %&gt;% \n  modelsummary::datasummary(\n    corn_yield \n    ~ state_name * (`This is M E A N` = mean) * Arguments(na.rm = TRUE) + \n      (`This is Q U A N T I L E` = quantile) * Arguments(prob = 0.1, na.rm = TRUE),  \n    data = .,\n    align = \"lrlc\" #&lt;&lt;\n  )\n\n\n\n    \n\n    \n    \n      \n        \n\n \nKansas\nNebraska\n \n\n        \n              \n                 \n                This is M E A N\n                This is M E A N\n                This is Q U A N T I L E\n              \n        \n        \n        \n                \n                  corn_yield\n                  160.99\n                  181.95\n                  148.52\n                \n        \n      \n    \n\n\n\n\n\nYou can use the output option to either export the table as a file or save it as R objects which you can further modify.\nThis works exactly the same way as the modelsummary::msummary() function."
  },
  {
    "objectID": "lectures/Chapter-8-Table/08-2-modelsummary.html#convenience-functions",
    "href": "lectures/Chapter-8-Table/08-2-modelsummary.html#convenience-functions",
    "title": "08-2: Make Regression and Summary Tables with modelsummary",
    "section": "Convenience functions",
    "text": "Convenience functions\n\nbalance tablecorrelation table\n\n\nIf your data was generated through randomized experiments (or you are using natural experiments), then datasummary_balance() can be very useful as it can generate a variable balance table.\n\nSyntax:\n\nmodelsummary::datasummary_balance(variables to summarize ~ treatment dummy)\n\n\nvariables to summarize: list of variables to summarize\ntreatment dummy: a dummy variable that indicates whether in the treated or control group\n\n\nExample:\n\ncounty_yield %&gt;% \n  dplyr::filter(state_name %in% c(\"Nebraska\", \"Kansas\")) %&gt;% \n  dplyr::select(c(state_name, where(is.numeric))) %&gt;% \n  dplyr::select(- year) %&gt;% \n  modelsummary::datasummary_balance(\n    All (data.frame(.))~ state_name, #&lt;&lt;\n    data = .\n  )\n\n\n\n\n\n    \n\n    \n    \n      \n        \n\n \nKansas (N=534)\nNebraska (N=1268)\n\n        \n              \n                 \n                Mean\n                Std. Dev.\n                Mean\n                Std. Dev.\n              \n        \n        \n        \n                \n                  corn_yield\n                  173.1\n                  24.3\n                  181.7\n                  21.3\n                \n                \n                  soy_yield\n                  50.7\n                  7.3\n                  55.8\n                  7.1\n                \n                \n                  d0_5_9\n                  3.7\n                  3.8\n                  4.0\n                  3.9\n                \n                \n                  d1_5_9\n                  3.0\n                  4.2\n                  3.3\n                  4.2\n                \n                \n                  d2_5_9\n                  2.6\n                  4.0\n                  2.8\n                  4.6\n                \n                \n                  d3_5_9\n                  1.6\n                  3.4\n                  1.5\n                  3.5\n                \n                \n                  d4_5_9\n                  0.7\n                  2.4\n                  0.3\n                  1.3\n                \n        \n      \n    \n\n\n\n\n\nYou can create a correlation table with datasummary_correlation().\n\ncounty_yield %&gt;% \n  dplyr::filter(state_name %in% c(\"Nebraska\", \"Kansas\")) %&gt;% \n  dplyr::select(c(state_name, where(is.numeric))) %&gt;% \n  dplyr::select(- year) %&gt;% \n  modelsummary::datasummary_correlation()\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                 \n                corn_yield\n                soy_yield\n                d0_5_9\n                d1_5_9\n                d2_5_9\n                d3_5_9\n                d4_5_9\n              \n        \n        \n        \n                \n                  corn_yield\n                  1\n                  .\n                  .\n                  .\n                  .\n                  .\n                  .\n                \n                \n                  soy_yield\n                  .71\n                  1\n                  .\n                  .\n                  .\n                  .\n                  .\n                \n                \n                  d0_5_9\n                  .13\n                  .04\n                  1\n                  .\n                  .\n                  .\n                  .\n                \n                \n                  d1_5_9\n                  -.13\n                  -.12\n                  .05\n                  1\n                  .\n                  .\n                  .\n                \n                \n                  d2_5_9\n                  -.24\n                  -.21\n                  -.28\n                  .38\n                  1\n                  .\n                  .\n                \n                \n                  d3_5_9\n                  -.20\n                  -.12\n                  -.30\n                  -.02\n                  .29\n                  1\n                  .\n                \n                \n                  d4_5_9\n                  -.22\n                  -.04\n                  -.18\n                  -.04\n                  .02\n                  .34\n                  1"
  },
  {
    "objectID": "lectures/Chapter-9-Spatial-Data/L02_raster_basics.html#before-you-start",
    "href": "lectures/Chapter-9-Spatial-Data/L02_raster_basics.html#before-you-start",
    "title": "09-2: R as GIS: Raster Data Basics",
    "section": "Before you start",
    "text": "Before you start\n\nLearning objectives\nLearn how to handle raster datasets using R.\n\n\n\nTable of contents\n\nRaster data basics\n\nobject type\naccessing metadata\nquick plotting\n\nInput an output\n\nread raster data files\nwrite to raster data files\n\nraster operations\n\narithmetic operations\naggregate\nresample\n\n\n\nRelated Contents (Links)\n\nCreate maps from raster data using ggplot2\nVector and raster data interactions\n\ncropping\nmasking\nvalue extraction\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-9-Spatial-Data/L02_raster_basics.html#tips-to-make-the-most-of-the-lecture-notes",
    "href": "lectures/Chapter-9-Spatial-Data/L02_raster_basics.html#tips-to-make-the-most-of-the-lecture-notes",
    "title": "09-2: R as GIS: Raster Data Basics",
    "section": "Tips to make the most of the lecture notes",
    "text": "Tips to make the most of the lecture notes\n\n\n\nInteractive navigation tools\n\nClick on the three horizontally stacked lines at the bottom left corner of the slide, then you will see table of contents, and you can jump to the section you want\nHit letter “o” on your keyboard and you will have a panel view of all the slides\n\n\nRunning and writing codes\n\nThe box area with a hint of blue as the background color is where you can write code (hereafter referred to as the “code area”).\nHit the “Run Code” button to execute all the code inside the code area.\nYou can evaluate (run) code selectively by highlighting the parts you want to run and hitting Command + Enter for Mac (Ctrl + Enter for Windows).\nIf you want to run the codes on your computer, you can first click on the icon with two sheets of paper stacked on top of each other (top right corner of the code chunk), which copies the code in the code area. You can then paste it onto your computer.\nYou can click on the reload button (top right corner of the code chunk, left to the copy button) to revert back to the original code."
  },
  {
    "objectID": "lectures/Chapter-9-Spatial-Data/L02_raster_basics.html#sec-basics",
    "href": "lectures/Chapter-9-Spatial-Data/L02_raster_basics.html#sec-basics",
    "title": "09-2: R as GIS: Raster Data Basics",
    "section": "The terra and raster packages: Basics",
    "text": "The terra and raster packages: Basics\n\nterra and rasterObject classSpatRasterQuick plottingMulti-layer SpatRasterRaster*\n\n\n\n\n\nThe most popular R packages to handle raster data is the raster and terra packages. They are authored by the same person and terra is the successor of raster.\nThe terra package is now mature and does everything faster than raster\nThere are lots of packages that still depends on raster and do not work well with R object class defined by terra.\nWe primarily learns how to use the terra package\n\n\n\n\n\n\n\n\nThe terra and raster packages use different R object class to represent raster data:\n\nterra\n\nSpatRaster\n\nraster (collectively referred to as Raster*)\n\nRasterLayer\nRasterStack\nRasterBrick\n\n\n\n\n\nNote\n\n\n\nWe will learn how to covert SpatRaster to Raster* and vice versa.\nThis is important as there are (and will be) packages that accepts only Raster*, especially the ones that are old.\n\n\n\n\n\n\n\n\nLet’s take a look at a SpatRaster object, reflec_blue.\nCheck the class first:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWhat is inside?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nHere are the explanations of the information provided:\n\nclass\ndimensions\n\nnrow: number of rows\nncol: number of columns\nnlyr: number of layers\n\nresolution:\n\nx: how long the top and bottom lines of the grid are\ny: how long the left and right lines of the grid are\n\nextent: bounding box (just like what you get with st_bbox(sf))\ncoord. ref.: CRS\n\nname: name of the attribute\n\n\n\nYou can use plot() to make a map quickly:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nIt automatically color the grids by the value of the attribute (blue).\n\n\nYou can simply use c() function to create a multi-layer SpatRaster just like you create a vector as long as all the layers have exactly the same dimensions, extent, and resolution.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNotice that nlyr is 3 now and you see three attribute names in names.\n\n\nplot() create maps for all the attributes.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nIntroductionConverting to Raster*Converting to SpatRaster\n\n\nThe raster package differentiates single-layer and multi-layer raster data.\n\nRasterLayer: single-layer\nRasterStack: multi-layer\nRasterBrick: multi-layer\n\n\n\nYou can convert a SpatRaster to a Raster* object using as(SpatRaster, \"Raster\").\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nSince, reflec_blue is a single-layer SpatRaster, it was converted into a RasterLayer.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nSince, reflec_all is a multi-layer SpatRaster, it was converted into a RasterBrick.\n\n\n\n\nNote\n\n\nYou can convert a RasterBrick to a RasterStack by applying stack() to the RasterBrick if you want. But, you do not need to.\n\n\n\n\n\nYou can convert an Raster* object to SpatRaster using terra::rast() function.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-9-Spatial-Data/L02_raster_basics.html#section",
    "href": "lectures/Chapter-9-Spatial-Data/L02_raster_basics.html#section",
    "title": "09-2: R as GIS: Raster Data Basics",
    "section": "",
    "text": "plot() create maps for all the attributes.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-9-Spatial-Data/L02_raster_basics.html#basic-operations",
    "href": "lectures/Chapter-9-Spatial-Data/L02_raster_basics.html#basic-operations",
    "title": "09-2: R as GIS: Raster Data Basics",
    "section": "Basic operations",
    "text": "Basic operations\n\nAccessing the metadataExtract cell informationSubset\n\n\n\nCRSdimensionsresolutionextent\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nThis is very useful. As we will see later, when interacting two spatial objects (e.g., extracting values from a raster data to sf) some functions require that the two spatial objects has the same CRS. You can use terra::crs() to get the CRS of the raster data and apply it to another spatial object.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nThis is like st_bbox() for sf.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\ncell valuescoordinates of the cell centers\n\n\nYou can access the cell values using [] just like a vector. Note that head() is there to avoid a very long vector presented on the console.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nYes, there are so many NAs in this raster data. Let’s look at the value of 10100th through 10200th cells:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\nNote\n\n\n\nWe use this function to check our arithmetic operations are successful.\nI have never had to use this function before in practice.\n\n\n\n\n\n\n\nYou can use terra::xyFromCell() to get the geographic coordinates of the cell centers.\n\nSyntax\n\nterra::xyFromCell(SpatRaster, cell)\n\n\n\ncell: cell numbers\n\n\nExample\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nYou can access specific layers using subset().\n\nSyntax\n\nsubset(SpatRaster, subset)\n\n\nsubset: layer names or corresponding integers\n\n\nExamples\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-9-Spatial-Data/L02_raster_basics.html#sec-io",
    "href": "lectures/Chapter-9-Spatial-Data/L02_raster_basics.html#sec-io",
    "title": "09-2: R as GIS: Raster Data Basics",
    "section": "Raster data input and output",
    "text": "Raster data input and output\n\nIntroductionRead with terraWrite with terra\n\n\n\n\nRaster data files can come in numerous different formats.\n\nThe most common format is GeoTiff (.tif as the file extension)\nPRPISM weather data comes in the Band Interleaved by Line (BIL) format\nSome of the Daymet data comes in netCDF format.\nOther popular formats include SAGA, ENVI, and many others.\n\nYou can read data of almost all the existing file formats with the terra package.\n\n\n\n\n\n\nHowLet’s try (.tif)Let’s try (.bil)Let’s try (.nc)\n\n\nYou can use terra::rast() to read raster data files.\n\nsingle raster data file\n\ndrone_blue_sr &lt;- terra::rast(path to the file)\n\n\nmultiple raster data files\n\ndrone_blue_sr &lt;- terra::rast(c(path to the file 1, path to the file 1, ...))\n\n\n\n\n\n\n\nInstruction\n\n\n\ndownload reflec_blue.tif, reflec_red.tif, and reflec_green.tif from this link.\nfind the path to the three files\n\n\n\n\n\n\nsingle file\nIt looks like this for me:\n\nreflec_blue &lt;- terra::rast(\"data-files-for-participants/reflec_blue.tif\")\n\n\nmultiple files\nIt looks like this for me:\n\nreflec_all &lt;- \n  terra::rast(\n    c(\n      \"data-files-for-participants/reflec_blue.tif\",\n      \"data-files-for-participants/reflec_red.tif\",\n      \"data-files-for-participants/reflec_green.tif\"\n    )\n  )\n\n\n\n\n\n\n\nInstruction\n\n\n\ndownload the folder named PRISM_ppt_stable_4kmD2_20120801_bil from this link.\nfind the path to the file named PRISM_ppt_stable_4kmD2_20120801_bil.bil, which is PRISM precipitation data observed on 08-01-2012.\n\n\n\n\n\n\nIt has a different file extension of .bil. Well it does no matter. Just use terra::rast() with path to the file inside it just like you did with the GeoTiff files.\n\nThis is what the code looks like for me:\n\nprism_precip &lt;- terra::rast(\"data-files-for-participants/PRISM_ppt_stable_4kmD2_20120801_bil/PRISM_ppt_stable_4kmD2_20120801_bil.bil\")\n\n\n\nMany weather data comes in the netCDF format with the file extension of .nc. (e.g., gridMET)\n\n\n\n\nInstruction\n\n\n\ndownload the file named gm_precip_2018.nc from this link.\nfind the path to the file\n\n\n\n\n\n\nLet’s read the data now. This is what the code looks like for me:\n\nprism_precip &lt;- terra::rast(\"data-files-for-participants/gm_precip_2018.nc\")\n\n\n\n\n\n\n\n\nHowLet’s try (.tif)Let’s try (.nc)\n\n\nYou can use terra::writeRaster() to write raster data to a data file.\n\nSyntax\n\nterra::writeRaster(SpatRaster, path to the file)\n\n\nExample (does not run)\n\nwriteRaster(reflec_blue, \"./data/reflec_blue.tif\", overwrite = TRUE) \n\n\nThis code saves reflec_blue (a SpatRaster object) as a GeoTiff file.\nwriteRaster() infers the correct format from the extension of the file name, which if .tif here.\nThe overwrite = TRUE option is necessary if a file with the same name already exists and you are overwriting it.\n\n\n\n\n\n\nNote\n\n\nNo distinction is necessary for single-layer and multi-layer SpatRaster objects.\n\n\n\n\n\n\nsingle-layer\nWrite reflec_blue on your computer. Mine looks like this:\n\nterra::writeRaster(reflec_blue, \"data/reflec_blue.tif\")\n\n\nThen read it back:\n\nreflec_blue_re_read &lt;- terra::rast(\"data/reflec_blue.tif\")\n\n\nConfirm that reflec_blue_re_read is the same as reflec_blue.\n\n\nmulti-layer\nWrite reflec_all on your computer. Mine looks like this:\n\nterra::writeRaster(reflec_all, \"data/reflec_all.tif\")\n\n\nThen read it back:\n\nreflec_all_re_read &lt;- terra::rast(\"data/reflec_all.tif\")\n\n\nConfirm that reflec_all_re_read is the same as reflec_all.\n\n\n\n\nWhile you can use terra::writeRaster() to write to a netCDF file, you will get a note saying that you should consider using terra::writeCDF().\nWrite reflec_all to a netCDF file. Mine looks like this.\n\n\n\n\n\n\nterra::writeCDF(reflec_all, \"data/reflec_all.nc\")"
  },
  {
    "objectID": "lectures/Chapter-9-Spatial-Data/L02_raster_basics.html#sec-operations",
    "href": "lectures/Chapter-9-Spatial-Data/L02_raster_basics.html#sec-operations",
    "title": "09-2: R as GIS: Raster Data Basics",
    "section": "Raster Data Operations",
    "text": "Raster Data Operations\n\nArithmetic operationsAggregateResampleMerge\n\n\n\nIntroductionExampleExercise 1Exercise 2\n\n\n\n\n\nYou can do basic arithmetic operations (addition, subtraction, division, etc) using raster layers as long as they share the same spatial extent and resolution\nYou can also apply a function like log() to transform the value of the cells\nRaster arithmetic operations are done element-by-element (cell-by-cell) just like vector arithmetic operations.\n\nFor example, when two RasterLayers are added, then the two values associated with the same cell are added and the resulting value becomes the new value for the cell in the newly created RasterLayer.\n\n\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nDid it work?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nYes, looks like it did. Look at different cells yourself. Note that the name of the attribute in reflec_b_plus_g inherited the name of the attribute in reflec_blue (first SpatRaster in the addition above).\n\n\nMultiply reflec_blue with reflec_red and add square root of reflec_green:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nLook at several cells to confirm that multiplication was successful.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAnswer:\n\n\nCode\nreflect_temp &lt;- reflec_blue * reflec_red + sqrt(reflec_green)\n\n#--- confirm if the calculations were done right ---#\nreflect_temp[10100] == reflec_blue[10100] * reflec_red[10100] + sqrt(reflec_green[10100])\n\n\n\n\nUsing NIR and RED, calculate NDVI and name it NDVI.\n\\(NDVI = (NIR-RED)/(NIR+RED)\\)\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nThen, plot it to see what it looks like.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAnswer:\n\n\nCode\nNDVI &lt;- (NIR - RED) / (NIR + RED)\n\n#--- confirm if the calculations were done right ---#\nplot(NDVI)\n\n\n\n\n\n\n\n\nMotivationHow and ExampleExercise\n\n\n\n\nSometimes, you want to make your raster data have a lower resolution. For example, satellite image is often very fine with spatial resolution of say 30cm. When trying to create a map using the data, it takes long time for R to render a plot and also the size of the figure can be very large.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nSyntax\n\naggregate(SpatRaster, fact)\n\n\nfact:\n\nExample\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nLet’s compare before and after. After aggregating by factor of 5, the map is visibly more coarse. Maybe this was too much.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nAggregate NIR by factor of 2.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nThen, check if its plot is acceptable or not.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAnswer:\n\n\nCode\nNIR_ag_2 &lt;- aggregate(NIR, fact = 2)\n\nplot(NIR_ag_2)\n\n\n\n\n\n\n\n\nMotivationWhat does it do really?HowExample\n\n\n\nYou have two raster layers that differ in any of the dimension and resolution.\nYou want to assign a value from one layer to each of the cells in the other layer so that you have consistent observation units for the variables from the two layers.\n\n\n\nFake precipitation data:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nFake soil data:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nMap below shows grids from precip (red border) and from soil (blue border).\nAs you can see, the grids from the two layers are not nicely aligned.\nSee the the top left grid with green fill color from the precip layer. Resampling will find a single value to the grid based on the value of the nearby grids from the soil layer.\nEven though the name “resample” sounds like it is a random process, there is no randomness.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nSyntax\n\nresample(sr_1, sr_2, method)\n\n\n\nst_1: SpatRaster to be resampled\nst_2: SpatRaster with the geometry that st_1 should be resampled to\nmethod: method of assigning values\n\n“near”: nearest neighbor (Default)\n“cubicspline”: cubic-spline interpolation\n“bilinear”: bi-linear interpolation\nothers (run ?terra::resample to see all the method options)\n\n\n\n\nSince we are resampling values from the soil layer to the grids of precip,\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\nTry yourself\n\n\n\nChange the method and see how the resampling results change.\nMany of the spatial datasets tend to exhibit a positive spatial correlation and the resampling outcomes are not as sensitive to method as you see here where cell values are completely independent.\n\n\n\n\n\n\n\n\n\n\n\nMotivationHowCaveat\n\n\nSometimes, you have two or more raster layers that have different spatial coverages. In such a case, you might want to merge them into a single raster layer.\nFor demonstration purpose, we will use two SpatRaster objects: prism_saunders and prism_douglas. They are PRISM maximum temperature observed on 08/01/2012 in the Saunders and Douglas counties in Nebraska, which are adjacent to each other.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nNote\n\n\nNote that this is different from combining multiple single-layer raster data of the same spatial extent and resolution into multi-layer raster data.\n\n\n\n\n\nYou can use the terra::merge() function to merge two raster datasets into one.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nYou can check the result of the merging below:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nNote\n\n\nRemember that raster object has to be perfectly rectangular. The result of merging will construct a rectangle that encompasses both prism_saunders and prism_douglas. All the cells that are not covered by prism_saunders and prism_douglas will be assigned NA.\n\n\n\n\n\nWhen merging two SpatRaster objects and when they have spatial overlaps, the value of the first SpatRaster object will be respected.\nLet’s run a little experiment. We will assign a high value to all the cells in prism_saunders. This will make this phenomenon easy to detect.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nprism_saunders first\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nprism_douglas first\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-9-Spatial-Data/L04_1_vector_interactions.html#before-you-start",
    "href": "lectures/Chapter-9-Spatial-Data/L04_1_vector_interactions.html#before-you-start",
    "title": "09-4-1: R as GIS: Interaction of Vector Datasets I",
    "section": "Before you start",
    "text": "Before you start\n\nLearning objectives\nThe objectives of this chapter is to learn spatial interactive operations that involves two sf objects. Specifically,\n\nunderstand topological relations\nsubsetting an sf object based on another sf object\n\n\n\n\nTable of contents\n\nTopological Relations\nSpatial Subsetting\n\n\nPre-requisite (Links)\n\nggplot2 primer\ndplyr primer\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-9-Spatial-Data/L04_1_vector_interactions.html#tips-to-make-the-most-of-the-lecture-notes",
    "href": "lectures/Chapter-9-Spatial-Data/L04_1_vector_interactions.html#tips-to-make-the-most-of-the-lecture-notes",
    "title": "09-4-1: R as GIS: Interaction of Vector Datasets I",
    "section": "Tips to make the most of the lecture notes",
    "text": "Tips to make the most of the lecture notes\n\n\n\nInteractive navigation tools\n\nClick on the three horizontally stacked lines at the bottom left corner of the slide, then you will see table of contents, and you can jump to the section you want\nHit letter “o” on your keyboard and you will have a panel view of all the slides\n\n\nRunning and writing codes\n\nThe box area with a hint of blue as the background color is where you can write code (hereafter referred to as the “code area”).\nHit the “Run Code” button to execute all the code inside the code area.\nYou can evaluate (run) code selectively by highlighting the parts you want to run and hitting Command + Enter for Mac (Ctrl + Enter for Windows).\nIf you want to run the codes on your computer, you can first click on the icon with two sheets of paper stacked on top of each other (top right corner of the code chunk), which copies the code in the code area. You can then paste it onto your computer.\nYou can click on the reload button (top right corner of the code chunk, left to the copy button) to revert back to the original code."
  },
  {
    "objectID": "lectures/Chapter-9-Spatial-Data/L04_1_vector_interactions.html#topological-relations",
    "href": "lectures/Chapter-9-Spatial-Data/L04_1_vector_interactions.html#topological-relations",
    "title": "09-4-1: R as GIS: Interaction of Vector Datasets I",
    "section": "Topological Relations",
    "text": "Topological Relations\n\nIntroductionst_intersects()st_is_within_distance()st_nearest_feature()Exercises\n\n\nDefinition\nTopological relations refer to the way multiple spatial objects are spatially related to one another.\n\nGoals\nYou can identify various types of spatial relations using the sf package\n\nOur main focus is on the intersections of spatial objects, which can be found using st_intersects().\nWe also briefly cover st_is_within_distance() and st_nearest_feature()\n\nYou can run ?geos_binary_pred to find all the topological relations you can use:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nData PreparationVisualized Datapoints and polygonslines and polygonspolygons and polygons\n\n\nWe use three sf objects: points, lines, and polygons. Inspect each of them.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nIf you are interested in codes to create them see below.\n\n\nCode\n#--- create points ---#\npoint_1 &lt;- sf::st_point(c(2, 2))\npoint_2 &lt;- sf::st_point(c(1, 1))\npoint_3 &lt;- sf::st_point(c(1, 3))\n\n#--- combine the points to make a single  sf of points ---#\npoints &lt;- list(point_1, point_2, point_3) %&gt;% \n  sf::st_sfc() %&gt;% \n  sf::st_as_sf() %&gt;% \n  mutate(point_name = c(\"point 1\", \"point 2\", \"point 3\"))\n\n#--- create lines ---#\nline_1 &lt;- sf::st_linestring(rbind(c(0, 0), c(2.5, 0.5)))\nline_2 &lt;- sf::st_linestring(rbind(c(1.5, 0.5), c(2.5, 2)))\n\n#--- combine the points to make a single  sf of points ---#\nlines &lt;- list(line_1, line_2) %&gt;% \n  sf::st_sfc() %&gt;% \n  sf::st_as_sf() %&gt;% \n  mutate(line_name = c(\"line 1\", \"line 2\"))\n\n#--- create polygons ---#\npolygon_1 &lt;- sf::st_polygon(list(\n  rbind(c(0, 0), c(2, 0), c(2, 2), c(0, 2), c(0, 0)) \n))\n\npolygon_2 &lt;- sf::st_polygon(list(\n  rbind(c(0.5, 1.5), c(0.5, 3.5), c(2.5, 3.5), c(2.5, 1.5), c(0.5, 1.5)) \n))\n\npolygon_3 &lt;- sf::st_polygon(list(\n  rbind(c(0.5, 2.5), c(0.5, 3.2), c(2.3, 3.2), c(2, 2), c(0.5, 2.5)) \n))\n\n#--- combine the polygons to make an sf of polygons ---#\npolygons &lt;- list(polygon_1, polygon_2, polygon_3) %&gt;% \n  sf::st_sfc() %&gt;% \n  sf::st_as_sf() %&gt;% \n  mutate(polygon_name = c(\"polygon 1\", \"polygon 2\", \"polygon 3\"))\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nst_intersects() checks which of sfgs in an sf geographically intersect with which of sfgs in another sf.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nThe output is a list of which polygon(s) each of the points intersect with.\nThe numbers 1, 2, and 3 in the first row mean that 1st (polygon 1), 2nd (polygon 2), and 3rd (polygon 3) objects of the polygons intersect with the first point (point 1) of the points object.\nThe fact that point 1 is considered to be intersecting with polygon 2 means that the area inside the border is considered a part of the polygon (of course).\n\n\nIf you would like the results of st_intersects() in a matrix form with boolean values filling the matrix, you can add sparse = FALSE option.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nThe output is a list of which polygon(s) each of the lines intersect with.\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nFor polygons vs polygons interaction, st_intersects() identifies any polygons that either touches (even at a point like polygons 1 and 3) or share some area.\n\n\n\n\n\n\n\nSyntaxData PreparationExpected OutcomesApply the function\n\n\nsf::st_is_within_distance() function identifies whether any of sfgs in sf_2 is within the specified distance from each of the sfgs in sf_1.\n\nst_is_within_distance(sf_1, sf_2)\n\n\n\nCreate two sets of points and then inspect each of them.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nHere is the visualization of the two sets of points we just created.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nWe want to know which of the blue points (points_set_2) are located within 0.2 from each of the red points (points_set_1).\nThe following figure gives us the answer visually.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nConfirm that your visual inspection results are consistent with the outcome of the following code using st_nearest_feature() function.\n\n\n\n\n\n\n\nSyntaxExample\n\n\nsf::st_nearest_feature() identifies which sfgs in sf_2 is closest in distance to each of sf_1.\n\nst_nearest_feature(sf_1, sf_2)\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nConfirm that your visual inspection results are consistent with the outcome of the above code using st_is_within_distance() function.\n\n\n\n\n\n\n\nData Preparationst_intersects()\n\n\nRun the following codes to get mower_sensor and fairway_grid data.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nVisualize the datasets.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nUse sf::st_intersects() to find out which of the points in mower_sensor_sf are inside of any of the polygons in fairway_grid.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nSince there are so many points in mower_sensor_sf, you won’t really see which ones are inside of any of the polygons in fairway_grid.\nThat is okay for now. We will later learn how to filter sf objects spatially.\n\nAnswer codes\n\n\nCode\nst_intersects(mower_sensor_sf, fairway_grid)"
  },
  {
    "objectID": "lectures/Chapter-9-Spatial-Data/L04_1_vector_interactions.html#spatial-subsetting",
    "href": "lectures/Chapter-9-Spatial-Data/L04_1_vector_interactions.html#spatial-subsetting",
    "title": "09-4-1: R as GIS: Interaction of Vector Datasets I",
    "section": "Spatial Subsetting",
    "text": "Spatial Subsetting\n\nIntroductionData preparationpolygons vs polygonspoints vs polygonslines vs polygons\n\n\n\n\nSpatial subsetting refers to operations that narrow down the geographic scope of a spatial object based on another spatial object.\n\n\n\n\n\n\n\nHere are the datasets we will use here. Inspect them to familiarize yourself with the datasets.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nGoalHowDemonstrationCreate a flag variableOther topological relations\n\n\nSelect only the counties that intersect with the HPA boundary.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nWhen subsetting a data.frame by specifying the row numbers you would like to select, you can do\n\n#--- NOT RUN ---#\ndata.frame[vector of row numbers, ]\n\n\nSpatial subsetting of sf objects works in a similar syntax:\n\n#--- NOT RUN ---#\nsf_1[sf_2, ]\n\n\nwhere you are subsetting sf_1 based on sf_2. Instead of row numbers, you provide another sf object in place.\n\n\nThe following code spatially subsets Nebraska counties based on the HPA boundary.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nYou can see that only the counties that intersect with the HPA boundary remained.\nThis is because when you use the above syntax of sf_1[sf_2, ], the default underlying topological relation is st_intersects().\nSo, if an object in sf_1 intersects with any of the objects in sf_2 even slightly, then it will remain after subsetting.\n\n\n\n\nSometimes, you just want to flag whether two spatial objects intersect or not, instead of dropping non-overlapping observations like we saw with sf_1[sf_2, ] syntax. In that case, you can get a list of the IDs and then assign 1 (or TRUE) if in the list, 0 (or FALSE) otherwise.\n\n\nGet the list of countyfp (ID) of the intersected counties:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAssign 1 or 0 to a new variable called in_hpa based on the list.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nYou can specify the topological relation as in\n\n#--- NOT RUN ---#\nsf_1[sf_2, , op = topological_relation_type] \n\n\nFor example, if you only want counties that are completely within the HPA boundary, you can do the following:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nCheck visually:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\nGoalDemonstrationFlagging\n\n\nSelect only the wells that intersect with (or equivalently inside) the HPA boundary.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nWe can select only the wells that reside within the HPA boundary using the same syntax as the polygon-polygon example.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAs you can see in the figure below, only the wells that are intersects the HPA remained because the default topological relation is st_intersects() (here, you will get the same results even if you use op = st_within.).\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nGet the list of wellid (ID) of the intersected wells:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAssign 1 or 0 to a new variable called in_hpa based on the list.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nGoalDemonstrationFlagging\n\n\nSelect only railroads that intersect with the Lancaster county in Nebraska.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nJust like we did in the two previous examples:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nSuccessful?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nGet the list of LINEARID (ID) of the intersected railroads:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAssign 1 or 0 to a new variable called in_hpa based on the list.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-9-Spatial-Data/L04_1_vector_interactions.html#spatial-cropping",
    "href": "lectures/Chapter-9-Spatial-Data/L04_1_vector_interactions.html#spatial-cropping",
    "title": "09-4-1: R as GIS: Interaction of Vector Datasets I",
    "section": "Spatial Cropping",
    "text": "Spatial Cropping\n\nGoalBounding boxCropCropping vs Subset\n\n\n\n\n\nWe can use st_crop() to crop spatial objects to a spatial bounding box (extent) of a spatial object.\nThe bounding box of an sf is a rectangle represented by the minimum and maximum of x and y that encompass/contain all the spatial objects in the sf.\nYou can use st_bbox() to find the bounding box of an sf object.\n\n\n\n\n\n\n\n\n\n\nLet’s get the bounding box of the High-Plains aquifer using st_bbox().\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nCheck its class:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nYou can convert a bbox to sfc by applying st_as_sfc() to the bbox object (you cannot use a bbox for mapping and other interactive spatial operations).\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nThe bounding box looks like this (red rectangle):\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n`\n\n\n\n\nNow, let’s crop Nebraska counties to the bounding box of the High-Plains aquifer boundary.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nNote that, you do not need to do the following (they would produce the same outcome):\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\nNote that st_crop() will chop off the parts that are not intersecting.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-9-Spatial-Data/L05_vector_raster_interaction.html#before-you-start",
    "href": "lectures/Chapter-9-Spatial-Data/L05_vector_raster_interaction.html#before-you-start",
    "title": "09-5: R as GIS: Interaction of Vector and Raster Datasets",
    "section": "Before you start",
    "text": "Before you start\n\nLearning objectives\nLearn the spatial interactions of a vector and raster dataset. Specifically,\n\nCrop (spatially subset) a raster dataset based on the geographic extent of a vector dataset.\nExtract values from raster data for points and polygons.\n\n\n\n\nTable of contents\n\nCropping raster datasets\nExtract values from raster datasets\nBasic speed comparison\n\n\nPre-requisite (Links)\n\nggplot2 primer\ndplyr primer\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/Chapter-9-Spatial-Data/L05_vector_raster_interaction.html#tips-to-make-the-most-of-the-lecture-notes",
    "href": "lectures/Chapter-9-Spatial-Data/L05_vector_raster_interaction.html#tips-to-make-the-most-of-the-lecture-notes",
    "title": "09-5: R as GIS: Interaction of Vector and Raster Datasets",
    "section": "Tips to make the most of the lecture notes",
    "text": "Tips to make the most of the lecture notes\n\n\n\nInteractive navigation tools\n\nClick on the three horizontally stacked lines at the bottom left corner of the slide, then you will see table of contents, and you can jump to the section you want\nHit letter “o” on your keyboard and you will have a panel view of all the slides\n\n\nRunning and writing codes\n\nThe box area with a hint of blue as the background color is where you can write code (hereafter referred to as the “code area”).\nHit the “Run Code” button to execute all the code inside the code area.\nYou can evaluate (run) code selectively by highlighting the parts you want to run and hitting Command + Enter for Mac (Ctrl + Enter for Windows).\nIf you want to run the codes on your computer, you can first click on the icon with two sheets of paper stacked on top of each other (top right corner of the code chunk), which copies the code in the code area. You can then paste it onto your computer.\nYou can click on the reload button (top right corner of the code chunk, left to the copy button) to revert back to the original code."
  },
  {
    "objectID": "lectures/Chapter-9-Spatial-Data/L05_vector_raster_interaction.html#cropping-and-masking-raster-data",
    "href": "lectures/Chapter-9-Spatial-Data/L05_vector_raster_interaction.html#cropping-and-masking-raster-data",
    "title": "09-5: R as GIS: Interaction of Vector and Raster Datasets",
    "section": "Cropping and masking raster data",
    "text": "Cropping and masking raster data\n\nStory and DataObjectivesCropMaskExercise\n\n\n\nYou have run on-farm nitrogen randomized experiment on a field to quantify the impact of nitrogen on corn yield.\nYou have three datasets\n\ncorn_yield: sf of corn yield (bu/acre) observations data represented by points\ntreatment_blocks: sf of treatment blocks represented by polygons\nNDRE: SpatRaster of NDRE (roughly put, an indicator of how green the field is) taken by a drone\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nHere is what they look like on a map:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nObjective 1\n Crop  the NDRE raster data (NDRE) to the bounding box of corn_yield\n\nWe can create a map that is more focused on the area of interest rather than the entire field\nWe can stop carrying around the unnecessary parts of the data, which would educe its size (This matters when your raster data is spatially very fine and large.)\nExtracting value to an sf from a smaller raster data is faster (we will talk about this later in this section)\n\n\nObjective 2\n Mask  the NDRE data to treatment_blocks (assign NA to all the cells that are not intersecting with corn_yield)\n\nWe can create a map without any unnecessary cells presented\n\n\n\n\n\n\n\n\n\nHowDemonstration\n\n\nYou can crop a raster layer by using terra::crop().\n\nSyntax\n\nterra::crop(SpatRaster, sf)\n\n\nThe resulting SpatRaster object is the original cropped to the  bounding box  of the sf object.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nIf you run the code above, then you should see an error. This happened because they do not share the same CRS.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\nImportant!\n\n\n\nProjecting (or re-projecting to a different CRS) a raster dataset is typically a bad idea as it is irreversible.\nRe-project the vector data to the CRS of the raster data.\n\n\n\n\n\n\nLet’s change the CRS of corn_yield to that of NDRE and then try to crop again.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nLet’s check visually.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\nHowDemonstration\n\n\nSyntax\n\nterra::mask(SpatRaster, sf)\n\n\nThe resulting SpatRaster object will have NA assigned to all the cells that are  not intersecting  with any of the geometries in the sf object.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nLet’s check visually.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\nNote\n\n\n\nadding na.value = \"transparent\" in scale_fill_*() will make the cells with NA value transparent (cannot be seen).\nremove na.value = \"transparent\" and run the code again, you will that cells with NA are grey.\n\n\n\n\n\n\n\n\n\n\n\n\nDataExercise 1Exercise 2\n\n\nWe use\n\nprism_us: a coarser version of PRISM precipitation data on 08/01/2012 covering the entire contiguous U.S. (SpatRaster)\nne_counties: counties in Nebraska (sf)\n\nHere is what they look like:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nCreate the map you saw in the previous tab.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAnswer\n\n\nCode\nggplot() +\n  geom_spatraster(data = prism_us) +\n  geom_sf(data = ne_counties, color = \"orange\") +\n  theme_void()\n\n\n\n\nCrop and then mask prism_us using ne_counties.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nCreate a map using the cropped- and masked-prism_us and ne_counties.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAnswer\n\n\nCode\nprism_us_cropped_masked &lt;- \n  prism_us %&gt;%\n  terra::crop(ne_counties) %&gt;%\n  terra::maske(ne_counties)\n \nggplot() +\n  geom_spatraster(data = prism_us_cropped_masked) +\n  geom_sf(data = ne_counties, color = \"orange\") +\n  theme_void()"
  },
  {
    "objectID": "lectures/Chapter-9-Spatial-Data/L05_vector_raster_interaction.html#sec-extract",
    "href": "lectures/Chapter-9-Spatial-Data/L05_vector_raster_interaction.html#sec-extract",
    "title": "09-5: R as GIS: Interaction of Vector and Raster Datasets",
    "section": "Extract values from raster layers to a vector data",
    "text": "Extract values from raster layers to a vector data\n\nWhat is it?StoryHow (to points)How (to polygons)Exercises\n\n\n\nto pointsto polygons\n\n\nDefinition\nFor each of the points, find which raster cell it is located within, and assign the value of the cell to the point.\n\nExample\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe numbers inside the cells are the values that the cells hold.\nAfter the extraction,\n\nPoint 1 will be assigned \\(50\\)\nPoint 2 will be assigned \\(4\\)\nPoint 3 will be assigned \\(54\\).\n\n\n\n\n\n\n\nDefinition\nFor each of the polygons, identify all the raster cells that intersect with the polygon, and assign a vector of the cell values to the polygon.\n\nExample\n\n\n\n\n\n\n\n\n\n\n\n\n\nFind all the raster cells each of the polygons “intersect with”\nAssign the value of all the intersecting cells to the polygon (n-to-1).\n\n\n\n\n\n\n\n\n\n\n\n\n\nRight now, corn yields (corn_yield), NDRE (NDRE), and treatment blocks (treatment_blocks) are separate R objects.\nWe would like to conduct two kinds of analysis\n\nanalysis based on data where yield points are the unit of observations\nanalysis based on data where treatment blocks are the unit of observations\n\nTo achieve this, we would like to join them based on their locations\n\nextract values from ‘NDRE’ to corn_yield\nextract values from ‘NDRE’ to treatment_blocks\n\n\n\n\n\n\n\n\n\n\nHowDemonstrationpost-extraction processingMultiple layers\n\n\nYou can use terra::extract() with the following syntax.\nSyntax\n\nterra::extract(SpatRaster, sf of points)\n\n\n\nExtract NDRE values to each of the yield points:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nOops, we did it again.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nImporatant\n\n\n\nID variable represents the row number in the sf (here, corn_yield). For example, ID == 3 in NDRE_extracted is for corn_yield[3, ].\nThis becomes more important when we we do extraction for polygons\n\n\n\n\n\n\n\n\nJust extracting the raster values to the points is not where we stop.\nWe need to merge the extracted values back to the points data so that we can use them for further analysis.\n\n\nLet’s first check the class of NDRE_extracted.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nThe nth row in NDRE_extracted is for the nth point in yield.\nSo, you can simply do this:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nYou can extract values from multiple layers at the same time using terra::extract() just like you did with a single-layer raster data.\nFor demonstration, let’s create a multi-layer raster data:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nThe resulting object is a data.frame and the values from first (second) layer is the second (third) column.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\nHowDemonstrationPost-extraction processingExtract and summarizeArea-weighted summarizationMultiple layers\n\n\nYou can use terra::extract() with the following syntax. Yes, same as value extraction to points.\nSyntax\n\nterra::extract(SpatRaster, sf of polygons)\n\n\n\nExtract NDRE values to each of the treatment blocks:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nIt’s a data.frame.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAs you can see below, there are more than one NDRE values for each of the treatment blocks, which is expected as there are many grid cells that are inside of them.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nLet’s check the class of NDRE_extracted_tb.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWe just want to one NDRE value for each of the treatment blocks. So, let’s summarize them. In doing so, we summarize by ID as it indicates the row number of treatment_blocks. Here, we are getting the average.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nNow, we can assign the average NDRE values to treatment_blocks like below because ID == n is for nth row of treatment_blocks.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nYou can actually extract and summarize both in terra::extract() using the fun option.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\nIn the previous cases of extraction and summarization tasks, all the intersecting cells are given the same weight irrespective of the degree of spatial overlap.\nThis is very much acceptable in the current application, because the resolution of the raster data is high (cells are so small) relative to the size of the polygons.\nHowever, if the cells are relatively large, you might want to consider calculating area-weighted summary.\n\n\n\nWe can add exact = TRUE option, which returns fraction variable indicating the fraction of the cells intersecting with the polygon.\n\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nJust like the case with value extraction to points, we can extract values from multiple layers to polygons in a single call with terra::extract().\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nLet’s get the weighted average for both variables:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "lectures/index.html",
    "href": "lectures/index.html",
    "title": "Lecture Slides",
    "section": "",
    "text": "Title\n\n\n\nTopic\n\n\n\n\n\n\n\n\n01-1: Introduction to R\n\n\nChapter 1: R Introduction\n\n\n\n\n\n\n02-0: Clone Github Repositories\n\n\nChapter 2: Github\n\n\n\n\n\n\n02-1: Introduction to Quarto\n\n\nChapter 2: Quarto\n\n\n\n\n\n\n02-2: Using Quarto to Create Presentations\n\n\nChapter 2: Quarto\n\n\n\n\n\n\n03-1: Importing Files and Exporting to Files\n\n\nChapter 3: Data Wrangling\n\n\n\n\n\n\n03-2: Data wrangling with tidyverse: The Basics\n\n\nChapter 3: Data Wrangling\n\n\n\n\n\n\n03-3: Reshaping and Merging\n\n\nChapter 3: Data Wrangling\n\n\n\n\n\n\n04-1: Data Visualization with ggplot2: Basics\n\n\nChapter 4: Data Visualization\n\n\n\n\n\n\n04-2: Data visualization with ggplot2: More in One\n\n\nChapter 4: Data Visualization\n\n\n\n\n\n\n04-3: Data visualization with ggplot2: Fine Tuning\n\n\nChapter 4: Data Visualization\n\n\n\n\n\n\n05-1: User-defined Function, Loop, and Parallelization\n\n\nChapter 5: Function and Loop\n\n\n\n\n\n\n06-1: How to write R codes, manage Projects, work with RStudio\n\n\nChapter 6: Reproducibility\n\n\n\n\n\n\n07-1: Date and String Management\n\n\nChapter 7: Date and String\n\n\n\n\n\n\n08-1: Making Tables with flextable\n\n\nChapter 8: Make Tables\n\n\n\n\n\n\n08-2: Make Regression and Summary Tables with modelsummary\n\n\nChapter 8: Make Tables\n\n\n\n\n\n\n09-1: R as GIS: Vector Data Basics with the sf package\n\n\nChapter 9: Spatial Data\n\n\n\n\n\n\n09-2: R as GIS: Raster Data Basics\n\n\nChapter 9: Spatial Data\n\n\n\n\n\n\n09-3: R as GIS: Creating maps from vector data\n\n\nChapter 9: Spatial Data\n\n\n\n\n\n\n09-4-1: R as GIS: Interaction of Vector Datasets I\n\n\nChapter 9: Spatial Data\n\n\n\n\n\n\n09-4-2: R as GIS: Interaction of Vector Datasets II\n\n\nChapter 9: Spatial Data\n\n\n\n\n\n\n09-5: R as GIS: Interaction of Vector and Raster Datasets\n\n\nChapter 9: Spatial Data\n\n\n\n\n\n\n09-6: R as GIS: Download Spatial Datasets using R\n\n\nChapter 9: Spatial Data\n\n\n\n\n\n\nNo matching items"
  }
]