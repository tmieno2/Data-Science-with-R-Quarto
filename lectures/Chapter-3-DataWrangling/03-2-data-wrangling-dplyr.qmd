---
title: "03-1-Data wrangling with `tidyverse`: The Basics"
format: 
  revealjs: 
    theme: [default, ../custom.scss]
    fontsize: 1.6em
    callout-icon: false
    scrollable: true
    echo: true
    fig-dpi: 400
webr:
  packages: ['fixest', 'dplyr', 'ggplot2']
  cell-options:
    editor-font-scale: 0.8
    message: false
    warning: false
    out-width: 100%
filters:
  - webr
---

```{r}
#| include: false 
library(dplyr) 
library(readr) 
```


# Data manipulation using the `dplyr` package

<html><div style='float:left'></div><hr color='#EB811B' size=1px width=796px></html>

## Essential verbs

+ `filter()`
+ `mutate()`
+ `select()`
+ `rename()`
+ `arrange()`
+ `relocate()`

## Before we start

For illustrations, we will use `flights_mini` that we create below:

```{r }
library(nycflights13)

(
flights_mini <- distinct(flights,month,day,.keep_all=TRUE) %>% 
  filter(day %in% c(1,2)) %>% 
  arrange(month)
)

```

## `filter()`: row-wise subset

::: {.panel-tabset} 

### Instruction

<br>

`filter()`: subset data row-wise using logical conditions based on variables  
 

```{r eval = F}
#--- syntax ---# 
filter(dataset, condition 1, ..., condition K)
```

### Single condition

::: {.panel-tabset}
#### equal to

Observations where `month` is 4:

```{r }
filter(flights_mini, month == 4) 
```

#### not equal to

Observations where `month` is NOT 4:

```{r }
filter(flights_mini, month != 4) 
```

#### inequality

Observations where `month` is less than 4:

```{r }
filter(flights_mini, month < 4) 
```
:::
<!--end of panel-->

### `filter()`: multiple conditions

::: {.panel-tabset}

#### and (&)

```{r }
filter(flights_mini, month >= 9 & month <= 11) 

#--- alternatively ---#
# filter(flights_mini, month >= 9, month <= 11)
```

#### or (|)

```{r }
filter(flights_mini, month >= 11 | month <= 1) 
```

#### in any of (`%in%`)

```{r }
filter(flights_mini, month %in% c(1, 2, 3)) 

#--- equivalently ---#
# filter(flights_mini, month == 1 | month == 2 | month == 2) 
```

This is very useful when you have many values to check.  
:::

### Important

Notice that the original data `flights_mini` was not affected by the `filter()` operations in the previous slides.

This is consistent across all the verbs in `dplyr`. Whatever actions you take, the original data is unaltered.

--

To use the transformed data for later use, you need to assign it to a new object (or overwrite if that is okay):

```{r }
flights_mini_filtered <- filter(flights_mini, month == 4) 

flights_mini_filtered
```

### Exercises

::: {.panel-tabset} 

#### Exercise 1

<br>

Find the observations in June and July

```{webr-r}

```

Here is the output you should get: 

```{r echo = F}
filter(flights_mini, month %in% c(6, 7))  
```

#### Exercise 2

<br>

Find the observations in January, April, July, September, and December

```{webr-r}

```

Here is the output you should get: 

```{r echo = F}
filter(flights_mini, month %in% c(1, 4, 6, 9, 12))  
```

#### Exercise 3

<br>

Find the observations by carrier "US"

```{webr-r}

```

Here is the output you should get: 

```{r echo = F}
filter(flights_mini, carrier == "US")  
```

:::

:::

## `select()`: column-wise subset

::: {.panel-tabset} 

### Instruction

You can select a subset of variables using `select()`. 

```{r eval = F}
select(dataset, variable 1, variable 2, ...)
```

If you would like to drop some variables, but want to keep all the other variables, you can take advantage of  `−` operator:

```{r eval = F}
select(dataset, - variable 1, - variable 2, ...)
```

### Examples 

::: {.panel-tabset}
#### Example 1

```{r }
select(flights_mini, arr_delay)
```

#### Example 2

```{r }
select(flights_mini, month, arr_delay, dep_delay)
```

#### Example 3

```{r }
select(flights_mini, - year, - month)  
```

:::

### Exercises

::: {.panel-tabset} 

#### Exercise 1

Select all the columns except `arr_delay`.

```{webr-r}

```

Here is the output you should get: 

```{r echo = F}
select(flights_mini, - arr_delay)  
```

#### Exercise 2

Select `arr_delay` and `month`.

```{webr-r}

```

Here is the output you should get: 

```{r echo = F}
select(flights_mini, month, arr_delay)  
```

:::
:::
<!--end of panel-->


## `relocate()`: change the column order


You can use `relocate()` to change the column order. 

```{r }
relocate(flights_mini, dep_time, dep_delay)
```

Chosen variables come front with the order of the rest of the variable unchanged.

# Piping with `%>%`

<html><div style='float:left'></div><hr color='#EB811B' size=1px width=796px></html>

## Piping with `%>%`

::: {.panel-tabset} 

### The Basic

Let `f()` be a function and `x` is an R object that `f()` accepts. Then, 

`x %>% f()` is the same as `f(x)`

**Example**

Try the following codes and confirm they return the same results:

```{r eval = F}
#--- not piped ---#
mean(seq(1, 99, by = 2))  

#--- piped ---#
seq(1, 99, by = 2) %>% mean()   
```

### More generally

Suppose you have more than one arguments to the function like this:

```{r eval = F}
f(x1, x2, option 1, option 2)
```

Then,

```{r eval = F}
z %>% f(x2, option 1, option 2) 
```

is equivalent to

```{r eval = F}
f(z, x2, option 1, option 2) 
```

That is, in general, an R object that precedes the piping operator (`%>%`) becomes the <span style="color:red"> first </span> argument of the function that comes after the piping operator.

### .

What if the object before the piping operator is not the first argument of the subsequent function? 


```{r }
a_string <- "I do not like space"

gsub(" ", "", a_string)
```

This does not work:

```{r eval = F}
a_string %>%  gsub(" ", "") 
```

because the above is equivalent to 

```{r eval = F}
a_string <- gsub(a_string, " ", "") 
```

You can refer to the preceding object by `.` like this:

```{r }
a_string %>% gsub(" ", "", .)  
```

### Chaining

You can keep piping like this:  

```{r pipe-illustrate, eval = F}
flights_mini %>% 
  select(year, month, dep_time) %>% 
  relocate(dep_time) %>% 
  filter(month <= 3)
```

<span style="color:red"> Important: </span> The object created by all the codes preceding the piping operator is passed down to the function after the piping operator. 

For example, `relocate(dep_time)` receives as its first argument the outcome of the evaluation of the highlighted parts of the code below.



### Why piping with `%>%`

::: {.panel-tabset} 

#### Problem

<br>

Consider the following sequence of actions:

```{r }
a1 <- filter(flights_mini, month <= 3)

a2 <- select(a1, year, month, dep_time)

a3 <- relocate(a2, dep_time)
```

<br>

+ Notice that you generated two intermediate datasets (`a1` and `a2`) to obtain the dataset you wanted (`a3`). 

+ These intermediate objects are generated only for the purpose of generating the final dataset.

+ It is easy to imagine that you will soon have lots of unnecessary intermediate objects on R.

#### Alternative 1

<br>

Alternatively, you can do the following:

```{r }
a3 <- relocate(
  select(
    filter(flights_mini, month <= 3)
    , year, month, dep_time
  ), 
  dep_time
)
```

<br>

+ This does not create any intermediate objects unlike the first example. 

+ However, it is hard to understand the code partly because the order of actions is the reverse of the order of the corresponding functions you see as you read the code from left to right.

#### Alternative 2 (with piping)

<br>

Taking advantage of the piping operator, 

```{r eval = F}
a3 <- flights_mini %>% 
  filter(month <= 3) %>% 
  select(year, month, dep_time) %>% 
  relocate(dep_time)
```

:::

:::


## `mutate()`: define new (or update) variables

::: {.panel-tabset} 

### What

You can use `mutate()` to create a new variable (or overwrite the existing one) in the dataset:

**Synatax** 

```{r eval = F}
mutate(data, new variable name = expression)
```

**Example** 

```{r }
mutate(flights_mini, gain = arr_delay - dep_delay) %>% 
  filter(month <= 2) %>% 
  relocate(gain)
```

### multiple variables

You can define multiple variables within a single `mutate()` function.  

You can create a new variable based on the variables that have been just created within the same `mutate()` function.

**Examples** 

```{r m-mult, echo = F, eval = F}
flights_mini %>% mutate(
    gain = arr_delay-dep_delay,
    gain_per_hour = gain / (air_time / 60)
  ) %>% 
  filter(month <= 2) %>% 
  relocate(gain, gain_per_hour)
```

```{r ref.label = "m-mult", echo = F}
  
```

### function

You can apply functions to variables when creating new variables:

**Example** 

```{r ex-func, echo = F, eval = F}
flights_mini %>% 
  mutate(avg_arr_delay = mean(arr_delay, na.rm = TRUE)) %>% 
  filter(month <= 1) %>% 
  relocate(avg_arr_delay)
```


```{r echo = F}
flights_mini %>% 
  mutate(avg_arr_delay = mean(arr_delay, na.rm = TRUE)) %>% 
  filter(month <= 1) %>% 
  relocate(avg_arr_delay)
```

Note: the function you apply has to accept a vector (a variable column).

### More on `mutate()`

::: {.panel-tabset} 

#### selective mutation

Sometimes, you want to to alter the values of a variable for specific rows that satisfy certain conditions.

**Example**:
Suppose you found out that `dep_time` for all the flights from `JFK` was misreported so that `dep_time` is 10 minutes earlier than the true departure times. 

So, we would like to add 10 minutes to all the flights by `JFK`.

You can use `ifelse()` like this:

```{r }
flights_mini %>% 
  mutate(
    dep_time_correct = ifelse(origin == "JFK", dep_time + 10, dep_time) #<<
  ) %>% 
  relocate(origin, dep_time, dep_time_correct) %>% arrange(origin) 
```

#### dichotomous

Suppose you want to label flights with `arr_delay > 0` to be `time-loss` and `time-gain` otherwise:

You can use `ifelse()` for defining a dichotomous variable like this:

```{r }
flights_mini %>% 
  mutate(
    loss_or_gain = ifelse(arr_delay > 0, "time-loss", "time-gain") #<<
  ) %>% 
  relocate(arr_delay, loss_or_gain)
```

#### More than two cases

The `case_when()` function is useful if you have more than two cases.

**Syntax**:

```{r eval = F}
case_when(
  condition 1 ~ value to assign,
  condition 2 ~ value to assign,
  condition 3 ~ value to assign,
  ...
)  
```

**Example**:

```{r }
flights_mini %>% 
  mutate(origin = case_when(
    origin == "JFK" ~ "John F. Kennedy",
    origin == "EWR" ~ "Newark Liberty International", 
    origin == "LGA" ~ "LaGuardia" 
    )
  ) %>% relocate(origin)
```

:::
<!-- panel ends here -->

### Exercises

::: {.panel-tabset} 

#### Exercise 1

Find the mean value of `arr_delay` in April and May (combined) and define it as a new variable named `avg_arr_delay`

#### Exercise 2

Find the sum of `dep_delay` in January, February, and December (combined) and define it as a new variable named `sum_arr_delay`, and then move the variable to the first column of the dataset.

:::

:::
<!-- panel ends here -->


# `rename()`: rename variables

::: {.panel-tabset} 

### How

**Syntax** 

```{r eval = F}
rename(data, new variable name = old variable name, ...)
```

**Example** 

```{r }
rename(flights_mini, 
  departure_delay = dep_delay,
  departure_time = dep_time
) %>% head()
```

### White space

Let’s create a dataset with variables that have a white space in their names:

```{r }
df <- tibble(
  'County ID' = c(1,2,3),
  'County Name' = c('Dundy','Chase','Perkins')
) 
```

When you have a white space in a variable name, and refer to the variable in a function, it would not work most of the time . For example,

```{r eval = F}
filter(df, County ID == 1)
```

You could actually enclose the variable name with a white space with back ticks like this:

```{r }
filter(df, `County ID` == 1)
```

But, you do not want do this.

Rename it:

```{r eval = F}
rename(df, county_id = `County ID`)  
```

:::

# `arrange()`: ordering rows

::: {.panel-tabset} 

### What

You can use `arrange()` to reorder rows based on the value of variables.

### How

**Syntax** 

```{r eval = F}
#--- Syntax (NOT RUN) ---#
arrange(flights_mini, variable name)
```

**Example** 

```{r }
arrange(flights_mini, dep_delay) %>% head()
```

As you can see, the default is the ascending order. 

### Descending

To arrange in the descending order, you use `desc()` function:

```{r arrange-desc, echo = F, eval = F}
arrange(flights_mini, desc(dep_delay))
```

:::

# `distinct()`: extract rows with unique values

::: {.panel-tabset} 

### What

`distinct()` extract rows with unique values.

### Example

+ (left): `flights_mini` has two observations per month (left). 
+ (right): Only one observation per month (12 unique values) after applying `distinct()` 

::: {.columns}

::: {.column width="50%"}
```{r }
flights_mini
```
:::
<!--end of the 1st column-->
::: {.column width="50%"}
```{r }
distinct(flights_mini, month)
```
:::
<!--end of the 2nd column-->
:::
<!--end of the columns-->

### .keep_all

You do not want to lose the other variables? Add `.keep_all = TRUE`

```{r }
distinct(flights_mini, month, .keep_all = TRUE)
```

:::

## Grouped Operations {#sec-group-operation}

::: {.panel-tabset}

### Motivation

Group-wise operations, such as the mean of arrival delay by carrier are very useful to gain an insight into differences across groups. 

The `group_by()` function in conjunction with `summarize()` function does exactly that.

<br>

**Syntax**

```{r eval = F}
#--- group by variables ---#
group_by(dataset, variable to group by, variable to group by, ...)  

#--- summarize ---#
summarize(grouped dataset, expression)  
```

### How

::: {.panel-tabset}


#### Step 1: grouping
 
You first use `group_by()` to set the group for a dataset:

```{webr-r}
flights_carrier <- dplyr::group_by(flights_slim, carrier)  

flights_carrier
```

There are no apparent differences in `flights_carrier` from `flights_slim`. The only thing you did by `group_by()` was to tell R that whatever we will do to the new dataset is going to be done by group, which is reflected in "Groups" of the printed data.

#### Step 2: summarizing
 
Once the group is set, we are ready to do some group-wise (by carrier) operations. Let’s now find the means of `arr_delay` by carrier so we know which carriers perform better than others. We can do so using `summarize()`. 

```{webr-r}
dplyr::summarize(flights_carrier, mean_arr_delay = mean(arr_delay, na.rm = TRUE)) 
```


#### Piped

Using the piping operator,

```{webr-r}
flights_slim %>% 
  dplyr::group_by(carrier) %>% 
  dplyr::summarize(mean_arr_delay = mean(arr_delay, na.rm = TRUE)) 
```

:::
<!--end of panel-->

### Other summarizing functions

You can apply any functions that work on a vector (a variable) 

```{webr-r}
flights_slim %>%  
  dplyr::group_by(carrier) %>% 
  dplyr::summarize(
    mean_arr_delay = mean(arr_delay, na.rm = TRUE),
    min_arr_delay = min(arr_delay, na.rm = TRUE),
    quantile_arr_delay = quantile(arr_delay, prob = 0.9, na.rm = TRUE)
  ) 
```

### New variable

You can assign the results of the grouped operations to new variables using `mutate()`

```{webr-r}
flights_new <- 
  flights_slim %>% 
  dplyr::group_by(carrier, month) %>% 
  dplyr::mutate(
    mean_arr_delay = mean(arr_delay, na.rm = TRUE)
  ) %>% 
  dplyr::relocate(mean_arr_delay)

flights_new
```


### Exercises

::: {.panel-tabset}


#### Exercise 1

Find the carrier that had the longest average departure delay (`dep_delay`) during May through August. Below is the output you will see if you get it right.

```{webr-r}

```

#### Instruction

For the rest of the exercises, we are going to use the weather data for the three airports in NY. First load the weather data and get familiar with the data set.

```{webr-r}
#| autorun: true
#--- load the weather data ---#
data(weather)

#--- omit observations with NA in any of the variables ---#
weather <- na.omit(weather)

#--- take a look ---#
weather
```

#### Exercise 2

Find the daily mean temperature (temp), humidity (humid), wind speed (wind_speed), and precipitation (precip) by the origin of departure. Do not forget to name each daily weather variable. Below is the output you will see if you get it right.

```{webr-r}
#| context: output
(
daily_weather <- 
  weather %>%
  dplyr::group_by(origin, month, day) %>%
  dplyr::summarize(
    temp = mean(temp),
    humid = mean(humid),
    wind_speed = mean(wind_speed),
    precip = mean(precip)
  )
)
```

<br>

**Answer**
```{r, eval = FALSE}
#| code-fold: true
daily_weather <- 
  weather %>%
  dplyr::group_by(origin, month, day) %>%
  dplyr::summarize(
    temp = mean(temp),
    humid = mean(humid),
    wind_speed = mean(wind_speed),
    precip = mean(precip)
  )
```

#### Exercise 3

Subset the daily weather data you obtained in exercise 2 so that it contains weather information only in Nov, Dec, Jan, and Feb for flights that depart from “EWR”. Below is the output you will see if you get it right.

```{webr-r}
#| context: output
(
daily_weather %>%
  dplyr::filter(month %in% c(11, 12, 1, 2)) %>%
  dplyr::filter(origin == "EWR")
)
```

<br>

**Answer**
```{r, eval = FALSE}
#| code-fold: true
(
daily_weather %>%
  dplyr::filter(month %in% c(11, 12, 1, 2)) %>%
  dplyr::filter(origin == "EWR")
)
```

:::
<!--end of panel-->

:::
<!--end of panel-->


# Extensions (may be helpful occasionally)

<html><div style='float:left'></div><hr color='#EB811B' size=1px width=796px></html>


## `across()`

::: {.panel-tabset} 

### What

+ `across()` lets you apply the same operation (function) to multiple columns at the same time.

+ It is used with `summarize()` and `mutate()`

+ It is useful when you want to apply the same function to many variables.

### Syntax and Example

**Syntax** 

```{r eval = F}
across(which variables to apply the function, function, options to the function)
```

**Examples** 

```{r across-ex, echo = F, eval = F}
flights %>% 
  group_by(carrier) %>% 
  summarize(
    across(c(arr_delay, dep_delay, air_time, time_hour),
    mean, # function 
    na.rm = TRUE # an option to the function 
    )
  ) %>% head()
```

```{r ref.label = "across-ex", echo = F, message = F}
```

Note: `na.rm = TRUE` is an option for the `mean()` function.

### Compare

Without `across()`

```{r eval = F}
flights %>% 
  group_by(carrier) %>% 
  summarize(
    mean_arr_delay = mean(arr_delay, na.rm = TRUE),
    mean_dep_delay = mean(dep_delay, na.rm = TRUE),
    mean_air_time = mean(air_time, na.rm = TRUE),
    mean_time_hour = mean(time_hour, na.rm = TRUE)
  ) 
```

<br>

With `across()`

```{r eval = F}
flights %>% 
  group_by(carrier) %>% 
  summarize(
    across(c(arr_delay, dep_delay, air_time, time_hour),
    mean,
    na.rm = TRUE
    )
  )
```

:::


---

# `across()` with pattern functions

::: {.panel-tabset} 

### What

<br>

You can use `across()` (and other `dplyr` functions) in conjunction with functions that identify variables that fit with the pattern you specify:

+ `is.numeric()`  
+ `is.character()`  
+ `starts_with()`  
+ `ends_with()`  

### numeric

<br>

Applying the same function to all numeric variables using `where(is.numeric)`:


```{r numeric-across, echo = F, eval = F}
flights %>% 
  group_by(carrier) %>% 
  summarize(
    across(where(is.numeric),
    mean, # function to apply
    na.rm = TRUE # option to the function
    )
  ) %>% head()
```


```{r ref.label = "numeric-across", echo = F, message = F}

```

### character

<br>

Applying the same function to all character variables using `where(is.character)`:


```{r char-across, echo = F, eval = F}
flights %>% 
  group_by(carrier) %>% 
  summarize(
    across(where(is.character),
    n_distinct # function to apply
    )
  ) %>% head()
```


```{r ref.label = "char-across", echo = F, message = F}

```

+ `n_distinct()` identifies the number of unique values.

### end with

<br>

Applying the same function to all the variables that end with `delay`:

```{r end-with, echo = F, eval = F}
flights %>% 
  group_by(carrier) %>% 
  summarize(
    across(ends_with("delay"),
    mean,
    na.rm = TRUE
    )
  ) %>% head()

```

```{r ref.label = "end-with", echo = F, message = F}

```

+ Use `starts_with()` to apply the same function to all the variables that star with a particular sting of characters:

### logical operator

<br>

You can use logical operators:

```{r logical, echo = F, eval = F}
flights %>% 
  group_by(carrier) %>% 
  summarize(
    across(!where(is.numeric), n_distinct)
  ) %>% head()
```

```{r ref.label = "logical", echo = F, message = F}

```

### mix

<br>

Mixing explicitly naming variables and using functions:

```{r mix, echo = F, eval = F}
flights %>% 
  group_by(carrier) %>% 
  summarize(
    across(c(month, ends_with("delay")), mean, na.rm = TRUE),
    across(where(is.character), n_distinct)
  ) %>% head()
```

```{r ref.label = "mix", echo = F, message = F}

```

:::


## `select()` and `relocate()`

The approaches to refer to the variables that fit with a specified pattern can be applied to other `dplyr` operations as well:

Try:

```{r eval = F}
flights %>% 
  select(c(origin, where(is.numeric)))  
```

```{r eval = F}
flights %>% 
  select(ends_with("delay"))  
```

```{r eval = F}
flights %>% 
  relocate(where(is.character))  
```

