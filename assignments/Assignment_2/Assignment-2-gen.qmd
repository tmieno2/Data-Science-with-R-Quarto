---
title: "Assignment 2"
author: "Your Name Here"
format:
  html:
    embed-resources: true
    number-sections: true
    number-depth: 1
    theme: flatly
    toc: true
execute:
  echo: true
  message: false
  warning: false
---

```{r setup, echo = F}
#| eval: false
library(knitr)

setwd(here::here("assignments/Assignment_2"))
```

```{r}
#| label: packages
#| include: false
#| cache: false 
library(tidyverse)
library(readr)
library(data.table)
library(future.apply)
library(ggthemes)
library(lubridate)
```

# Assignment Goals

In this assignment, you are asked to work on a dataset of an on-farm soybean seed rate trial (see the figure below for the seed rate trial design and yield outcome). The primary goal of the project is to identify the site-specific optimal seed rate at various combinations of soy and seed price.

This assignment is designed to train you on

+ data visualization
+ data wrangling
+ writing your own functions
+ loop
+ parallelization
+ vectorized operations
+ optimization 

```{r echo = F, eval = F}
#| echo: false
#| eval: false

# This code generates a tibble data from an sf object

library(sf)
library(sp)
library(GWmodel)

data_sf <- st_read("soybean_trial_data.gpkg") %>%
  mutate(seed_rate = tgts * 2 / 1000)

gwr <- gwr.basic(yield ~ I(log(seed_rate)),
  data = as(data_sf, "Spatial"),
  bw = 100,
  kernel = "bisquare",
  adaptive = T,
  F123.test = F
)

data <- data_sf %>%
  mutate(
    beta_int = gwr$SDF$Intercept,
    beta_log_seed = gwr$SDF@data[, "I(log(seed_rate))"]
  ) %>%
  st_drop_geometry() %>%
  tibble() %>%
  select(subplot_id, seed_rate, yield, ec, beta_int, beta_log_seed)

saveRDS(data, "soybean_trial_data.rds")

# ===================================
# Create figures
# ===================================
map_theme <- theme(
  legend.position = "bottom",
  legend.key.width = unit(0.8, "cm"),
  legend.key.height = unit(0.3, "cm"),
  legend.text = element_text(size = 9, family = "Times"),
  legend.title = element_text(size = 9, family = "Times"),
  axis.text.y = element_blank(),
  axis.text.x = element_blank(),
  axis.ticks.x = element_blank(),
  axis.ticks.y = element_blank(),
  axis.line.x = element_blank(),
  axis.line.y = element_blank(),
  #--- panel ---#
  panel.border = element_blank(),
  panel.grid.major = element_line(color = "transparent"),
  panel.grid.minor = element_line(color = "transparent"),
  panel.background = element_blank(),
  # panel.background = element_rect(fill = "transparent"),
  #--- plot ---#
  plot.margin = margin(0, 0, 0, 0, "cm"),
  plot.background = element_rect(fill = "transparent", color = "transparent")
)

# ===================================
# Create Figures
# ===================================
g_seed <- ggplot(data_sf) +
  geom_sf(aes(fill = seed_rate), size = 0.2) +
  scale_fill_viridis_c(
    name = "Target Seed Rate (1000/acre)",
    guide = guide_legend(title.position = "top", nrow = 1)
  ) +
  map_theme

# /*----------------------------------*/
#' ## Yield
# /*----------------------------------*/
g_yield <- ggplot(data_sf) +
  geom_sf(aes(fill = yield), size = 0.2) +
  scale_fill_viridis_c(
    name = "Soybean Yield (bu/acre)",
    guide = guide_legend(title.position = "top", nrow = 1)
  ) +
  map_theme

library(patchwork)

g_both <- g_seed + g_yield

ggsave("yield_seed.png", height = 5, width = 7, dpi = 600)
```

![Figure 1: Yield and Seed Rate Maps](yield_seed.png)

# Importing and understanding the dataset

First, import `soybean_trial_data.rds`, which has following variables: 

```{r not_remove_1}
# Note: you need to modify this code unless you soybean_trial_data.rds
# is stored in the same folder as the Rmd file.

data <- readRDS("soybean_trial_data.rds")
```

* `subplot_id`: observational unit
* `seed_rate`: seed rate (1000 seeds/acre) 
* `yield`: soybean yield (bu/acre)
* `ec`: electrical conductivity

`subplot_id` is the unique id value assigned to each of the grids that you can see in the maps above.  

In addition to these variables, the dataset also has `beta_int` and `beta_log_seed`. They are the coefficient estimates from running the Geographically Weighted Regression method on the following model (Note that you do not need to know what that is to do this assignment): 

$$\mbox{soybean yield} = \beta_0 + \beta_1 \mbox{log(seed rate)} + u$$

The regression analysis generated coefficients estimates for each of the subplots where `beta_int` and `beta_log_seed` corresponds to $\beta_0$ and $\beta_1$, respectively. This means that each of the subplots has its own yield response function. For example, the yield response function for the grid with `subplot_id == 1` is:

$\mbox{soybean yield =}$ `r data[1, ]$beta_int` + `r data[1, ]$beta_log_seed` $\times \mbox{log(seed rate)}$

because

```{r not_remove_2, echo = T}
data[1, ]$beta_int
data[1, ]$beta_log_seed
```

# Exploratory Analysis

**Q1**

`beta_log_seed` measures how responsive soybean yield is to seed rate: the higher `beta_log_seed` is, the more responsive yield is to seed rate (as long as `beta_log_seed` is positive).

Find the mean of `beta_log_seed` and group the observations into two groups where one group has lower-than-average `beta_log_seed` values and the other has higher-than-average `beta_log_seed` values. Label them as `below_average` and `above_average`, respectively. Call the variable `below_or_average`. 

```{r }
data <-
  data %>%
  mutate(
    below_or_average = ifelse(
      beta_log_seed > mean(beta_log_seed),
      "above_average",
      "below_average"
    )
  )
```

---

**Q2**

Using `case_when()` and `quantile()`, group the observations into three categories:

+ `ec` lower than the 33% quantile of `ec` (label this group as `ec_low`)
+ `ec` higher than the 33% quantile of `ec`, but lower than the 67% quantile of `ec` (label this group as `ec_mid`)
+ `ec` higher than the 67% quantile of `ec` (label this group as `ec_high`)

Name the group variable `ec_group`. If you are not familiar with `quantile()` look it up yourself and figure out how to use it.

```{r }
data <- data %>%
  mutate(ec_group = case_when(
    ec <= quantile(ec, prob = 0.33, na.rm = T) ~ "ec_low",
    ec > quantile(ec, prob = 0.33, na.rm = T) & ec <= quantile(ec, prob = 0.67, na.rm = T) ~ "ec_mid",
    ec > quantile(ec, prob = 0.67, na.rm = T) ~ "ec_high"
  ))
```

---

**Q3**

Find the mean of `yield` by `ec_group` and create a bar chart to visualize the information. Color-differentiate the bars by `ec_group`.

```{r }
data %>%
  group_by(ec_group) %>%
  mutate(yield = mean(yield, na.rm = TRUE)) %>%
  ggplot() +
  geom_col(aes(y = yield, x = ec_group, fill = ec_group))
```

Do you see anything that is notable?

---

**Q4**

Create a scatter plot of `yield` (y-axis) against `beta_log_seed` (x-axis), and add a linear fit line using `geom_smooth()`. 

What do you see? 

```{r }
ggplot(data = data) +
  geom_point(aes(y = yield, x = beta_log_seed)) +
  geom_smooth(aes(y = yield, x = beta_log_seed), method = "lm")
```

What do you find? Looking at the relationship what do you say about the following claim:

You should plant more seeds to the parts of the field that are more productive (high-yielding)?

---

**Q5**

Create a boxplot of `beta_log_seed` against `ec_group`. Color-differentiate the boxes by `ec_group`. By default, the boxes appear in the order of `ec_high`, `ec_low`, `ec_mid`, and `NA`. First, remove the NA category by filtering out those observations. Next, using `factor()`, make the boxes appear in the order of `ec_low`, `ec_mid`, and `ec_high`. 

```{r }
data %>%
  filter(!is.na(ec_group)) %>%
  mutate(ec_group = factor(ec_group, levels = c("ec_low", "ec_mid", "ec_high"))) %>%
  ggplot() +
  geom_boxplot(aes(y = beta_log_seed, x = ec_group, fill = ec_group))
```

Do you see anything that is notable? 

# Economic Optimization

**Q6**

Define the function that takes `beta_int`, `beta_log_seed`, and `seed_rate` as its arguments (not a row number of `data`) and calculate `yield`. Use `gen_yield` as the function name. Then, predict yield for the subplot with `subplot_id == 10` at the seed rate of 100K/acre. 

```{r }
gen_yield <- function(beta_i, beta_ls, seed_rate) {
  yield <- beta_i + beta_ls * log(seed_rate)

  return(yield)
}
```


```{r }
#| include: false
gen_yield(data[10, ]$beta_int, data[10, ]$beta_log_seed, 100)
```

---

**Q7**

Using a for loop, find the predicted yield values for all the subplots at the seed rate of 100. (Hint: loop over the row numbers of `data`.).

In writing a for loop, create a storage of predicted yield values you will be calculating like below:

```{r echo = TRUE}
yield_store <- rep(0, nrow(data))
```

Then, within the loop, assign the calculated yield value to `yield_store` for each iteration. 

```{r }
yield_store <- rep(0, nrow(data))

for (i in 1:nrow(data)) {
  yield_store[i] <- gen_yield(data[i, ]$beta_int, data[i, ]$beta_log_seed, 100)
}
```

Here is the predicted yield values for the first six subplots:

```{r }
head(yield_store)
```

---

**Q7**

Using `lapply()` and `gen_yield()` find the predicted yield values for all the subplots at the seed rate of 100 (Hint: loop over the row numbers of `data`.).

Apply `unlist()` to the resulting list of values so you have a vector of yield values instead of a `list`.

```{r }
lapply(1:nrow(data), function(i) gen_yield(data[i, ]$beta_int, data[i, ]$beta_log_seed, 100)) %>%
  unlist() %>%
  head()
```

---

**Q8**

Calculating yields for all the subplots can be easily vectorized. Use a vectorized operation to calculate yields using `gen_yield()` at the seed rate of 100. In doing so, do this calculation inside `data` and name the predicted yield variable `pred_yield`. After the calculation, relocate `pred_yield` to the front and use `head()` to print the first 6 observations.

```{r }
mutate(data, pred_yield = gen_yield(beta_int, beta_log_seed, 100)) %>%
  relocate(pred_yield) %>%
  head()
```

---

**Q9**

We would like to find the optimal seed rate for each subplot at

+ soybean price: $9/bu
+ seed price: $0.35/1000 seeds

```{r echo = T}
soy_price <- 9
seed_price <- 0.35
```

We will use a grid search method. That is, we will create a sequence of seed rates, find profits, and then select the seed rate that yield the highest profit. 

Create the sequence of seed rates that ranges from the minimum and maximum experimental seed rates with the incremental step of 0.2. Name the sequence `seed_seq`.

```{r }
(
  seed_seq <- seq(min(data$seed_rate), max(data$seed_rate), by = 0.2)
)
```

---

**Q10**

We will work on a single plot first instead of working on the entire observations at the same time. 

+ Select (`select()`) only `subplot_id`, `beta_int`, and `beta_log_seed` from `data`
+ Filter the data to the subplot with `subplot == 1` and replicate the observations `length(seed_seq)` of times using `slice()`
+ Create a variable that holds `seed_seq` as its values
+ Save the data as `eval_data`

```{r }
(
  eval_data <- 
    data %>%
    select(subplot_id, beta_int, beta_log_seed) %>%
    slice(rep(1, length(seed_seq))) %>%
    mutate(seed_rate = seed_seq)
)
```

---

**Q11** 

Now that you have created a dataset with all possible values of seed rates you want to look at. You can use vectorized operations (like you did in **Q8**) to calculate profit and identify the economically optimal seed rate. Go through the following steps:

+ Calculate yields for each row using `gen_yield()`
+ Calculate profits for each row using the following formula:
  
$$\mbox{profit} = \mbox{soy price} \times \mbox{yield} - \mbox{seed price} \times \mbox{seed rate}$$

+ Identify the seed rate that maximizes the profit. 
 
You can do this by first sort the data by profit in the descending order and then get the first observation using `slice(1)`. 

```{r }
soy_price <- 9
seed_price <- 0.35

eval_data %>%
  mutate(
    yield = gen_yield(beta_int, beta_log_seed, seed_rate),
    profit = soy_price * yield - seed_price * seed_rate
  ) %>%
  arrange(desc(profit)) %>%
  slice(1)
```

---

**Q12**

Now, we would like to find the economically optimal seed rate for all the subplots. To do this, first create a function that takes a single `subplot_id` value and then return the optimal seed rate. This can be done by simply combining your answers to **Q10** and **Q11**. Then, confirm that function works when `subplot_id` is 100.

```{r}
get_opt_S <- function(i) {
  opt_s <- 
    data %>%
    select(subplot_id, beta_int, beta_log_seed) %>%
    slice(rep(i, length(seed_seq))) %>%
    mutate(seed_rate = seed_seq) %>%
    mutate(
      yield = gen_yield(beta_int, beta_log_seed, seed_rate),
      profit = soy_price * yield - seed_price * seed_rate
    ) %>%
    arrange(profit) %>%
    slice(n())
  
  return(opt_s)
}

get_opt_S(100)
```

---

**Q13**

We would like to find the optimal seed rate for each of the subplots by looping over `subplot_id`. Use `future_lapply()` to parallelize this process. Use `bind_rows()` at the end to have a single dataset that shows the optimal seed rates for all the subplots.

```{r}
library(future.apply)
# plan("multicore", workers = parallel::detectCores() - 2) 
plan("multisession", workers = parallel::detectCores() - 2) 

all_opt_see <- 
  future_lapply(data$subplot_id, \(x) get_opt_S(x)) %>%
  bind_rows()
```

